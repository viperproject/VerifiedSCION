// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package router

import (
	"net"

	"github.com/scionproto/scion/pkg/addr"
	"github.com/scionproto/scion/pkg/slayers"
	"github.com/scionproto/scion/private/topology"
)

func foldMem_test() {
	d@ := DataPlane{}
	fold d.Mem()
	fold MutexInvariant!<&d!>()
	// testing initialization with the operations from dataplane
	d.mtx.SetInv(MutexInvariant!<&d!>)
	d.AddNeighborIA(uint16(1), addr.IA(10))
	d.AddNeighborIA(uint16(2), addr.IA(11))
}

func foldScionPacketProcessorInitMem_test() {
	d := &scionPacketProcessor{}
	fold slayers.PathPoolMem(d.scionLayer.pathPool, d.scionLayer.pathPoolRaw)
	d.scionLayer.RecyclePaths()
	fold d.scionLayer.NonInitMem()
	fold d.initMem()
}

ensures 0 < runningPerm
func runningPermIsPositive() {}

ensures MutexInvariant(d) && acc(d.Mem(), OutMutexPerm)
decreases
func foldDataPlaneMem() (d *DataPlane) {
	d = &DataPlane{}
	d.external = make(map[uint16]BatchConn)
	fold accBatchConn(d.external)
	d.linkTypes = make(map[uint16]topology.LinkType)
	d.neighborIAs = make(map[uint16]addr.IA)
	d.internalNextHops = make(map[uint16]*net.UDPAddr)
	fold accAddr(d.internalNextHops)
	d.svc = newServices()
	d.bfdSessions = make(map[uint16]bfdSession)
	fold accBfdSession(d.bfdSessions)
	d.forwardingMetrics = make(map[uint16]forwardingMetrics)
	fold accForwardingMetrics(d.forwardingMetrics)
	fold d.Mem()
	fold MutexInvariant(d)
}

requires MutexInvariant(d) && acc(d.Mem(), OutMutexPerm)
requires !d.IsRunning()
ensures  acc(&d.running)
decreases
func canModifyRunning(d *DataPlane) {
	unfold MutexInvariant(d)
	d.isRunningEq()
	unfold d.Mem()
}