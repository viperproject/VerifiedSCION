// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package router

import (
	"github.com/scionproto/scion/pkg/slayers"
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/pkg/slayers/path/scion"
	"github.com/scionproto/scion/private/topology"
	"github.com/scionproto/scion/pkg/addr"
	"golang.org/x/net/ipv4"

	"verification/dependencies/encoding/binary"
	"verification/io"
	sl "verification/utils/slices"
	. "verification/utils/definitions"
)

ghost
opaque
requires sl.Bytes(raw, 0, len(raw))
requires slayers.ValidPktMetaHdr(raw)
decreases
pure func absPkt(raw []byte) (res io.Pkt) {
	return let _ := reveal slayers.ValidPktMetaHdr(raw) in
		let headerOffset := slayers.GetAddressOffset(raw) in
		let headerOffsetWithMetaLen := headerOffset + scion.MetaLen in
		let hdr := (unfolding sl.Bytes(raw, 0, len(raw)) in
			binary.BigEndian.Uint32(raw[headerOffset:headerOffset+scion.MetaLen])) in
		let metaHdr := scion.DecodedFrom(hdr)  in
		let currInfIdx := int(metaHdr.CurrINF) in
		let currHfIdx := int(metaHdr.CurrHF)   in
		let seg1Len := int(metaHdr.SegLen[0])  in
		let seg2Len := int(metaHdr.SegLen[1])  in
		let seg3Len := int(metaHdr.SegLen[2])  in
		let segs := io.CombineSegLens(seg1Len, seg2Len, seg3Len) in
		let segLen := segs.LengthOfCurrSeg(currHfIdx)            in
		let prevSegLen := segs.LengthOfPrevSeg(currHfIdx)        in
		let numINF := segs.NumInfoFields() in
		let offset := scion.HopFieldOffset(numINF, prevSegLen, headerOffsetWithMetaLen) in
		io.Pkt {
			CurrSeg: scion.CurrSeg(raw, offset, currInfIdx, currHfIdx-prevSegLen, segLen, headerOffsetWithMetaLen),
			LeftSeg: scion.LeftSeg(raw, currInfIdx + 1, segs, headerOffsetWithMetaLen),
			MidSeg: scion.MidSeg(raw, currInfIdx + 2, segs, headerOffsetWithMetaLen),
			RightSeg: scion.RightSeg(raw, currInfIdx - 1, segs, headerOffsetWithMetaLen),
		}
}

ghost
requires sl.Bytes(raw, 0, len(raw))
ensures val.isValUnsupported
ensures val.ValUnsupported_1 == path.ifsToIO_ifs(ingressID)
decreases
pure func absValUnsupported(raw []byte, ingressID uint16) (val io.Val) {
	return io.Val(io.ValUnsupported {
		path.ifsToIO_ifs(ingressID),
		io.Unit{},
	})
}

ghost
opaque
requires sl.Bytes(raw, 0, len(raw))
ensures val.isValPkt || val.isValUnsupported
decreases
pure func absIO_val(raw []byte, ingressID uint16) (val io.Val) {
	return (reveal slayers.ValidPktMetaHdr(raw) && slayers.IsSupportedPkt(raw)) ?
		io.Val(io.ValPkt{path.ifsToIO_ifs(ingressID), absPkt(raw)}) :
		absValUnsupported(raw, ingressID)
}

ghost
requires acc(sl.Bytes(raw, 0, len(raw)), R56)
requires !slayers.IsSupportedPkt(raw)
ensures  acc(sl.Bytes(raw, 0, len(raw)), R56)
ensures  absIO_val(raw, ingressID).isValUnsupported
decreases
func AbsUnsupportedPktIsUnsupportedVal(raw []byte, ingressID uint16) {
	reveal absIO_val(raw, ingressID)
}

ghost
requires respr.OutPkt != nil ==>
	sl.Bytes(respr.OutPkt, 0, len(respr.OutPkt))
decreases
pure func absReturnErr(respr processResult) (val io.Val) {
	return respr.OutPkt == nil ? io.ValUnit{} :
		absIO_val(respr.OutPkt, respr.EgressID)
}

ghost
requires acc(&d.localIA)
decreases
pure func (d *DataPlane) dpSpecWellConfiguredLocalIA(dp io.DataPlaneSpec) bool {
	return io.AS{uint(d.localIA)} == dp.Asid()
}

ghost
requires acc(&d.neighborIAs)
requires d.neighborIAs != nil ==> acc(d.neighborIAs)
decreases
pure func (d *DataPlane) dpSpecWellConfiguredNeighborIAs(dp io.DataPlaneSpec) bool {
	return forall ifs uint16 :: {ifs elem domain(d.neighborIAs)} ifs elem domain(d.neighborIAs) ==>
		io.Ifs{ifs} elem domain(dp.GetNeighborIAs()) &&
		io.AS{uint(d.neighborIAs[ifs])} == dp.GetNeighborIA(io.Ifs{ifs})
}

ghost
decreases
pure func absLinktype(link topology.LinkType) io.Link {
	 return link == topology.Core ? io.Link(io.IO_Core{}) :
		link == topology.Parent ? io.Link(io.IO_CustProv{}) :
		link == topology.Child ? io.Link(io.IO_ProvCust{}) :
		link == topology.Peer ? io.Link(io.IO_Core{}) :
		io.Link(io.IO_NoLink{})
}

ghost
requires acc(&d.linkTypes)
requires d.linkTypes != nil ==> acc(d.linkTypes)
decreases
pure func (d *DataPlane) dpSpecWellConfiguredLinkTypes(dp io.DataPlaneSpec) bool {
	return forall ifs uint16 :: {ifs elem domain(d.linkTypes)} ifs elem domain(d.linkTypes) ==>
		io.Ifs{ifs} elem domain(dp.GetLinkTypes()) &&
		absLinktype(d.linkTypes[ifs]) == dp.GetLinkType(io.Ifs{ifs})
}

ghost
opaque
requires d.Mem()
decreases
pure func (d *DataPlane) DpAgreesWithSpec(dp io.DataPlaneSpec) bool {
	return unfolding d.Mem() in
		d.dpSpecWellConfiguredLocalIA(dp)     &&
		d.dpSpecWellConfiguredNeighborIAs(dp) &&
		d.dpSpecWellConfiguredLinkTypes(dp)
}

ghost
requires acc(d.Mem(), _)
requires d.DpAgreesWithSpec(dp)
requires d.WellConfigured()
ensures  acc(&d.linkTypes, _)
ensures  d.linkTypes != nil ==> acc(d.linkTypes, _) && !(0 elem domain(d.linkTypes))
ensures  d.dpSpecWellConfiguredLinkTypes(dp)
decreases
func (d *DataPlane) LinkTypesLemma(dp io.DataPlaneSpec) {
	reveal d.WellConfigured()
	reveal d.DpAgreesWithSpec(dp)
	assert !(0 elem d.getDomLinkTypes())
	unfold acc(d.Mem(), _)
	assert !(0 elem domain(d.linkTypes))
}

ghost
requires acc(d.Mem(), _)
requires d.DpAgreesWithSpec(dp)
requires d.WellConfigured()
requires egressID elem d.getDomExternal()
ensures  egressID != 0
ensures  io.Ifs{egressID} elem domain(dp.GetNeighborIAs())
decreases
func (d *DataPlane) EgressIDNotZeroLemma(egressID uint16, dp io.DataPlaneSpec) {
	reveal d.WellConfigured()
	reveal d.DpAgreesWithSpec(dp)
}

ghost
requires acc(d.Mem(), _)
requires acc(&d.external, _)
requires d.external != nil ==> acc(d.external, _)
ensures  acc(d.Mem(), _)
ensures  acc(&d.external, _)
ensures  d.external != nil ==> acc(d.external, _)
ensures  d.getDomExternal() == domain(d.external)
decreases
func (d *DataPlane) getDomExternalLemma() {
	if (d.external != nil) {
		assert reveal d.getDomExternal() == unfolding acc(d.Mem(), _) in
			(unfolding acc(accBatchConn(d.external), _) in
					domain(d.external))
	} else {
		assert reveal d.getDomExternal() ==
			unfolding acc(d.Mem(), _) in set[uint16]{}
	}
}

ghost
requires msg.Mem()
requires sl.Bytes(msg.GetFstBuffer(), 0, len(msg.GetFstBuffer()))
decreases
pure func MsgToAbsVal(msg *ipv4.Message, ingressID uint16) (res io.Val) {
	return unfolding msg.Mem() in
		absIO_val(msg.Buffers[0], ingressID)
}
