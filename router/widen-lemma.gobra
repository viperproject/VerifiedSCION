// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package router

import (
	sl "verification/utils/slices"
	"verification/io"
	. "verification/utils/definitions"
	"verification/dependencies/encoding/binary"
	"github.com/scionproto/scion/pkg/slayers"
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/pkg/slayers/path/scion"
)

// Some thins in this file can be simplified. Nonetheless, the important definition here
// is absIO_valWidenLemma. Everything else can be seen as an implementation detail.
// TODO: prove Lemma
ghost
requires  0 <= length && length <= len(raw)
requires  acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R49)
requires  acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R49)
preserves dp.Valid()
ensures   acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R49)
ensures   acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R49)
ensures   absIO_val(dp, raw[:length], ingressID).isIO_val_Pkt2 ==>
	absIO_val(dp, raw[:length], ingressID) == absIO_val(dp, raw, ingressID)
decreases
func absIO_valWidenLemma(dp io.DataPlaneSpec, raw []byte, ingressID uint16, length int) {
	var ret1 io.IO_val
	var ret2 io.IO_val

	if (slayers.ValidPktMetaHdr(raw[:length]) && slayers.IsSupportedPkt(raw[:length])) {
		ValidPktMetaHdrWidenLemma(raw, length)
		assert slayers.ValidPktMetaHdr(raw)
		IsSupportedPktWidenLemma(raw, length)
		assert slayers.IsSupportedPkt(raw)
		absPktWidenLemma(dp, raw, length)

		ret1 = io.IO_val(io.IO_val_Pkt2{path.ifsToIO_ifs(ingressID), absPkt(dp, raw)})
		ret2 = io.IO_val(io.IO_val_Pkt2{path.ifsToIO_ifs(ingressID), absPkt(dp, raw[:length])})
		assert ret1 == reveal absIO_val(dp, raw, ingressID)
		assert ret2 == reveal absIO_val(dp, raw[:length], ingressID)
		assert ret1 == ret2
		assert absIO_val(dp, raw[:length], ingressID).isIO_val_Pkt2 ==>
			absIO_val(dp, raw[:length], ingressID) == absIO_val(dp, raw, ingressID)
	} else {
		assert !(reveal absIO_val(dp, raw[:length], ingressID).isIO_val_Pkt2)
	}
}

ghost
requires 0 <= length && length <= len(raw)
requires acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51)
requires acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51)
requires slayers.ValidPktMetaHdr(raw[:length])
ensures  acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51)
ensures  acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51)
ensures  slayers.ValidPktMetaHdr(raw)
decreases
func ValidPktMetaHdrWidenLemma(raw []byte, length int) {
	unfold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R56)
	unfold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R56)
	reveal slayers.ValidPktMetaHdr(raw[:length])
	ret1 := reveal slayers.ValidPktMetaHdr(raw)
	ret2 := reveal slayers.ValidPktMetaHdr(raw[:length])
	assert ret1 == ret2
	fold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R56)
	fold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R56)
}

ghost
requires 0 <= length && length <= len(raw)
requires acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51)
requires acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51)
requires slayers.IsSupportedPkt(raw[:length])
ensures  acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51)
ensures  acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51)
ensures  slayers.IsSupportedPkt(raw)
decreases
func IsSupportedPktWidenLemma(raw []byte, length int) {
	unfold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R56)
	unfold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R56)
	reveal slayers.IsSupportedPkt(raw[:length])
	ret1 := reveal slayers.IsSupportedPkt(raw)
	ret2 := reveal slayers.IsSupportedPkt(raw[:length])
	assert ret1 == ret2
	fold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R56)
	fold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R56)
}

ghost
requires  0 <= length && length <= len(raw)
requires dp.Valid()
requires acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R50)
requires acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R50)
requires slayers.ValidPktMetaHdr(raw)
requires slayers.ValidPktMetaHdr(raw[:length])
ensures  acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R50)
ensures  acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R50)
ensures  slayers.ValidPktMetaHdr(raw)
ensures  slayers.ValidPktMetaHdr(raw[:length])
ensures  absPkt(dp, raw) == absPkt(dp, raw[:length])
decreases
func absPktWidenLemma(dp io.DataPlaneSpec, raw []byte, length int)
/*{

	// declarations
	var last1 io.IO_as
	var last2 io.IO_as
	var first1 io.IO_as
	var first2 io.IO_as
	var leftAsidSeq1 option[seq[io.IO_as]]
	var leftAsidSeq2 option[seq[io.IO_as]]
	var rightAsidSeq1 option[seq[io.IO_as]]
	var rightAsidSeq2 option[seq[io.IO_as]]
	var midAsidSeq1 option[seq[io.IO_as]]
	var midAsidSeq2 option[seq[io.IO_as]]
	var midAsid1 option[io.IO_as]
	var midAsid2 option[io.IO_as]
	var ret1 option[io.IO_pkt2]
	var ret2 option[io.IO_pkt2]
	var lm bool

	// abspkt step by step
	_ := reveal slayers.ValidPktMetaHdr(raw)
	_ := reveal slayers.ValidPktMetaHdr(raw[:length])
	hdr1 := unfolding acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51) in binary.BigEndian.Uint32(raw[0:4])
	hdr2 := unfolding acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51) in binary.BigEndian.Uint32(raw[:length][0:4])
	assert unfolding acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51) in binary.BigEndian.Uint32(raw[:length][0:4]) == unfolding acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51) in binary.BigEndian.Uint32(raw[:length][0:4])
	assert hdr1 == hdr2

	metaHdr1 := scion.DecodedFrom(hdr1)
	metaHdr2 := scion.DecodedFrom(hdr2)
	assert metaHdr1 == metaHdr2

	currINFIdx1 := int(metaHdr1.CurrINF)
	currINFIdx2 := int(metaHdr2.CurrINF)
	assert currINFIdx1 == currINFIdx2

	currHFIdx1 := int(metaHdr1.CurrHF)
	currHFIdx2 := int(metaHdr2.CurrHF)
	assert currHFIdx1 == currHFIdx2

	seg1Len1 := int(metaHdr1.SegLen[0])
	seg1Len2 := int(metaHdr2.SegLen[0])
	assert seg1Len1 == seg1Len2

	seg2Len1 := int(metaHdr1.SegLen[1])
	seg2Len2 := int(metaHdr2.SegLen[1])
	assert seg2Len1 == seg2Len2

	seg3Len1 := int(metaHdr1.SegLen[2])
	seg3Len2 := int(metaHdr2.SegLen[2])
	assert seg3Len1 == seg3Len2

	segLen1 := lengthOfCurrSeg(currHFIdx1, seg1Len1, seg2Len1, seg3Len1)
	segLen2 := lengthOfCurrSeg(currHFIdx2, seg1Len2, seg2Len2, seg3Len2)
	assert segLen1 == segLen2

	prevSegLen1 := lengthOfPrevSeg(currHFIdx1, seg1Len1, seg2Len1, seg3Len1)
	prevSegLen2 := lengthOfPrevSeg(currHFIdx2, seg1Len2, seg2Len2, seg3Len2)
	assert prevSegLen1 == prevSegLen2

	numINF1 := numInfoFields(seg1Len1, seg2Len1, seg3Len1)
	numINF2 := numInfoFields(seg1Len2, seg2Len2, seg3Len2)
	assert numINF1 == numINF2

	offset1 := hopFieldOffset(numINF1, 0)
	offset2 := hopFieldOffset(numINF2, 0)
	assert offset1 == offset2

	consDir1 := path.ConsDir(raw, currINFIdx1)
	consDir2 := path.ConsDir(raw[:length], currINFIdx2)
	consDirWidenLemma(raw, length, currINFIdx1)
	assert consDir1 == consDir2

	asidForCurrSegWidenLemma(dp, raw, numINF1, currHFIdx1, prevSegLen1+segLen1, prevSegLen1, consDir1, dp.Asid(), length)
	currAsidSeq2 := asidForCurrSeg(dp, raw, numINF1, currHFIdx1, prevSegLen1+segLen1, prevSegLen1, consDir1, dp.Asid())
	currAsidSeq1 := asidForCurrSeg(dp, raw[:length], numINF2, currHFIdx2, prevSegLen2+segLen2, prevSegLen2, consDir2, dp.Asid())
	assert currAsidSeq1 == currAsidSeq2

	if (currAsidSeq1 == none[seq[io.IO_as]]) {
		ret := none[io.IO_pkt2]
		assert ret == reveal absPkt(dp, raw)
		assert ret == reveal absPkt(dp, raw[:length])
	} else {

		last1 = get(currAsidSeq1)[segLen1-1]
		last2 = get(currAsidSeq2)[segLen1-1]
		assert last1 == last2

		first1 = get(currAsidSeq1)[0]
		first2 = get(currAsidSeq2)[0]
		assert first1 == first2

		asidsForLeftSegWidenLemma(dp, raw, numINF1, currINFIdx1+1, seg1Len1, seg2Len1, seg3Len1, last1, length)
		leftAsidSeq1 = asidsForLeftSeg(dp, raw, numINF1, currINFIdx1 + 1, seg1Len1, seg2Len1, seg3Len1, last1)
		leftAsidSeq2 = asidsForLeftSeg(dp, raw[:length], numINF2, currINFIdx2 + 1, seg1Len2, seg2Len2, seg3Len2, last2)
		assert leftAsidSeq1 == leftAsidSeq2

		asidsForRightSegWidenLemma(dp, raw, numINF1, currINFIdx1-1, seg1Len1, seg2Len1, seg3Len1, first1, length)
		rightAsidSeq1 = asidsForRightSeg(dp, raw, numINF1, currINFIdx1 - 1, seg1Len1, seg2Len1, seg3Len1, first1)
		rightAsidSeq2 = asidsForRightSeg(dp, raw[:length], numINF2, currINFIdx2 - 1, seg1Len2, seg2Len2, seg3Len2, first2)
		assert rightAsidSeq1 == rightAsidSeq2

		if (leftAsidSeq1 == none[seq[io.IO_as]] || rightAsidSeq1 == none[seq[io.IO_as]]) {
			ret := none[io.IO_pkt2]
			assert ret == reveal absPkt(dp, raw)
			assert ret == reveal absPkt(dp, raw[:length])
		} else {
			assert leftAsidSeq2 != none[seq[io.IO_as]] && rightAsidSeq2 != none[seq[io.IO_as]]

			midAsid1 = ((currINFIdx1 == 0 && seg2Len1 > 0 && seg3Len1 > 0) ? some(get(leftAsidSeq1)[len(get(leftAsidSeq1))-1]) : (currINFIdx1 == 2 && seg2Len1 > 0) ? some(get(rightAsidSeq1)[0]) : none[io.IO_as])
			midAsid2 = ((currINFIdx2 == 0 && seg2Len2 > 0 && seg3Len2 > 0) ? some(get(leftAsidSeq2)[len(get(leftAsidSeq2))-1]) : (currINFIdx2 == 2 && seg2Len2 > 0) ? some(get(rightAsidSeq2)[0]) : none[io.IO_as])
			assert midAsid1 == midAsid2

			asidsForMidSegWidenLemma(dp, raw, numINF1, currINFIdx1+2, seg1Len1, seg2Len1, seg3Len1, midAsid1, length)
			midAsidSeq1 = asidsForMidSeg(dp, raw, numINF1, currINFIdx1 + 2, seg1Len1, seg2Len1, seg3Len1, midAsid1)
			midAsidSeq2 = asidsForMidSeg(dp, raw[:length], numINF2, currINFIdx2 + 2, seg1Len2, seg2Len2, seg3Len2, midAsid2)
			assert midAsidSeq1 == midAsidSeq2
			if (midAsidSeq1 == none[seq[io.IO_as]]) {
				ret := none[io.IO_pkt2]
				assert ret == reveal absPkt(dp, raw)
				assert ret == reveal absPkt(dp, raw[:length])
			} else {
				currSegWidenLemma(raw, offset1+prevSegLen1, currINFIdx1, currHFIdx1-prevSegLen1, get(currAsidSeq1), length)
				leftSegWidenLemma(raw, currINFIdx1 + 1, seg1Len1, seg2Len1, seg3Len1, get(leftAsidSeq1), length)
				midSegWidenLemma(raw, currINFIdx1 + 2, seg1Len1, seg2Len1, seg3Len1, get(midAsidSeq1), length)
				rightSegWidenLemma(raw, currINFIdx1 - 1, seg1Len1, seg2Len1, seg3Len1, get(rightAsidSeq1), length)
				ret1 = some(io.IO_pkt2(io.IO_Packet2{
					CurrSeg : currSeg(raw, offset1+prevSegLen1, currINFIdx1, currHFIdx1-prevSegLen1, get(currAsidSeq1)),
					LeftSeg : leftSeg(raw, currINFIdx1 + 1, seg1Len1, seg2Len1 , seg3Len1, get(leftAsidSeq1)),
					MidSeg : midSeg(raw, currINFIdx1 + 2, seg1Len1, seg2Len1 , seg3Len1, get(midAsidSeq1)),
					RightSeg : rightSeg(raw, currINFIdx1 - 1, seg1Len1, seg2Len1 , seg3Len1, get(rightAsidSeq1)),
				}))
				ret2 = some(io.IO_pkt2(io.IO_Packet2{
					CurrSeg : currSeg(raw[:length], offset2+prevSegLen2, currINFIdx2, currHFIdx2-prevSegLen2, get(currAsidSeq2)),
					LeftSeg : leftSeg(raw[:length], currINFIdx2 + 1, seg1Len2, seg2Len2 , seg3Len2, get(leftAsidSeq2)),
					MidSeg : midSeg(raw[:length], currINFIdx2 + 2, seg1Len2, seg2Len2 , seg3Len2, get(midAsidSeq2)),
					RightSeg : rightSeg(raw[:length], currINFIdx2 - 1, seg1Len2, seg2Len2 , seg3Len2, get(rightAsidSeq2)),
				}))
				reveal absPkt(dp, raw)
				reveal absPkt(dp, raw[:length])
				assert ret1 == absPkt(dp, raw)
				assert ret2 == absPkt(dp, raw[:length])
				assert ret1 == ret2
			}
		}
	}
}

ghost
requires  0 <= length && length <= len(raw)
requires acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R55)
requires acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R55)
requires 0 <= currINFIdx
requires path.InfoFieldOffset(currINFIdx) < length
ensures  acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R55)
ensures  acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R55)
ensures  path.ConsDir(raw, currINFIdx) == path.ConsDir(raw[:length], currINFIdx)
decreases
func consDirWidenLemma(raw []byte, length int, currINFIdx int) {
	unfold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R56)
	unfold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R56)
	assert &raw[path.InfoFieldOffset(currINFIdx)] == &raw[:length][path.InfoFieldOffset(currINFIdx)]
	assert raw[path.InfoFieldOffset(currINFIdx)] == raw[:length][path.InfoFieldOffset(currINFIdx)]
	assert (raw[path.InfoFieldOffset(currINFIdx)] & 0x1 == 0x1) == (raw[:length][path.InfoFieldOffset(currINFIdx)] & 0x1 == 0x1)
	fold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R56)
	fold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R56)
}
*/

// --- The file has been simplified past this point

ghost
requires  0 <= headerOffset
requires  path.InfoFieldOffset(currINFIdx, headerOffset) + path.InfoLen <= offset
requires  0 < segLen
requires  offset + path.HopLen * segLen <= length
requires length <= len(raw)
requires  0 <= currHFIdx && currHFIdx <= segLen
requires  0 <= currINFIdx && currINFIdx < 3
preserves acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51)
preserves acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51)
ensures   scion.CurrSeg(raw, offset, currINFIdx, currHFIdx, segLen, headerOffset) ==
	scion.CurrSeg(raw[:length], offset, currINFIdx, currHFIdx, segLen, headerOffset)
decreases
func currSegWidenLemma(raw []byte, offset int, currINFIdx int, currHFIdx int, segLen int, headerOffset int, length int) {
	unfold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R53)
	unfold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R53)

	ainfo1 := path.Timestamp(raw, currINFIdx, headerOffset)
	ainfo2 := path.Timestamp(raw[:length], currINFIdx, headerOffset)
	assert ainfo1 == ainfo2

	uinfo1 := path.AbsUinfo(raw, currINFIdx, headerOffset)
	uinfo2 := path.AbsUinfo(raw[:length], currINFIdx, headerOffset)
	assert uinfo1 == uinfo2

	consDir1 := path.ConsDir(raw, currINFIdx, headerOffset)
	consDir2 := path.ConsDir(raw[:length], currINFIdx, headerOffset)
	assert consDir1 == consDir2

	peer1 := path.Peer(raw, currINFIdx, headerOffset)
	peer2 := path.Peer(raw[:length], currINFIdx, headerOffset)
	assert peer1 == peer2

	segmentWidenLemma(raw, offset, currHFIdx, ainfo1, uinfo1, consDir1, peer1, segLen, length)
	ret1 := scion.segment(raw, offset, currHFIdx, ainfo1, uinfo1, consDir1, peer1, segLen)
	ret2 := scion.segment(raw[:length], offset, currHFIdx, ainfo2, uinfo2, consDir2, peer2, segLen)
	assert ret1 == reveal scion.CurrSeg(raw, offset, currINFIdx, currHFIdx, segLen, headerOffset)
	assert ret2 == reveal scion.CurrSeg(raw[:length], offset, currINFIdx, currHFIdx, segLen, headerOffset)
	assert ret1 == ret2
	fold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R53)
	fold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R53)
}

ghost
requires 0 <= offset
requires 0 < segLen
requires 0 <= currHFIdx && currHFIdx <= segLen
requires length <= len(raw)
requires offset + path.HopLen * segLen <= length
requires acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R52)
requires acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R52)
ensures  acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R52)
ensures  acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R52)
ensures  scion.segment(raw, offset, currHFIdx, ainfo, uinfo, consDir, peer, segLen) == scion.segment(raw[:length], offset, currHFIdx, ainfo, uinfo, consDir, peer, segLen)
decreases
func segmentWidenLemma(raw []byte, offset int, currHFIdx int, ainfo io.IO_ainfo, uinfo set[io.IO_msgterm], consDir bool, peer bool, segLen int, length int) {
	newP := (R52 + R53)/2
	assert R53 < newP && newP < R52
	hopFieldsWidenLemma(raw, offset, 0, segLen, length, newP)
	hopfields1 := scion.hopFields(raw, offset, 0, segLen)
	hopfields2 := scion.hopFields(raw[:length], offset, 0, segLen)
	assert hopfields1 == hopfields2

	ret1 := io.IO_seg2(io.IO_seg3_{
		AInfo :ainfo,
		UInfo : uinfo,
		ConsDir : consDir,
		Peer : peer,
		Past : scion.segPast(hopfields1, currHFIdx - 1),
		Future : scion.segFuture(hopfields1, currHFIdx),
		History : scion.segHistory(hopfields1, currHFIdx - 1),
	})
	ret2 := io.IO_seg2(io.IO_seg3_{
		AInfo :ainfo,
		UInfo : uinfo,
		ConsDir : consDir,
		Peer : peer,
		Past : scion.segPast(hopfields2, currHFIdx - 1),
		Future : scion.segFuture(hopfields2, currHFIdx),
		History : scion.segHistory(hopfields2, currHFIdx - 1),
	})
	assert ret1 == scion.segment(raw, offset, currHFIdx, ainfo, uinfo, consDir, peer, segLen)
	assert ret2 == scion.segment(raw[:length], offset, currHFIdx, ainfo, uinfo, consDir, peer, segLen)
	assert ret1 == ret2
}

ghost
requires  0 <= middle
requires  middle + path.HopLen <= length
requires  length <= len(raw)
preserves acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R54)
preserves acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R54)
ensures   path.BytesToIO_HF(raw, 0, middle, len(raw)) == path.BytesToIO_HF(raw[:length], 0, middle, length)
decreases
func BytesToIO_HFWidenLemma(raw []byte, middle int, length int) {
	unfold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R55)
	unfold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R55)
	assert path.BytesToIO_HF(raw, 0, middle, len(raw)).EgIF2 == path.BytesToIO_HF(raw[:length], 0, middle, length).EgIF2
	assert path.BytesToIO_HF(raw, 0, middle, len(raw)).InIF2 == path.BytesToIO_HF(raw[:length], 0, middle, length).InIF2
	assert path.BytesToIO_HF(raw, 0, middle, len(raw)).HVF == path.BytesToIO_HF(raw[:length], 0, middle, length).HVF
	fold acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R55)
	fold acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R55)
}

ghost
requires  R53 < p
requires  0 <= offset
requires  0 <= currHFIdx && currHFIdx <= segLen
requires  offset + path.HopLen * segLen <= length
requires  length <= len(raw)
preserves acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), p)
preserves acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), p)
ensures   scion.hopFields(raw, offset, currHFIdx, segLen) ==
	scion.hopFields(raw[:length], offset, currHFIdx, segLen)
decreases segLen - currHFIdx
func hopFieldsWidenLemma(raw []byte, offset int, currHFIdx int, segLen int, length int, p perm) {
	if currHFIdx == segLen {
		ret := seq[io.IO_HF]{}
		assert ret == scion.hopFields(raw, offset, currHFIdx, segLen)
		assert ret == scion.hopFields(raw[:length], offset, currHFIdx, segLen)
	} else {
		BytesToIO_HFWidenLemma(raw, offset + path.HopLen * currHFIdx, length)
		hf1 := path.BytesToIO_HF(raw, 0, offset + path.HopLen * currHFIdx, len(raw))
		hf2 := path.BytesToIO_HF(raw[:length], 0, offset + path.HopLen * currHFIdx, length)
		assert hf1 == hf2

		newP := (p + R53)/2
		assert R53 < newP && newP < p
		hopFieldsWidenLemma(raw, offset, currHFIdx - 1, segLen, length, newP)
		ret1 := scion.hopFields(raw, offset, currHFIdx - 1, segLen)
		ret2 := scion.hopFields(raw[:length], offset, currHFIdx - 1, segLen)
		assert ret1 == scion.hopFields(raw, offset, currHFIdx, segLen)
		assert ret2 == scion.hopFields(raw[:length], offset, currHFIdx, segLen)
		assert ret1 == ret2
	}
}

ghost
requires  0 <= headerOffset
requires  0 < seg1Len
requires  0 <= seg2Len
requires  0 <= seg3Len
requires  0 <= length && length <= len(raw)
requires  scion.pktLen(seg1Len, seg2Len, seg3Len, headerOffset) <= length
requires 1 <= currINFIdx && currINFIdx < 4
preserves acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51)
preserves acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51)
ensures   scion.LeftSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset) ==
	scion.LeftSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
decreases
func leftSegWidenLemma(raw []byte, currINFIdx int, seg1Len int, seg2Len int, seg3Len int, headerOffset int, length int) {
	offset := scion.HopFieldOffset(scion.NumInfoFields(seg1Len, seg2Len, seg3Len), 0, headerOffset)
	if currINFIdx == 1 && seg2Len > 0 {
		currSegWidenLemma(raw, offset + path.HopLen * seg1Len, currINFIdx, 0, seg2Len, headerOffset, length)
		ret1 := some(scion.CurrSeg(raw, offset + path.HopLen * seg1Len, currINFIdx, 0, seg2Len, headerOffset))
		ret2 := some(scion.CurrSeg(raw[:length], offset + path.HopLen * seg1Len, currINFIdx, 0, seg2Len, headerOffset))
		assert ret1 == reveal scion.LeftSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret2 == reveal scion.LeftSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret1 == ret2
	} else if currINFIdx == 2 && seg2Len > 0 && seg3Len > 0 {
		currSegWidenLemma(raw, offset + path.HopLen * (seg1Len + seg2Len), currINFIdx, 0, seg3Len, headerOffset, length)
		ret1 := some(scion.CurrSeg(raw, offset + path.HopLen * (seg1Len + seg2Len), currINFIdx, 0, seg3Len, headerOffset))
		ret2 := some(scion.CurrSeg(raw[:length], offset + path.HopLen * (seg1Len + seg2Len), currINFIdx, 0, seg3Len, headerOffset))
		assert ret1 == reveal scion.LeftSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret2 == reveal scion.LeftSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret1 == ret2
	} else {
		ret := none[io.IO_seg3]
		assert ret == reveal scion.LeftSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret == reveal scion.LeftSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
	}
}

ghost
requires  0 <= headerOffset
requires  0 < seg1Len
requires  0 <= seg2Len
requires  0 <= seg3Len
requires  0 <= length && length <= len(raw)
requires  scion.pktLen(seg1Len, seg2Len, seg3Len, headerOffset) <= length
requires  -1 <= currINFIdx && currINFIdx < 2
preserves acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51)
preserves acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51)
ensures   scion.RightSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset) ==
	scion.RightSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
decreases
func rightSegWidenLemma(raw []byte, currINFIdx int, seg1Len int, seg2Len int, seg3Len int, headerOffset int, length int) {
	offset := scion.HopFieldOffset(scion.NumInfoFields(seg1Len, seg2Len, seg3Len), 0, headerOffset)
	if currINFIdx == 1 && seg2Len > 0 && seg3Len > 0 {
		currSegWidenLemma(raw, offset + path.HopLen * seg1Len, currINFIdx, seg2Len, seg2Len, headerOffset, length)
		ret1 := some(scion.CurrSeg(raw, offset + path.HopLen * seg1Len, currINFIdx, seg2Len, seg2Len, headerOffset))
		ret2 := some(scion.CurrSeg(raw[:length], offset + path.HopLen * seg1Len, currINFIdx, seg2Len, seg2Len, headerOffset))
		assert ret1 == reveal scion.RightSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret2 == reveal scion.RightSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret1 == ret2
	} else if currINFIdx == 0 && seg2Len > 0 {
		currSegWidenLemma(raw, offset, currINFIdx, seg1Len, seg1Len, headerOffset, length)
		ret1 := some(scion.CurrSeg(raw, offset, currINFIdx, seg1Len, seg1Len, headerOffset))
		ret2 := some(scion.CurrSeg(raw[:length], offset, currINFIdx, seg1Len, seg1Len, headerOffset))
		assert ret1 == reveal scion.RightSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret2 == reveal scion.RightSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret1 == ret2
	} else {
		ret := none[io.IO_seg3]
		assert ret == reveal scion.RightSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
		assert ret == reveal scion.RightSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, headerOffset)
	}
}
/*
ghost
requires  0 <= seg2Len
requires  0 < seg1Len
requires  0 <= length && length <= len(raw)
requires  0 <= seg3Len
requires  2 <= currINFIdx && currINFIdx < 5
requires  pktLen(seg1Len, seg2Len, seg3Len) <= length
requires  (currINFIdx == 2 && seg2Len > 0 && seg3Len > 0) ==> len(asid) == seg3Len
requires  (currINFIdx == 4 && seg2Len > 0) ==> len(asid) == seg1Len
preserves acc(sl.AbsSlice_Bytes(raw, 0, len(raw)), R51)
preserves acc(sl.AbsSlice_Bytes(raw[:length], 0, len(raw[:length])), R51)
ensures   midSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, asid) ==
	midSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, asid)
decreases
func midSegWidenLemma(raw []byte, currINFIdx int, seg1Len int, seg2Len int, seg3Len int, asid seq[io.IO_as], length int) {
	offset := hopFieldOffset(numInfoFields(seg1Len, seg2Len, seg3Len), 0)
	if currINFIdx == 4 && seg2Len > 0 {
		currSegWidenLemma(raw, offset, 0, seg1Len, asid, length)
		ret1 := some(currSeg(raw, offset, 0, seg1Len, asid))
		ret2 := some(currSeg(raw[:length], offset, 0, seg1Len, asid))
		assert ret1 == reveal midSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, asid)
		assert ret2 == reveal midSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, asid)
		assert ret1 == ret2
	} else if currINFIdx == 2 && seg2Len > 0 && seg3Len > 0 {
		currSegWidenLemma(raw, offset + path.HopLen * (seg1Len + seg2Len), currINFIdx, 0, asid, length)
		ret1 := some(currSeg(raw, offset + path.HopLen * (seg1Len + seg2Len), currINFIdx, 0, asid))
		ret2 := some(currSeg(raw[:length], offset + path.HopLen * (seg1Len + seg2Len), currINFIdx, 0, asid))
		assert ret1 == reveal midSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, asid)
		assert ret2 == reveal midSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, asid)
		assert ret1 == ret2
	} else {
		ret := none[io.IO_seg3]
		assert ret == reveal midSeg(raw, currINFIdx, seg1Len, seg2Len, seg3Len, asid)
		assert ret == reveal midSeg(raw[:length], currINFIdx, seg1Len, seg2Len, seg3Len, asid)
	}
}
*/