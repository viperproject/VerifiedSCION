// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package router

import (
	sl "verification/utils/slices"
	"verification/io"
	. "verification/utils/definitions"
	"verification/dependencies/encoding/binary"
	"github.com/scionproto/scion/pkg/slayers"
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/pkg/slayers/path/scion"
)

// Some things in this file can be simplified. Nonetheless, the important definition here
// is absIO_valWidenLemma. Everything else can be seen as an implementation detail.
ghost
requires  0 <= length && length <= len(raw)
requires  0 <= 0 && 0 <= len(raw) && len(raw) <= cap(raw) && forall i int :: { &raw[i] } 0 <= i && i < len(raw) ==> acc(&raw[i], R49)
requires  0 <= 0 && 0 <= len(raw[:length]) && len(raw[:length]) <= cap(raw[:length]) && forall i int :: { &raw[:length][i] } 0 <= i && i < len(raw[:length]) ==> acc(&raw[:length][i], R49)
ensures   0 <= 0 && 0 <= len(raw) && len(raw) <= cap(raw) && forall i int :: { &raw[i] } 0 <= i && i < len(raw) ==> acc(&raw[i], R49)
ensures   0 <= 0 && 0 <= len(raw[:length]) && len(raw[:length]) <= cap(raw[:length]) && forall i int :: { &raw[:length][i] } 0 <= i && i < len(raw[:length]) ==> acc(&raw[:length][i], R49)
ensures   absIO_val(raw[:length], ingressID).isIO_val_Pkt2 ==>
	absIO_val(raw[:length], ingressID) == absIO_val(raw, ingressID)
decreases
func absIO_valWidenLemma(raw []byte, ingressID uint16, length int) {
	var ret1 io.IO_val
	var ret2 io.IO_val

	if (slayers.ValidPktMetaHdr(raw[:length]) && slayers.IsSupportedPkt(raw[:length])) {
		ValidPktMetaHdrWidenLemma(raw, length)
		assert slayers.ValidPktMetaHdr(raw)
		IsSupportedPktWidenLemma(raw, length)
		assert slayers.IsSupportedPkt(raw)
		absPktWidenLemma(raw, length)

		ret1 = io.IO_val(io.IO_val_Pkt2{path.ifsToIO_ifs(ingressID), absPkt(raw)})
		ret2 = io.IO_val(io.IO_val_Pkt2{path.ifsToIO_ifs(ingressID), absPkt(raw[:length])})
		assert ret1 == reveal absIO_val(raw, ingressID)
		assert ret2 == reveal absIO_val(raw[:length], ingressID)
		assert ret1 == ret2
		assert absIO_val(raw[:length], ingressID).isIO_val_Pkt2 ==>
			absIO_val(raw[:length], ingressID) == absIO_val(raw, ingressID)
	} else {
		assert !(reveal absIO_val(raw[:length], ingressID).isIO_val_Pkt2)
	}
}

ghost
requires 0 <= length && length <= len(raw)
requires 0 <= 0 && 0 <= len(raw) && len(raw) <= cap(raw) && forall i int :: { &raw[i] } 0 <= i && i < len(raw) ==> acc(&raw[i], R51)
requires 0 <= 0 && 0 <= len(raw[:length]) && len(raw[:length]) <= cap(raw[:length]) && forall i int :: { &raw[:length][i] } 0 <= i && i < len(raw[:length]) ==> acc(&raw[:length][i], R51)
requires slayers.ValidPktMetaHdr(raw[:length])
ensures  0 <= 0 && 0 <= len(raw) && len(raw) <= cap(raw) && forall i int :: { &raw[i] } 0 <= i && i < len(raw) ==> acc(&raw[i], R51)
ensures  0 <= 0 && 0 <= len(raw[:length]) && len(raw[:length]) <= cap(raw[:length]) && forall i int :: { &raw[:length][i] } 0 <= i && i < len(raw[:length]) ==> acc(&raw[:length][i], R51)
ensures  slayers.ValidPktMetaHdr(raw)
decreases
func ValidPktMetaHdrWidenLemma(raw []byte, length int) {


	reveal slayers.ValidPktMetaHdr(raw[:length])
	ret1 := reveal slayers.ValidPktMetaHdr(raw)
	ret2 := reveal slayers.ValidPktMetaHdr(raw[:length])
	assert ret1 == ret2


}

ghost
requires 0 <= length && length <= len(raw)
requires 0 <= 0 && 0 <= len(raw) && len(raw) <= cap(raw) && forall i int :: { &raw[i] } 0 <= i && i < len(raw) ==> acc(&raw[i], R51)
requires 0 <= 0 && 0 <= len(raw[:length]) && len(raw[:length]) <= cap(raw[:length]) && forall i int :: { &raw[:length][i] } 0 <= i && i < len(raw[:length]) ==> acc(&raw[:length][i], R51)
requires slayers.IsSupportedPkt(raw[:length])
ensures  0 <= 0 && 0 <= len(raw) && len(raw) <= cap(raw) && forall i int :: { &raw[i] } 0 <= i && i < len(raw) ==> acc(&raw[i], R51)
ensures  0 <= 0 && 0 <= len(raw[:length]) && len(raw[:length]) <= cap(raw[:length]) && forall i int :: { &raw[:length][i] } 0 <= i && i < len(raw[:length]) ==> acc(&raw[:length][i], R51)
ensures  slayers.IsSupportedPkt(raw)
decreases
func IsSupportedPktWidenLemma(raw []byte, length int) {


	reveal slayers.IsSupportedPkt(raw[:length])
	ret1 := reveal slayers.IsSupportedPkt(raw)
	ret2 := reveal slayers.IsSupportedPkt(raw[:length])
	assert ret1 == ret2


}

ghost
requires  0 <= length && length <= len(raw)
requires 0 <= 0 && 0 <= len(raw) && len(raw) <= cap(raw) && forall i int :: { &raw[i] } 0 <= i && i < len(raw) ==> acc(&raw[i], R50)
requires 0 <= 0 && 0 <= len(raw[:length]) && len(raw[:length]) <= cap(raw[:length]) && forall i int :: { &raw[:length][i] } 0 <= i && i < len(raw[:length]) ==> acc(&raw[:length][i], R50)
requires slayers.ValidPktMetaHdr(raw)
requires slayers.ValidPktMetaHdr(raw[:length])
ensures  0 <= 0 && 0 <= len(raw) && len(raw) <= cap(raw) && forall i int :: { &raw[i] } 0 <= i && i < len(raw) ==> acc(&raw[i], R50)
ensures  0 <= 0 && 0 <= len(raw[:length]) && len(raw[:length]) <= cap(raw[:length]) && forall i int :: { &raw[:length][i] } 0 <= i && i < len(raw[:length]) ==> acc(&raw[:length][i], R50)
ensures  slayers.ValidPktMetaHdr(raw)
ensures  slayers.ValidPktMetaHdr(raw[:length])
ensures  absPkt(raw) == absPkt(raw[:length])
decreases
func absPktWidenLemma(raw []byte, length int) {

	reveal slayers.ValidPktMetaHdr(raw)
	reveal slayers.ValidPktMetaHdr(raw[:length])


	headerOffset1 := slayers.GetAddressOffset(raw)
	headerOffset2 := slayers.GetAddressOffset(raw[:length])
	assert headerOffset1 == headerOffset2
	headerOffset := headerOffset1
	headerOffsetWithMetaLen := headerOffset + scion.MetaLen
	hdr1 := binary.BigEndian.Uint32(raw[headerOffset:headerOffset+scion.MetaLen])
	hdr2 := binary.BigEndian.Uint32(raw[:length][headerOffset:headerOffset+scion.MetaLen])
	assert hdr1 == hdr2
	hdr := hdr1



	metaHdr := scion.DecodedFrom(hdr)
	currInfIdx := int(metaHdr.CurrINF)
	currHfIdx := int(metaHdr.CurrHF)
	seg1Len := int(metaHdr.SegLen[0])
	seg2Len := int(metaHdr.SegLen[1])
	seg3Len := int(metaHdr.SegLen[2])
	segs := io.CombineSegLens(seg1Len, seg2Len, seg3Len)
	segLen := segs.LengthOfCurrSeg(currHfIdx)
	prevSegLen := segs.LengthOfPrevSeg(currHfIdx)
	numINF := segs.NumInfoFields()
	offset := scion.HopFieldOffset(numINF, prevSegLen, headerOffsetWithMetaLen)

	scion.WidenCurrSeg(raw, offset, currInfIdx, currHfIdx-prevSegLen, segLen, headerOffsetWithMetaLen, 0, length)
	scion.WidenLeftSeg(raw, currInfIdx + 1, segs, headerOffsetWithMetaLen, 0, length)
	scion.WidenMidSeg(raw, currInfIdx + 2, segs, headerOffsetWithMetaLen, 0, length)
	scion.WidenRightSeg(raw, currInfIdx - 1, segs, headerOffsetWithMetaLen, 0, length)

	assert reveal absPkt(raw) == reveal absPkt(raw[:length])
}
