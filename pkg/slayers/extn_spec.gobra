// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package slayers

import (
	"github.com/google/gopacket"

	def "github.com/scionproto/scion/verification/utils/definitions"
	"github.com/scionproto/scion/verification/utils/slices"
)

ghost
requires  acc(&o.OptType, _) && acc(&o.OptData, _) && acc(&o.OptDataLen, _)
// may need: ensures 0 <= res
decreases
pure func (o *tlvOption) lengthGhost(fixLengths bool) (res int) {
	return o.OptType == OptTypePad1? 1 : (fixLengths? len(o.OptData) + 2 : int(o.OptDataLen) + 2)
}

// The following computes the sum of elements from right to left, makes it trivial to prove
// computeLen(options, start, end-1) + options[end].lengthGhost(false) == computeLen(options, start, end)
// when start, end, and end-1 are valid indexes in options.
ghost
requires 0 <= start && start <= end && end < len(options)
requires forall i int :: { &options[i] } start <= i && i <= end ==> acc(&options[i], _)
requires forall i int :: { &options[i] } start <= i && i <= end ==>
	(acc(&options[i].OptType, _) && acc(&options[i].OptData, _) && acc(&options[i].OptDataLen, _))
pure func computeLen(options []*tlvOption, start, end int) (res int) {
	return start < end? options[end].lengthGhost(false) + computeLen(options, start, end-1) : /* start==end */ options[start].lengthGhost(false)
}

/*
ghost
requires  0 <= start && start <= end && end < len(options)
preserves forall i int :: { &options[i] } start <= i && i <= end ==> acc(&options[i], def.ReadL20)
preserves forall i int :: { &options[i] } start <= i && i <= end ==> 
	(acc(&options[i].OptType, def.ReadL20) && acc(&options[i].OptData, def.ReadL20) && acc(&options[i].OptDataLen, def.ReadL20))
ensures   computeLen(options, start, end) + options[end].lengthGhost(false) == computeLen(options, start, end+1)
decreases end - start
func lemmaComputeLen(options []*tlvOption, start, end int) {
	assert computeLen(options, start, end) ==
		options[start].lengthGhost(false) + computeLen(options, start+1, end)
		// TODO: finish proof
	if start == end {
		assume false
	} else {
		assert computeLen(options, start+1, end) == 0
		assume false
		assert computeLen(options, start+1, end + 1) == options[end].lengthGhost(false)
	}
}
*/

/*
pred dryrunProof(options []*tlvOption, l int, fixLengths bool) {
	(forall i int :: { &options[i] } 0 <= i && i < len(options) ==> acc(&options[i], def.ReadL20)) &&
	(forall i, j int :: (0 <= i && i < len(options) && 0 <= j && j < len(options) && j != i) ==> options[i] != options[j]) &&
	(forall i int :: { &options[i] } 0 <= i && i < len(options) ==> acc(options[i], def.ReadL20)) // &&
	// computeLen(options, 0, len(options), fixLengths) <= l
}
*/

pred (e *extnBase) NonInitMem() {
	acc(e)
}

pred (s *HopByHopExtn) NonInitMem()

pred (s *HopByHopExtn) Mem(ub []byte)

requires def.Uncallable()
func (b *HopByHopExtn) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

// TODO
// (*HopByHopExtn) implements gopacket.Layer
// (*HopByHopExtn) implements gopacket.SerializableLayer
// (*HopByHopExtn) implements gopacket.DecodingLayer
