// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package slayers

import (
	"github.com/google/gopacket"

	def "github.com/scionproto/scion/verification/utils/definitions"
	"github.com/scionproto/scion/verification/utils/slices"
)

ghost
requires  acc(o, def.ReadL20)
decreases
pure func (o *tlvOption) lengthGhost(fixLengths bool) (res int) {
	return o.OptType == OptTypePad1? 1 : (fixLengths? len(o.OptData) + 2 : int(o.OptDataLen) + 2)
}

ghost
requires 0 <= start && start <= end && end <= len(options)
requires forall i int :: { &options[i] } start <= i && i <= end ==> (acc(&options[i], def.ReadL20) && acc(options[i], def.ReadL20))
pure func computeLen(options []*tlvOption, start, end int, fixLengths bool) (res int) {
    return start >= end? 0 : options[start].lengthGhost(fixLengths) + computeLen(options, start+1, end, fixLengths)
}

pred (s *HopByHopExtn) NonInitMem()

pred (s *HopByHopExtn) Mem(ub []byte)

requires def.Uncallable()
func (b *HopByHopExtn) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

// TODO
// (*HopByHopExtn) implements gopacket.Layer
// (*HopByHopExtn) implements gopacket.SerializableLayer
// (*HopByHopExtn) implements gopacket.DecodingLayer
