// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package slayers

import (
	"github.com/google/gopacket"

	def "github.com/scionproto/scion/verification/utils/definitions"
	"github.com/scionproto/scion/verification/utils/slices"
)

/** start of extnBase **/

pred (e *extnBase) NonInitMem() {
	acc(e)
}

pred (e *extnBase) Mem(ubuf []byte) {
	e.BaseLayer.Mem(ubuf) &&
	acc(&e.NextHdr)   &&
	acc(&e.ExtLen)    &&
	acc(&e.ActualLen)
}

/** end of extnBase **/

/** Currently Axiomatized - HopByHopExtn **/
pred (h *HopByHopExtn) NonInitMem()

pred (h *HopByHopExtn) Mem(ubuf []byte)

// Gobra is not able to infer that HopByHopExtn is "inheriting"
// the implementation of LayerContents from extnBase.
requires def.Uncallable()
func (h *HopByHopExtn) LayerContents() (res []byte) {
	res = h.BaseLayer.LayerContents()
	return res
}

(*HopByHopExtn) implements gopacket.Layer
(*HopByHopExtn) implements gopacket.DecodingLayer
// May not be necessary, but helpful
// (*HopByHopExtn) implements gopacket.SerializableLayer

/** End of HopByHopExtn (Axiomatization) **/

/** Currently Axiomatized - HopByHopExtnSkipper **/
pred (h *HopByHopExtnSkipper) NonInitMem() {
	acc(h)
}

pred (h *HopByHopExtnSkipper) Mem(ubuf []byte) {
	h.extnBase.Mem(ubuf)
}

// Gobra is not able to infer that HopByHopExtnSkipper is "inheriting"
// the implementation of LayerContents from extnBase.
requires def.Uncallable()
func (h *HopByHopExtnSkipper) LayerContents() (res []byte) {
	res = h.BaseLayer.LayerContents()
	return res
}

// Gobra is not able to infer that HopByHopExtnSkipper is "inheriting"
// the implementation of LayerPayload from extnBase.
// TODO: introduce proof obligations in the body which include unfolding Mem()
//       and calling this.extnBase.BaseLayer.LayerPayload
requires h.Mem(ub)
ensures  slices.AbsSlice_Bytes(res, 0, len(res))
ensures  slices.AbsSlice_Bytes(res, 0, len(res)) --* h.Mem(ub)
decreases
func (h *HopByHopExtnSkipper) LayerPayload(ghost ub []byte) (res []byte)

(*HopByHopExtnSkipper) implements gopacket.Layer
(*HopByHopExtnSkipper) implements gopacket.DecodingLayer

/** End of HopByHopExtnSkipper (Axiomatization) **/

/** Currently Axiomatized - EndToEndExtn **/
pred (e *EndToEndExtn) NonInitMem()

pred (e *EndToEndExtn) Mem(ubuf []byte)

// Gobra is not able to infer that EndToEndExtn is "inheriting"
// the implementation of LayerContents from extnBase.
requires def.Uncallable()
func (e *EndToEndExtn) LayerContents() (res []byte) {
	res = e.BaseLayer.LayerContents()
	return res
}

(*EndToEndExtn) implements gopacket.Layer
(*EndToEndExtn) implements gopacket.DecodingLayer
// May not be necessary, but helpful
// (*EndToEndExtn) implements gopacket.SerializableLayer

/** End of EndToEndExtn (Axiomatization) **/

/** Currently Axiomatized - EndToEndExtnSkipper **/
pred (e *EndToEndExtnSkipper) NonInitMem() {
	acc(e)
}

pred (e *EndToEndExtnSkipper) Mem(ubuf []byte)  {
	e.extnBase.Mem(ubuf)
}

// Gobra is not able to infer that EndToEndExtnSkipper is "inheriting"
// the implementation of LayerContents from extnBase.
requires def.Uncallable()
func (e *EndToEndExtnSkipper) LayerContents() (res []byte) {
	res = e.BaseLayer.LayerContents()
	return res
}

// Gobra is not able to infer that EndToEndExtnSkipper is "inheriting"
// the implementation of LayerPayload from extnBase.
// TODO: introduce proof obligations in the body which include unfolding Mem()
//       and calling this.extnBase.BaseLayer.LayerPayload
requires e.Mem(ub)
ensures  slices.AbsSlice_Bytes(res, 0, len(res))
ensures  slices.AbsSlice_Bytes(res, 0, len(res)) --* e.Mem(ub)
decreases
func (e *EndToEndExtnSkipper) LayerPayload(ghost ub []byte) (res []byte)

(*EndToEndExtnSkipper) implements gopacket.Layer
(*EndToEndExtnSkipper) implements gopacket.DecodingLayer

/** End of EndToEndExtnSkipper (Axiomatization) **/

/** Definitions required for serializeTLVOptions **/
ghost
requires  acc(&o.OptType, _) && acc(&o.OptData, _) && acc(&o.OptDataLen, _)
// may need: ensures 0 <= res
decreases
pure func (o *tlvOption) lengthGhost(fixLengths bool) (res int) {
	return o.OptType == OptTypePad1? 1 : (fixLengths? len(o.OptData) + 2 : int(o.OptDataLen) + 2)
}

// The following computes the sum of elements from right to left, makes it trivial to prove
// computeLen(options, start, end-1) + options[end].lengthGhost(false) == computeLen(options, start, end)
// when start, end, and end-1 are valid indexes in options.
ghost
requires 0 <= start && start <= end && end < len(options)
requires forall i int :: { &options[i] } start <= i && i <= end ==> acc(&options[i], _)
requires forall i int :: { &options[i] } start <= i && i <= end ==>
	(acc(&options[i].OptType, _) && acc(&options[i].OptData, _) && acc(&options[i].OptDataLen, _))
// decreases end
pure func computeLen(options []*tlvOption, start, end int) (res int) {
	return start < end? options[end].lengthGhost(false) + computeLen(options, start, end-1) : /* start==end */ options[start].lengthGhost(false)
}

/** End of definitions required for serializeTLVOptions **/