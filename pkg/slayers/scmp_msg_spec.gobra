// +gobra

package slayers

import (
	"github.com/google/gopacket"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (s *SCMPExternalInterfaceDown) Mem() {
	acc(&s.IA) && acc(&s.IfID) && s.BaseLayer.Mem()
}

pred (s *SCMPExternalInterfaceDown) LayerMem() {
	s.BaseLayer.LayerMem()
}

pred (s *SCMPExternalInterfaceDown) PayloadMem() {
	s.BaseLayer.PayloadMem()
}

requires b.LayerMem()
ensures slices.AbsSlice_Bytes(res, 0, len(res))
ensures slices.AbsSlice_Bytes(res, 0, len(res)) --* b.LayerMem()
decreases
func (b *SCMPExternalInterfaceDown) LayerContents() (res []byte) {
	unfold b.LayerMem()
	res = b.BaseLayer.LayerContents()
	package slices.AbsSlice_Bytes(res, 0, len(res)) --* b.LayerMem() {
		apply slices.AbsSlice_Bytes(res, 0, len(res)) --* b.BaseLayer.LayerMem()
		fold b.LayerMem()
	}
}

requires b.PayloadMem()
ensures slices.AbsSlice_Bytes(res, 0, len(res))
ensures slices.AbsSlice_Bytes(res, 0, len(res)) --* b.PayloadMem()
decreases
func (b *SCMPExternalInterfaceDown) LayerPayload() (res []byte) {
	unfold b.PayloadMem()
	res = b.BaseLayer.LayerPayload()
	package slices.AbsSlice_Bytes(res, 0, len(res)) --* b.PayloadMem() {
		apply slices.AbsSlice_Bytes(res, 0, len(res)) --* b.BaseLayer.PayloadMem()
		fold b.PayloadMem()
	}
}


(*SCMPExternalInterfaceDown) implements gopacket.Layer/* {
	pure (a *SCMPExternalInterfaceDown) LayerType() gopacket.LayerType {
		return a.LayerType()
	}

	(a *SCMPExternalInterfaceDown) LayerContents() []byte {
		return a.LayerContents()
	}

	(a *SCMPExternalInterfaceDown) LayerPayload() []byte {
		return a.LayerPayload()
	}
  }*/
