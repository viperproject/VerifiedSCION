// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package slayers

import (
	"github.com/google/gopacket"
	"github.com/scionproto/scion/pkg/addr"
	def "github.com/scionproto/scion/verification/utils/definitions"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (s *SCMPExternalInterfaceDown) NonInitMem() {
	acc(&s.IA) && acc(&s.IfID) && acc(&s.BaseLayer)
}

pred (s *SCMPExternalInterfaceDown) Mem(ub []byte) {
	acc(&s.IA) && acc(&s.IfID) && s.BaseLayer.Mem(ub, addr.IABytes+scmpRawInterfaceLen)
}

requires def.Uncallable()
func (b *SCMPExternalInterfaceDown) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

preserves acc(b.Mem(ub), def.ReadL20)
ensures   0 <= start && start <= end && end <= len(ub)
ensures   len(res) == end - start
ensures   res === ub[start:end]
decreases
func (b *SCMPExternalInterfaceDown) LayerPayload(ghost ub []byte) (res []byte, ghost start int, ghost end int) {
	unfold acc(b.Mem(ub), def.ReadL20)
	res = b.BaseLayer.LayerPayload(ub, addr.IABytes+scmpRawInterfaceLen)
	start = addr.IABytes+scmpRawInterfaceLen
	end = len(ub)
	fold acc(b.Mem(ub), def.ReadL20)
	return res, start, end
}


(*SCMPExternalInterfaceDown) implements gopacket.Layer
(*SCMPExternalInterfaceDown) implements gopacket.SerializableLayer

pred (s *SCMPInternalConnectivityDown) NonInitMem() {
	acc(&s.IA) && acc(&s.Ingress) && acc(&s.Egress) && acc(&s.BaseLayer)
}

pred (s *SCMPInternalConnectivityDown) Mem(ub []byte) {
	acc(&s.IA) && acc(&s.Ingress) && acc(&s.Egress) && s.BaseLayer.Mem(ub, addr.IABytes+2*scmpRawInterfaceLen)
}

requires def.Uncallable()
func (b *SCMPInternalConnectivityDown) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

preserves acc(b.Mem(ub), def.ReadL20)
ensures   0 <= start && start <= end && end <= len(ub)
ensures   len(res) == end - start
ensures   res === ub[start:end]
decreases
func (b *SCMPInternalConnectivityDown) LayerPayload(ghost ub []byte) (res []byte, ghost start int, ghost end int) {
	unfold acc(b.Mem(ub), def.ReadL20)
	res = b.BaseLayer.LayerPayload(ub, addr.IABytes+2*scmpRawInterfaceLen)
	start = addr.IABytes+2*scmpRawInterfaceLen
	end = len(ub)
	fold acc(b.Mem(ub), def.ReadL20)
	return res, start, end
}

(*SCMPInternalConnectivityDown) implements gopacket.Layer
(*SCMPInternalConnectivityDown) implements gopacket.SerializableLayer

pred (s *SCMPEcho) NonInitMem() {
	acc(&s.Identifier) && acc(&s.SeqNumber) && acc(&s.BaseLayer)
}

pred (s *SCMPEcho) Mem(ub []byte) {
	acc(&s.Identifier) && acc(&s.SeqNumber) && s.BaseLayer.Mem(ub, 4)
}

requires def.Uncallable()
func (b *SCMPEcho) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

preserves acc(b.Mem(ub), def.ReadL20)
ensures   0 <= start && start <= end && end <= len(ub)
ensures   len(res) == end - start
ensures   res === ub[start:end]
decreases
func (b *SCMPEcho) LayerPayload(ghost ub []byte) (res []byte, ghost start int, ghost end int) {
	unfold acc(b.Mem(ub), def.ReadL20)
	res = b.BaseLayer.LayerPayload(ub, 4)
	start = 4
	end = len(ub)
	fold acc(b.Mem(ub), def.ReadL20)
	return res, start, end
}

(*SCMPEcho) implements gopacket.Layer
(*SCMPEcho) implements gopacket.SerializableLayer

pred (s *SCMPParameterProblem) NonInitMem() {
	acc(&s.Pointer) && acc(&s.BaseLayer)
}

pred (s *SCMPParameterProblem) Mem(ub []byte) {
	acc(&s.Pointer) && s.BaseLayer.Mem(ub, 4)
}

requires def.Uncallable()
func (b *SCMPParameterProblem) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

preserves acc(b.Mem(ub), def.ReadL20)
ensures   0 <= start && start <= end && end <= len(ub)
ensures   len(res) == end - start
ensures   res === ub[start:end]
decreases
func (b *SCMPParameterProblem) LayerPayload(ghost ub []byte) (res []byte, ghost start int, ghost end int) {
	unfold acc(b.Mem(ub), def.ReadL20)
	res = b.BaseLayer.LayerPayload(ub, 4)
	start = 4
	end = len(ub)
	fold acc(b.Mem(ub), def.ReadL20)
	return res, start, end
}

(*SCMPParameterProblem) implements gopacket.Layer
(*SCMPParameterProblem) implements gopacket.SerializableLayer

pred (s *SCMPTraceroute) NonInitMem() {
	acc(&s.Identifier) && acc(&s.Sequence) && acc(&s.IA) && acc(&s.Interface) && acc(&s.BaseLayer)
}

pred (s *SCMPTraceroute) Mem(ub []byte) {
	acc(&s.Identifier) &&
	acc(&s.Sequence) &&
	acc(&s.IA) &&
	acc(&s.Interface) &&
	s.BaseLayer.Mem(ub, 4+addr.IABytes+scmpRawInterfaceLen)
}

requires def.Uncallable()
decreases
func (b *SCMPTraceroute) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

preserves acc(b.Mem(ub), def.ReadL20)
ensures   0 <= start && start <= end && end <= len(ub)
ensures   len(res) == end - start
ensures   res === ub[start:end]
decreases
func (b *SCMPTraceroute) LayerPayload(ghost ub []byte) (res []byte, ghost start int, ghost end int) {
	unfold acc(b.Mem(ub), def.ReadL20)
	res = b.BaseLayer.LayerPayload(ub, 4+addr.IABytes+scmpRawInterfaceLen)
	start = 4+addr.IABytes+scmpRawInterfaceLen
	end = len(ub)
	fold acc(b.Mem(ub), def.ReadL20)
	return res, start, end
}

(*SCMPTraceroute) implements gopacket.Layer
(*SCMPTraceroute) implements gopacket.SerializableLayer


pred (s *SCMPDestinationUnreachable) NonInitMem() {
	acc(&s.BaseLayer)
}

pred (s *SCMPDestinationUnreachable) Mem(ub []byte) {
	s.BaseLayer.Mem(ub, 4)
}

requires def.Uncallable()
func (b *SCMPDestinationUnreachable) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

preserves acc(b.Mem(ub), def.ReadL20)
ensures   0 <= start && start <= end && end <= len(ub)
ensures   len(res) == end - start
ensures   res === ub[start:end]
decreases
func (b *SCMPDestinationUnreachable) LayerPayload(ghost ub []byte) (res []byte, ghost start int, ghost end int) {
	unfold acc(b.Mem(ub), def.ReadL20)
	res = b.BaseLayer.LayerPayload(ub, 4)
	start = 4
	end = len(ub)
	fold acc(b.Mem(ub), def.ReadL20)
	return res, start, end
}

(*SCMPDestinationUnreachable) implements gopacket.Layer
(*SCMPDestinationUnreachable) implements gopacket.SerializableLayer

pred (s *SCMPPacketTooBig) NonInitMem() {
	acc(&s.MTU) && acc(&s.BaseLayer)
}

pred (s *SCMPPacketTooBig) Mem(ub []byte) {
	acc(&s.MTU) && s.BaseLayer.Mem(ub, 4)
}

requires def.Uncallable()
func (b *SCMPPacketTooBig) LayerContents() (res []byte) {
	res = b.BaseLayer.LayerContents()
	return res
}

preserves acc(b.Mem(ub), def.ReadL20)
ensures   0 <= start && start <= end && end <= len(ub)
ensures   len(res) == end - start
ensures   res === ub[start:end]
decreases
func (b *SCMPPacketTooBig) LayerPayload(ub []byte) (res []byte, ghost start int, ghost end int) {
	unfold acc(b.Mem(ub), def.ReadL20)
	res = b.BaseLayer.LayerPayload(ub, 4)
	start = 4
	end = len(ub)
	fold acc(b.Mem(ub), def.ReadL20)
	return res, start, end
}

(*SCMPPacketTooBig) implements gopacket.Layer
(*SCMPPacketTooBig) implements gopacket.SerializableLayer
