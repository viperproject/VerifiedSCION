// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package empty

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (e Path) Mem(buf []byte) { len(buf) == 0 }

pred (e Path) NonInitMem() { true }

ghost
requires e.Mem(buf)
ensures  e.NonInitMem()
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
decreases
func (e Path) DowngradePerm(buf []byte) {
	unfold e.Mem(buf)
	fold slices.AbsSlice_Bytes(buf, 0, len(buf))
	fold e.NonInitMem()
}

ghost
requires 0 < p
requires acc(e.Mem(ub), p)
ensures  acc(slices.AbsSlice_Bytes(ub, 0, len(ub)), p)
ensures  acc(slices.AbsSlice_Bytes(ub, 0, len(ub)), p) --* acc(e.Mem(ub), p)
decreases
func (e Path) AccUnderlyingBuf(ghost ub []byte, ghost p perm) {
	unfold acc(e.Mem(ub), p)
	fold acc(slices.AbsSlice_Bytes(ub, 0, len(ub)), p)
	package acc(slices.AbsSlice_Bytes(ub, 0, len(ub)), p) --* acc(e.Mem(ub), p) {
		fold acc(e.Mem(ub), p)
	}
}

Path implements path.Path
