// Copyright 2022 Eth Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package path

import "github.com/scionproto/scion/verification/utils/slices"

/** rawPath spec **/
pred (r *rawPath) Mem(underlyingBuf []byte) {
	acc(r) &&
	r.raw === underlyingBuf &&
	slices.AbsSlice_Bytes(r.raw, 0, len(r.raw))
}

pred (r *rawPath) NonInitMem() {
	acc(r)
}

ghost
requires p.Mem(buf)
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
ensures  p.NonInitMem()
decreases
func (p *rawPath) DowngradePerm(ghost buf []byte) {
	unfold p.Mem(buf)
	fold p.NonInitMem()
}

ghost
requires 0 < pm
requires acc(p.Mem(ub), pm)
ensures  acc(slices.AbsSlice_Bytes(ub, 0, len(ub)), pm)
ensures  acc(slices.AbsSlice_Bytes(ub, 0, len(ub)), pm) --* acc(p.Mem(ub), pm)
decreases
func (p *rawPath) AccUnderlyingBuf(ghost ub []byte, ghost pm perm) {
	unfold acc(p.Mem(ub), pm)
	package acc(slices.AbsSlice_Bytes(ub, 0, len(ub)), pm) --* acc(p.Mem(ub), pm) {
		fold acc(p.Mem(ub), pm)
	}
}

(*rawPath) implements Path

/** End of rawPath spec **/

/** Global state of the package **/
ghost const MaxPathType = maxPathType

pred PathPackageMem() {
	acc(&registeredPaths) &&
	acc(&strictDecoding) &&
	forall t Type :: (0 <= t && t < maxPathType && registeredPaths[t].inUse) ==> registeredPaths[t].Metadata.New implements NewPathSpec
}

ghost
requires 0 <= t && t < maxPathType
requires acc(PathPackageMem(), _)
ensures  res == unfolding acc(PathPackageMem(), _) in registeredPaths[t].inUse
pure func Registered(t Type) (res bool) {
	return unfolding acc(PathPackageMem(), _) in registeredPaths[t].inUse
}

ghost
requires 0 <= t && t < maxPathType
requires acc(PathPackageMem(), _)
pure func GetType(t Type) (res Metadata) {
	return unfolding acc(PathPackageMem(), _) in registeredPaths[t].Metadata
}

ghost
requires acc(PathPackageMem(), _)
ensures  b == unfolding acc(PathPackageMem(), _) in strictDecoding
pure func IsStrictDecoding() (b bool) {
	return unfolding acc(PathPackageMem(), _) in strictDecoding
}

// without passing `writePerm` explicitely below, we run into
// exceptions when verifying method RegisterPath in package 'empty'
ensures acc(p.NonInitMem(), writePerm)
ensures p != nil
decreases
func NewPathSpec() (p Path)

/** End of global state of the package **/
