// Copyright 2022 Eth Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package path

import (
	"github.com/scionproto/scion/verification/utils/definitions"
	"github.com/scionproto/scion/verification/utils/slices"
)

/** rawPath spec **/
pred (r *rawPath) Mem() {
	acc(r) &&
		0 <= r.dataLen && r.dataLen <= len(r.underlyingBuf) &&
		r.raw === r.underlyingBuf[:r.dataLen] &&
		slices.AbsSlice_Bytes(r.raw, 0, len(r.raw)) &&
		slices.AbsSlice_Bytes(r.underlyingBuf, r.dataLen, len(r.underlyingBuf))
}

pred (r *rawPath) NonInitMem() {
	acc(r)
}

pred (r *rawPath) PostBufXchange(buf []byte) {
	acc(r.Mem(), definitions.ReadL1) && r.GetUnderlyingBuf() === buf
}

ghost
requires acc(r.Mem(), _)
ensures unfolding acc(r.Mem(), _) in (buf === r.underlyingBuf && buf[:r.dataLen] === r.raw)
decreases
pure func (r *rawPath) GetUnderlyingBuf() (buf []byte) {
	return unfolding acc(r.Mem(), _) in r.underlyingBuf
}

ghost
requires r.Mem()
requires r.GetUnderlyingBuf() === buf
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf)) --* (acc(r.Mem(), definitions.ReadL1) && r.PostBufXchange(buf))
decreases
func (r *rawPath) ExchangeBufMem(buf []byte) {
	unfold r.Mem()
	ghost slices.Unslice_Bytes(r.underlyingBuf, 0, r.dataLen, writePerm)
	ghost slices.CombineAtIndex_Bytes(r.underlyingBuf, 0, len(r.underlyingBuf), r.dataLen, writePerm)
	package  slices.AbsSlice_Bytes(buf, 0, len(buf)) --* (acc(r.Mem(), definitions.ReadL1) && r.PostBufXchange(buf)) {
		assert acc(&r.raw)
		assert acc(&r.underlyingBuf)
		assert acc(&r.dataLen)
		assert buf === r.underlyingBuf
		assert r.underlyingBuf[:r.dataLen] === r.raw
		ghost slices.SplitByIndex_Bytes(r.underlyingBuf, 0, len(r.underlyingBuf), r.dataLen, writePerm)
		ghost slices.Reslice_Bytes(r.underlyingBuf, 0, r.dataLen, writePerm)
		fold r.Mem()
		fold r.PostBufXchange(buf)
	}
}


ghost
requires r.PostBufXchange(buf)
ensures  acc(r.Mem(), definitions.ReadL1)
ensures  r.GetUnderlyingBuf() === buf
func (r *rawPath) UnfoldPostBufXchange(buf []byte) {
	unfold r.PostBufXchange(buf)
	assert acc(r.Mem(), definitions.ReadL1)
	assert r.GetUnderlyingBuf() === buf
}

ghost
requires p.Mem()
requires p.GetUnderlyingBuf() === buf
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
ensures  p.NonInitMem()
decreases
func (p *rawPath) DowngradePerm(ghost buf []byte) {
	unfold p.Mem()
	assert p.underlyingBuf === buf
	assert p.raw === buf[:p.dataLen]
	ghost slices.Unslice_Bytes(p.underlyingBuf, 0, p.dataLen, writePerm)
	ghost slices.CombineAtIndex_Bytes(p.underlyingBuf, 0, len(p.underlyingBuf), p.dataLen, writePerm)
	assert slices.AbsSlice_Bytes(buf, 0, len(buf))
	fold p.NonInitMem()
}

(*rawPath) implements Path

/** End of rawPath spec **/

/** Global state of the pacakge **/
ghost const MaxPathType = maxPathType

pred PathPackageMem() {
	acc(&registeredPaths) &&
	acc(&strictDecoding) &&
	forall t Type :: (0 <= t && t < maxPathType && registeredPaths[t].inUse) ==> registeredPaths[t].Metadata.New implements NewPathSpec
}

ghost
requires 0 <= t && t < maxPathType
requires acc(PathPackageMem(), _)
ensures  res == unfolding acc(PathPackageMem(), _) in registeredPaths[t].inUse
pure func Registered(t Type) (res bool) {
	return unfolding acc(PathPackageMem(), _) in registeredPaths[t].inUse
}

ghost
requires 0 <= t && t < maxPathType
requires acc(PathPackageMem(), _)
pure func GetType(t Type) (res Metadata) {
	return unfolding acc(PathPackageMem(), _) in registeredPaths[t].Metadata
}

ghost
requires acc(PathPackageMem(), _)
ensures  b == unfolding acc(PathPackageMem(), _) in strictDecoding
pure func IsStrictDecoding() (b bool) {
	return unfolding acc(PathPackageMem(), _) in strictDecoding
}

// without passing `writePerm` explicitely below, we run into
// exceptions when verifying method RegisterPath in package 'empty'
ensures acc(p.NonInitMem(), writePerm)
decreases
func NewPathSpec() (p Path)

/** End of global state of the pacakge **/
