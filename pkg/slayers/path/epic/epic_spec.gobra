// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package epic

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
	"github.com/scionproto/scion/verification/utils/definitions"
)

pred (p *Path) NonInitMem() {
	acc(p)
}

pred (p *Path) Mem() {
	acc(&p.underlyingBuf) &&
		slices.AbsSlice_Bytes(p.underlyingBuf, 0, MetadataLen) &&
		acc(&p.PktID) &&
		acc(&p.PHVF) && slices.AbsSlice_Bytes(p.PHVF, 0, len(p.PHVF)) &&
		acc(&p.LHVF) && slices.AbsSlice_Bytes(p.LHVF, 0, len(p.LHVF)) &&
		acc(&p.ScionPath) &&
		p.ScionPath != nil &&
		p.ScionPath.Mem() &&
		MetadataLen <= len(p.underlyingBuf) &&
		p.ScionPath.GetUnderlyingBuf() === p.underlyingBuf[MetadataLen:]
}

pred (o *Path) PostBufXchange(buf []byte) {
	acc(o.Mem(), definitions.ReadL1) && o.GetUnderlyingBuf() === buf
}

ghost
requires p.PostBufXchange(buf)
ensures  acc(p.Mem(), definitions.ReadL1)
ensures  p.GetUnderlyingBuf() === buf
func (p *Path) UnfoldPostBufXchange(buf []byte) {
	unfold p.PostBufXchange(buf)
	assert acc(p.Mem(), definitions.ReadL1)
	assert p.GetUnderlyingBuf() === buf
}

ghost
requires acc(p.Mem(), _)
decreases
pure func (p *Path) GetUnderlyingBuf() (buf []byte) {
	return unfolding acc(p.Mem(), _) in p.underlyingBuf
}

ghost
requires p.Mem()
requires p.GetUnderlyingBuf() === buf
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf)) --* (acc(p.Mem(), definitions.ReadL1) && p.PostBufXchange(buf))
decreases
func (p *Path) ExchangeBufMem(buf []byte) {
	unfold p.Mem()
	assert buf === p.underlyingBuf
	assert slices.AbsSlice_Bytes(buf, 0, MetadataLen)
	ghost scionPath := p.ScionPath
	scionPath.ExchangeBufMem(buf[MetadataLen:])
	ghost slices.Unslice_Bytes(buf, MetadataLen, len(buf), writePerm)
	ghost slices.CombineAtIndex_Bytes(buf, 0, len(buf), MetadataLen, writePerm)
	assert slices.AbsSlice_Bytes(buf, 0, len(buf))
	package slices.AbsSlice_Bytes(buf, 0, len(buf)) --* (acc(p.Mem(), definitions.ReadL1) && p.PostBufXchange(buf)) {
		assert acc(&p.underlyingBuf)
		assert acc(&p.ScionPath)
		ghost slices.SplitByIndex_Bytes(buf, 0, len(buf), MetadataLen, writePerm)
		ghost slices.Reslice_Bytes(buf, MetadataLen, len(buf), writePerm)
		apply slices.AbsSlice_Bytes(buf[MetadataLen:], 0, len(buf[MetadataLen:])) --* (acc(scionPath.Mem(), definitions.ReadL1) && scionPath.PostBufXchange(buf[MetadataLen:]))
		unfold scionPath.PostBufXchange(buf[MetadataLen:])
		assert MetadataLen <= len(p.underlyingBuf)
		assert p.underlyingBuf[MetadataLen:] === p.ScionPath.GetUnderlyingBuf()
		fold p.Mem()
		fold p.PostBufXchange(buf)
	}
}

ghost
requires p.Mem()
requires buf === p.GetUnderlyingBuf()
ensures  p.NonInitMem()
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
decreases
func (p *Path) DowngradePerm(buf []byte) {
	unfold p.Mem()
	p.ScionPath.DowngradePerm(buf[MetadataLen:])
	slices.Unslice_Bytes(buf, MetadataLen, len(buf), writePerm)
	slices.CombineAtIndex_Bytes(buf, 0, len(buf), MetadataLen, writePerm)
	fold  p.NonInitMem()
}

pure
requires acc(p.Mem(), _)
ensures l == (unfolding acc(p.Mem(), _) in len(p.PHVF))
decreases
func (p *Path) getPHVFLen() (l int) {
	return unfolding acc(p.Mem(), _) in len(p.PHVF)
}

pure
requires acc(p.Mem(), _)
ensures l == (unfolding acc(p.Mem(), _) in len(p.LHVF))
decreases
func (p *Path) getLHVFLen() (l int) {
	return unfolding acc(p.Mem(), _) in len(p.LHVF)
}

pure
requires acc(p.Mem(), _)
ensures  r == (unfolding acc(p.Mem(), _) in p.ScionPath != nil)
decreases
func (p *Path) hasScionPath() (r bool) {
	return unfolding acc(p.Mem(), _) in p.ScionPath != nil
}

(*Path) implements path.Path {
	(p *Path) SerializeTo(b, buf []byte, l int) (e error) {
		e = p.SerializeTo(b, buf, l)
	}

	(p *Path) DecodeFromBytes(b, buf []byte, l int) (e error) {
		e = p.DecodeFromBytes(b, buf, l)
	}

	(p *Path) Reverse() (r path.Path, e error) {
		r, e = p.Reverse()
	}

	(p *Path) DowngradePerm(buf []byte) {
		p.DowngradePerm(buf)
	}

	pure (p *Path) Len() int {
		return p.Len()
	}

	pure (p *Path) Type() path.Type {
		return p.Type()
	}
}
