// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package epic

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (p *Path) NonInitMem() {
	acc(p)
}

pred (p *Path) Mem(ubuf []byte) {
	acc(&p.PktID) &&
	acc(&p.PHVF) && slices.AbsSlice_Bytes(p.PHVF, 0, len(p.PHVF)) &&
	acc(&p.LHVF) && slices.AbsSlice_Bytes(p.LHVF, 0, len(p.LHVF)) &&
	acc(&p.ScionPath) &&
	p.ScionPath != nil &&
	MetadataLen <= len(ubuf) &&
	p.ScionPath.Mem(ubuf[MetadataLen:])
}

ghost
requires p.Mem(buf)
ensures  p.NonInitMem()
decreases
func (p *Path) DowngradePerm(buf []byte) {
	unfold p.Mem(buf)
	fold  p.NonInitMem()
}

ghost
pure
requires acc(p.Mem(buf), _)
ensures l == (unfolding acc(p.Mem(buf), _) in len(p.PHVF))
decreases
func (p *Path) getPHVFLen(buf []byte) (l int) {
	return unfolding acc(p.Mem(buf), _) in len(p.PHVF)
}

ghost
pure
requires acc(p.Mem(buf), _)
ensures l == (unfolding acc(p.Mem(buf), _) in len(p.LHVF))
decreases
func (p *Path) getLHVFLen(buf []byte) (l int) {
	return unfolding acc(p.Mem(buf), _) in len(p.LHVF)
}

ghost
pure
requires acc(p.Mem(buf), _)
ensures  r == (unfolding acc(p.Mem(buf), _) in p.ScionPath != nil)
decreases
func (p *Path) hasScionPath(buf []byte) (r bool) {
	return unfolding acc(p.Mem(buf), _) in p.ScionPath != nil
}

(*Path) implements path.Path