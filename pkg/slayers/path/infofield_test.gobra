// +gobra
package path

import (
    "github.com/scionproto/scion/verification/utils/definitions"
    "github.com/scionproto/scion/verification/utils/slices"
)

// done
// no error case
// DOES NOT VERIFY
func TestInfoSerializeDecode1(inf1 *InfoField, b []byte, inf2 *InfoField, raw []byte) {
    tmpInf1 := &InfoField{Peer:true, ConsDir:true, SegID:0x222, Timestamp:0x100}
    tmpB := []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

    assume inf1 == tmpInf1
    assume b === tmpB

    inhale  len(b) >= InfoLen
    inhale acc(inf1, definitions.R10)
    inhale slices.Bytes(b, 0, len(b))

    err1 := inf1.SerializeTo(b)

    assert err1 == nil

    tmpInf2 := &InfoField{Peer:false, ConsDir:false, SegID:0x0, Timestamp:0x0}
    tmpRaw := []byte{0x3, 0x0, 0x2, 0x22, 0x0, 0x0, 0x1, 0x0}

    assume inf2 == tmpInf2
    assume raw === tmpRaw

    inhale len(raw) >= InfoLen
    inhale acc(inf2)
    inhale acc(slices.Bytes(raw, 0, len(raw)), definitions.R45)

    err2 := inf2.DecodeFromBytes(raw)

    assert err2 == nil
    assert *inf1 == *inf2
}
