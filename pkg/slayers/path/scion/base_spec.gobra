// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package scion

pred (b *Base) NonInitMem() {
	acc(b)
}

// This predicate is established right after DecodeFromBytes.
// Because this method does not perform any bounds checks, it
// is not possible to have assertions in this invariant about
// how the fileds of Base compare to those of its MetaHdr field.
pred (b *Base) Mem() {
	acc(&b.NumINF) &&
	acc(&b.NumHops) &&
	acc(&b.PathMeta.CurrINF) &&
	acc(&b.PathMeta.CurrHF) &&
	acc(&b.PathMeta.SegLen[0]) &&
	acc(&b.PathMeta.SegLen[1]) &&
	acc(&b.PathMeta.SegLen[2]) &&
	// 3 is the value of MaxINFs and 64 is the number of MaxHops.
	0 <= b.NumINF && b.NumINF <= MaxINFs &&
	// the Code defines 64 as the maximum number of hops,
	// but this does not seem to be enforced anywhere.
	0 <= b.NumHops && // && b.NumHops <= MaxHops &&
	(0 < b.NumINF ==> 0 < b.NumHops)
}

ghost
requires acc(b.Mem(), _)
ensures  0 <= res && res <= 3
decreases
pure func (b *Base) getNumINF() (res int) {
	return unfolding acc(b.Mem(), _) in b.NumINF
}

ghost
requires acc(b.Mem(), _)
ensures  0 <= res
decreases
pure func (b *Base) getNumHops() (res int) {
	return unfolding acc(b.Mem(), _) in b.NumHops
}
