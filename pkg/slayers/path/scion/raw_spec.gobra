// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package scion

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	// d "github.com/scionproto/scion/verification/utils/definitions"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (s *Raw) NonInitMem() {
	acc(&s.Raw) &&
	s.Base.NonInitMem()
}

pred (s *Raw) Mem(buf []byte) {
	s.Base.Mem() &&
	acc(&s.Raw) &&
	len(s.Raw) <= len(buf) &&
	s.Raw === buf[:len(s.Raw)] &&
	slices.AbsSlice_Bytes(buf, 0, len(buf)) &&
	len(s.Raw) == s.Base.Len()
}

ghost
requires r.Mem(buf)
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf)) --* r.Mem(buf)
decreases
func (r *Raw) ExchangeBufMem(buf []byte) {
	unfold r.Mem(buf)
	package slices.AbsSlice_Bytes(buf, 0, len(buf)) --* r.Mem(buf) {
		fold r.Mem(buf)
	}
}

ghost
requires r.Mem(ubuf)
ensures  acc(&r.Raw, 1/2) && slices.AbsSlice_Bytes(r.Raw, 0, len(r.Raw)) && acc(r.Base.Mem(), 1/2)
ensures  (acc(&r.Raw, 1/2) && slices.AbsSlice_Bytes(r.Raw, 0, len(r.Raw)) && acc(r.Base.Mem(), 1/2)) --* r.Mem(ubuf)
decreases
func (r *Raw) RawPerm(ubuf []byte) {
	unfold r.Mem(ubuf)
	slices.SplitByIndex_Bytes(ubuf, 0, len(ubuf), len(r.Raw), writePerm)
	slices.Reslice_Bytes(ubuf, 0, len(r.Raw), writePerm)
	assert slices.AbsSlice_Bytes(r.Raw, 0, len(r.Raw))
	package (acc(&r.Raw, 1/2) && slices.AbsSlice_Bytes(r.Raw, 0, len(r.Raw)) && acc(r.Base.Mem(), 1/2)) --* r.Mem(ubuf) {
		{
			// assert body of predicate
			assert r.Base.Mem()
			assert acc(&r.Raw)
			assert len(r.Raw) <= len(ubuf)
			assert r.Raw === ubuf[:len(r.Raw)]
			assert len(r.Raw) == r.Base.Len()
		}
		slices.Unslice_Bytes(ubuf, 0, len(r.Raw), writePerm)	
		slices.CombineAtIndex_Bytes(ubuf, 0, len(ubuf), len(r.Raw), writePerm)
		assert slices.AbsSlice_Bytes(ubuf, 0, len(ubuf))
		fold r.Mem(ubuf)
	}
}

// TODO: define in terms of rawperm
/*
ghost
requires r.Mem(ubuf)
requires 0 <= idx && idx <= unfolding r.Mem(ubuf) in len(r.Raw)
ensures  acc(&r.Raw, 1/2)
ensures  r.Raw === old(unfolding r.Mem(ubuf) in r.Raw)
ensures  slices.AbsSlice_Bytes(r.Raw[:idx], 0, idx)
ensures  (acc(&r.Raw, 1/2) && idx <= len(r.Raw) && slices.AbsSlice_Bytes(r.Raw[:idx], 0, idx)) --* r.Mem(ubuf) // TODO: maybe remove middle conjunct
decreases
func (r *Raw) RawIdxPerm(ubuf []byte, idx int) {
	unfold r.Mem(ubuf)
	assert r.Raw === ubuf[:len(r.Raw)]
	assert r.Raw[:MetaLen] === ubuf[:MetaLen]
	slices.SplitByIndex_Bytes(ubuf, 0, len(ubuf), idx, writePerm)
	slices.Reslice_Bytes(ubuf, 0, idx, writePerm)
	assert slices.AbsSlice_Bytes(r.Raw[:idx], 0, idx)
	package (acc(&r.Raw, 1/2) && idx <= len(r.Raw) && slices.AbsSlice_Bytes(r.Raw[:idx], 0, idx)) --* r.Mem(ubuf) {
		slices.Unslice_Bytes(ubuf, 0, idx, writePerm)	
		slices.CombineAtIndex_Bytes(ubuf, 0, len(ubuf), idx, writePerm)
		fold r.Mem(ubuf)
	}
	assert slices.AbsSlice_Bytes(r.Raw[:idx], 0, idx)
}
*/

// TODO: Mem(ubuf1) -> Mem(ubuf2) if ubuf1 is a subslice of ubuf2

/**
  * This method is not part of the original SCION codebase.
  * Instead, `Len` was defined in `*Raw` via embedded structs.
  * Unfortunately, Gobra does not fully support them yet, so we
  * introduced this wrapper method which acts as a wrapper.
  */
pure
requires acc(s.Mem(buf), _)
ensures  unfolding acc(s.Mem(buf), _) in l == s.Base.Len()
ensures  l >= 0
decreases
func (s *Raw) Len(ghost buf []byte) (l int) {
	return unfolding acc(s.Mem(buf), _) in s.Base.Len()
}

/*(*Raw) implements path.Path {
	(p *Raw) SerializeTo(b, buf []byte, l int) (e error) {
		e = p.SerializeTo(b, buf, l)
	}

	(p *Raw) DecodeFromBytes(b, buf []byte, l int) (e error) {
		e = p.DecodeFromBytes(b, buf, l)
	}

	(p *Raw) Reverse() (r path.Path, e error) {
		r, e = p.Reverse()
	}

	(p *Raw) DowngradePerm(buf []byte) {
		p.DowngradePerm(buf)
	}

	// pure (p *Raw) GetUnderlyingBuf() []byte {
	// 	return p.GetUnderlyingBuf()
	// }

	(p *Raw) ExchangeBufMem(buf []byte) {
		p.ExchangeBufMem(buf)
	}

	(p *Raw) UnfoldPostBufXchange(buf []byte) {
		p.UnfoldPostBufXchange(buf)
	}

	pure (p *Raw) Len() int {
		return p.Len()
	}

	pure (p *Raw) Type() path.Type {
		return p.Type()
	}
}
*/

/**
  * This method is not part of the original SCION codebase.
  * Instead, `Len` was defined in `*Raw` via embedded structs.
  * Unfortunately, Gobra does not fully support them yet, so we
  * introduced this wrapper method which acts as a wrapper.
  */
pure
requires acc(s.Mem(buf), _)
ensures  unfolding acc(s.Mem(buf), _) in t == s.Base.Type()
decreases
func (s *Raw) Type(ghost buf []byte) (t path.Type) {
	return unfolding acc(s.Mem(buf), _) in s.Base.Type()
}

ghost
requires s.Mem(buf)
ensures  s.NonInitMem()
ensures  slices.AbsSlice_Bytes(buf, 0, len(buf))
decreases
func (s *Raw) DowngradePerm(buf []byte) {
	unfold s.Mem(buf)
	assert slices.AbsSlice_Bytes(buf, 0, len(buf))
	unfold s.Base.Mem()
	fold s.Base.NonInitMem()
	fold s.NonInitMem()
}
