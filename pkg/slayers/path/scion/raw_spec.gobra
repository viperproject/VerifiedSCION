// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package scion

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	. "github.com/scionproto/scion/verification/utils/definitions"
	sl "github.com/scionproto/scion/verification/utils/slices"
)

/**** Predicates ****/
pred (s *Raw) NonInitMem() {
	acc(&s.Raw) &&
	s.Base.NonInitMem()
}

pred (s *Raw) Mem() {
	s.Base.Mem() &&
	acc(&s.Raw)
}

ghost
requires acc(s.Mem(), _)
decreases
pure func (s *Raw) Valid(ghost ub []byte) bool {
	return unfolding acc(s.Mem(), _) in
		len(s.Raw) <= len(ub) &&
		s.Raw === ub[:len(s.Raw)] &&
		len(s.Raw) == s.Base.Len()
}

/**** End of Predicates ****/

(*Raw) implements path.Path

/**** Stubs ****/
/**
  * This method is not part of the original SCION codebase.
  * Instead, `Len` was defined in `*Raw` via embedded structs.
  * Unfortunately, Gobra does not fully support them yet, so we
  * introduced this wrapper method which acts as a wrapper.
  */
pure
requires acc(s.Mem(), _)
decreases
func (s *Raw) Type(ghost buf []byte) (t path.Type) {
	return unfolding acc(s.Mem(), _) in s.Base.Type()
}

/**
  * This method is not part of the original SCION codebase.
  * Instead, `Len` was defined in `*Raw` via embedded structs.
  * Unfortunately, Gobra does not fully support them yet, so we
  * introduced this wrapper method which acts as a wrapper.
  */
pure
requires acc(s.Mem(), _)
ensures  l >= 0
decreases
func (s *Raw) Len(ghost buf []byte) (l int) {
	return unfolding acc(s.Mem(), _) in s.Base.Len()
}

/**
  * This method is not part of the original SCION codebase.
  * Instead, `IsFirstHopAfterXover` was defined in `*Base` via embedded structs.
  * Unfortunately, Gobra does not fully support them yet, so we
  * introduced this wrapper method which acts as a wrapper.
  */
preserves acc(s.Mem(), R18) && s.Valid(ub)
ensures   res ==> 0 < s.GetCurrINF() && 0 < s.GetCurrHF()
decreases
func (s *Raw) IsFirstHopAfterXover(ghost ub []byte) (res bool) {
	unfold acc(s.Mem(), R18)
	defer fold acc(s.Mem(), R18)
	return s.Base.IsFirstHopAfterXover()
}

/**
  * This method is not part of the original SCION codebase.
  * Instead, `IsXover` was defined in `*Base` via embedded structs.
  * Unfortunately, Gobra does not fully support them yet, so we
  * introduced this wrapper method which acts as a wrapper.
  */
preserves acc(s.Mem(), R9) && s.Valid(ub)
decreases
func (s *Raw) IsXover(ghost ub []byte) bool {
	unfold acc(s.Mem(), R9)
	defer fold acc(s.Mem(), R9)
	return s.Base.IsXover()
}

ghost
requires acc(s.Mem(ub), _)
decreases
pure func (s *Raw) ValidCurrINF(ghost ub []byte) bool {
	return unfolding acc(s.Mem(ub), _) in
		s.Base.ValidCurrINF()
}

ghost
requires acc(s.Mem(ub), _)
decreases
pure func (s *Raw) ValidCurrHF(ghost ub []byte) bool {
	return unfolding acc(s.Mem(ub), _) in
		s.Base.ValidCurrHF()
}

ghost
requires acc(s.Mem(ub), _)
decreases
pure func (s *Raw) ValidCurrIdxs(ghost ub []byte) bool {
	return unfolding acc(s.Mem(ub), _) in
		s.Base.ValidCurrIdxs()
}

/**** End of Stubs ****/

/**** Lemmas ****/

ghost
requires s.Mem() && s.Valid(buf)
ensures  s.NonInitMem()
ensures  old(s.RawBufferMem()) === s.RawBufferNonInitMem()
decreases
func (s *Raw) DowngradePerm(buf []byte) {
	unfold s.Mem()
	unfold s.Base.Mem()
	fold s.Base.NonInitMem()
	fold s.NonInitMem()
}

/******** Lemma: RawPerm ********/
pred (r *Raw) RawPermRemainder(ubuf []byte, p perm) {
	0 < p &&
	acc(r.Base.Mem(), p/2) &&
	acc(&r.Raw, p/2) &&
	len(r.Raw) <= len(ubuf) &&
	r.Raw === ubuf[:len(r.Raw)] &&
	acc(sl.AbsSlice_Bytes(ubuf, len(r.Raw), len(ubuf)), p) &&
	len(r.Raw) == r.Base.Len()
}

ghost
requires 0 < p
requires acc(&r.Raw, p/2) && acc(sl.AbsSlice_Bytes(r.Raw, 0, len(r.Raw)), p) && acc(r.Base.Mem(), p/2)
requires r.RawPermRemainder(ubuf, p)
ensures  acc(r.Mem(), p) && r.Valid(ubuf)
ensures  acc(sl.AbsSlice_Bytes(ubuf, 0, len(ubuf)), p)
decreases
func (r *Raw) UndoRawPerm(ubuf []byte, p perm) {
	unfold r.RawPermRemainder(ubuf, p)
	sl.Unslice_Bytes(ubuf, 0, len(r.Raw), p)
	sl.CombineAtIndex_Bytes(ubuf, 0, len(ubuf), len(r.Raw), p)
	fold acc(r.Mem(), p)
}

ghost
requires 0 < p
requires acc(r.Mem(), p) && r.Valid(ubuf)
requires acc(sl.AbsSlice_Bytes(ubuf, 0, len(ubuf)), p)
ensures  acc(&r.Raw, p/2)
ensures  acc(sl.AbsSlice_Bytes(r.Raw, 0, len(r.Raw)), p)
ensures  acc(r.Base.Mem(), p/2)
ensures  r.RawPermRemainder(ubuf, p)
ensures  r.Raw === old(unfolding acc(r.Mem(), p) in r.Raw)
decreases
func (r *Raw) RawPerm(ubuf []byte, p perm) {
	unfold acc(r.Mem(), p)
	sl.SplitByIndex_Bytes(ubuf, 0, len(ubuf), len(r.Raw), p)
	sl.Reslice_Bytes(ubuf, 0, len(r.Raw), p)
	fold r.RawPermRemainder(ubuf, p)
}
/******** End of Lemma: RawPerm ********/

/******** Lemma: RawIdxPerm ********/
pred (r *Raw) RawIdxPermRemainder(ubuf []byte, idx int, p perm) {
	0 < p &&
	acc(r.Base.Mem(), p/2) &&
	acc(&r.Raw, p/2) &&
	len(r.Raw) <= len(ubuf) &&
	r.Raw === ubuf[:len(r.Raw)] &&
	acc(sl.AbsSlice_Bytes(ubuf, idx, len(ubuf)), p) &&
	len(r.Raw) == r.Base.Len() &&
	idx <= len(r.Raw)
}

ghost
requires 0 < p
requires acc(&r.Raw, p/2)
requires 0 <= idx && idx <= len(r.Raw)
requires acc(sl.AbsSlice_Bytes(r.Raw[:idx], 0, idx), p) && acc(r.Base.Mem(), p/2)
requires r.RawIdxPermRemainder(ubuf, idx, p)
ensures  acc(r.Mem(), p) && r.Valid(ubuf)
ensures  acc(sl.AbsSlice_Bytes(ubuf, 0, len(ubuf)), p)
decreases
func (r *Raw) UndoRawIdxPerm(ubuf []byte, idx int, p perm) {
	unfold r.RawIdxPermRemainder(ubuf, idx, p)
	sl.Unslice_Bytes(ubuf, 0, idx, p)
	sl.CombineAtIndex_Bytes(ubuf, 0, len(ubuf), idx, p)
	fold acc(r.Mem(), p)
}

ghost
requires 0 < p
requires acc(r.Mem(), p) && r.Valid(ubuf)
requires acc(sl.AbsSlice_Bytes(ubuf, 0, len(ubuf)), p)
requires 0 <= idx && idx <= unfolding acc(r.Mem(), p) in len(r.Raw)
ensures  acc(&r.Raw, p/2)
ensures  r.Raw === old(unfolding acc(r.Mem(), p) in r.Raw)
ensures  acc(sl.AbsSlice_Bytes(r.Raw[:idx], 0, idx), p) && acc(r.Base.Mem(), p/2)
ensures  r.RawIdxPermRemainder(ubuf, idx, p)
decreases
func (r *Raw) RawIdxPerm(ubuf []byte, idx int, p perm) {
	unfold acc(r.Mem(), p)
	sl.SplitByIndex_Bytes(ubuf, 0, len(ubuf), idx, p)
	sl.Reslice_Bytes(ubuf, 0, idx, p)
	fold r.RawIdxPermRemainder(ubuf, idx, p)
}
/******** End of Lemma: RawIdxPerm ********/

/******** Lemma: RawRangePerm ********/
pred (r *Raw) RawRangePermRemainder(ubuf []byte, start, end int, p perm) {
	0 < p &&
	acc(r.Base.Mem(), p) &&
	acc(&r.Raw, p/2) &&
	0 <= start && start <= end && end <= len(r.Raw) &&
	len(r.Raw) <= len(ubuf) &&
	r.Raw === ubuf[:len(r.Raw)] &&
	acc(sl.AbsSlice_Bytes(r.Raw, 0, start), p) &&
	acc(sl.AbsSlice_Bytes(r.Raw, end, len(r.Raw)), p) &&
	acc(sl.AbsSlice_Bytes(ubuf, len(r.Raw), len(ubuf)), p) &&
	len(r.Raw) == r.Base.Len()
}

ghost
requires 0 < p
requires acc(&r.Raw, p/2)
requires 0 <= start && start <= end && end <= len(r.Raw)
requires acc(sl.AbsSlice_Bytes(r.Raw[start:end], 0, end-start), p)
requires r.RawRangePermRemainder(ubuf, start, end, p)
ensures  acc(r.Mem(), p) && r.Valid(ubuf)
ensures  acc(sl.AbsSlice_Bytes(ubuf, 0, len(ubuf)), p)
decreases
func (r *Raw) UndoRawRangePerm(ubuf []byte, start, end int, p perm) {
	unfold r.RawRangePermRemainder(ubuf, start, end, p)
	sl.Unslice_Bytes(r.Raw, start, end, p)
	sl.CombineAtIndex_Bytes(r.Raw, 0, end, start, p)
	sl.CombineAtIndex_Bytes(r.Raw, 0, len(r.Raw), end, p)
	fold r.RawPermRemainder(ubuf, p)
	r.UndoRawPerm(ubuf, p)
}

// Notice that no permission to r.Base.Mem() is provided, unlike the previous methods
ghost
requires 0 < p
requires acc(r.Mem(), p) && r.Valid(ubuf)
requires acc(sl.AbsSlice_Bytes(ubuf, 0, len(ubuf)), p)
requires 0 <= start && start <= end && end <= unfolding acc(r.Mem(), p) in len(r.Raw)
ensures  acc(&r.Raw, p/2)
ensures  r.Raw === old(unfolding acc(r.Mem(), p) in r.Raw)
ensures  acc(sl.AbsSlice_Bytes(r.Raw[start:end], 0, end-start), p)
ensures  r.RawRangePermRemainder(ubuf, start, end, p)
decreases
func (r *Raw) RawRangePerm(ubuf []byte, start, end int, p perm) {
	unfold acc(r.Mem(), p)
	sl.SplitByIndex_Bytes(ubuf, 0, len(ubuf), len(r.Raw), p)
	sl.Reslice_Bytes(ubuf, 0, len(r.Raw), p)
	sl.SplitByIndex_Bytes(r.Raw, 0, len(r.Raw), start, p)
	sl.SplitByIndex_Bytes(r.Raw, start, len(r.Raw), end, p)
	sl.Reslice_Bytes(r.Raw, start, end, p)
	fold r.RawRangePermRemainder(ubuf, start, end, p)
}
/******** End of Lemma: RawRangePerm ********/

ghost
requires r.Mem() && r.Valid(ubuf1)
requires len(ubuf1) <= len(ubuf2)
requires ubuf1 === ubuf2[:len(ubuf1)]
ensures  r.Mem() && r.Valid(ubuf2)
decreases
func (r *Raw) Widen(ubuf1, ubuf2 []byte) {
	unfold r.Mem()
	fold r.Mem()
}

/**** End of Lemmas ****/

/**** Start of helpful pure functions ****/
ghost
requires acc(r.Mem(), _)
decreases
pure func (r *Raw) GetNumINF() int {
	return unfolding acc(r.Mem(), _) in (unfolding acc(r.Base.Mem(), _) in r.NumINF)
}

ghost
requires acc(r.Mem(), _)
decreases
pure func (r *Raw) GetNumHops() int {
	return unfolding acc(r.Mem(), _) in (unfolding acc(r.Base.Mem(), _) in r.NumHops)
}

ghost
requires acc(r.Mem(), _)
decreases
pure func (r *Raw) GetCurrINF() uint8 {
	return unfolding acc(r.Mem(), _) in
		(unfolding acc(r.Base.Mem(), _) in r.PathMeta.CurrINF)
}

ghost
requires acc(r.Mem(), _)
decreases
pure func (r *Raw) GetCurrHF() uint8 {
	return unfolding acc(r.Mem(), _) in
		(unfolding acc(r.Base.Mem(), _) in r.PathMeta.CurrHF)
}

ghost
pure
requires acc(s.Mem(), _)
decreases
func (s *Raw) RawBufferMem() []byte {
	return unfolding acc(s.Mem(), _) in s.Raw
}

ghost
pure
requires acc(s.NonInitMem(), _)
decreases
func (s *Raw) RawBufferNonInitMem() []byte {
	return unfolding acc(s.NonInitMem(), _) in s.Raw
}
/**** End of helpful pure functions ****/