// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package scion

import (
	sl "verification/utils/slices"
	"verification/io"
	. "verification/utils/definitions"
	"verification/dependencies/encoding/binary"
	"github.com/scionproto/scion/pkg/slayers/path"
)

ghost
requires  0 <= start && start <= headerOffset
requires  path.InfoFieldOffset(currInfIdx, headerOffset) + path.InfoLen <= offset
requires  0 < segLen
requires  offset + path.HopLen * segLen <= length
requires  length <= len(raw)
requires  0 <= currHfIdx && currHfIdx <= segLen
requires  0 <= currInfIdx && currInfIdx < 3
preserves acc(sl.Bytes(raw, 0, len(raw)), R51)
preserves acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R51)
ensures   CurrSeg(raw, offset, currInfIdx, currHfIdx, segLen, headerOffset) ==
	CurrSeg(raw[start:length], offset-start, currInfIdx, currHfIdx, segLen, headerOffset-start)
decreases
func WidenCurrSeg(raw []byte,
	offset int,
	currInfIdx int,
	currHfIdx int,
	segLen int,
	headerOffset int,
	start int,
	length int) {
	unfold acc(sl.Bytes(raw, 0, len(raw)), R53)
	unfold acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R53)

	ainfo1 := path.Timestamp(raw, currInfIdx, headerOffset)
	ainfo2 := path.Timestamp(raw[start:length], currInfIdx, headerOffset-start)
	assert ainfo1 == ainfo2

	uinfo1 := path.AbsUinfo(raw, currInfIdx, headerOffset)
	uinfo2 := path.AbsUinfo(raw[start:length], currInfIdx, headerOffset-start)
	assert uinfo1 == uinfo2

	consDir1 := path.ConsDir(raw, currInfIdx, headerOffset)
	consDir2 := path.ConsDir(raw[start:length], currInfIdx, headerOffset-start)
	assert consDir1 == consDir2

	peer1 := path.Peer(raw, currInfIdx, headerOffset)
	peer2 := path.Peer(raw[start:length], currInfIdx, headerOffset-start)
	assert peer1 == peer2

	widenSegment(raw, offset, currHfIdx, ainfo1, uinfo1, consDir1, peer1, segLen, start, length)
	reveal CurrSeg(raw, offset, currInfIdx, currHfIdx, segLen, headerOffset)
	reveal CurrSeg(raw[start:length], offset-start, currInfIdx, currHfIdx, segLen, headerOffset-start)
	fold acc(sl.Bytes(raw, 0, len(raw)), R53)
	fold acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R53)
}

ghost
requires 0 <= start && start <= offset
requires 0 < segLen
requires 0 <= currHfIdx && currHfIdx <= segLen
requires length <= len(raw)
requires offset + path.HopLen * segLen <= length
preserves acc(sl.Bytes(raw, 0, len(raw)), R52)
preserves acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R52)
ensures  segment(raw, offset, currHfIdx, ainfo, uinfo, consDir, peer, segLen) ==
	segment(raw[start:length], offset-start, currHfIdx, ainfo, uinfo, consDir, peer, segLen)
decreases
func widenSegment(raw []byte,
	offset int,
	currHfIdx int,
	ainfo io.IO_ainfo,
	uinfo set[io.IO_msgterm],
	consDir bool,
	peer bool,
	segLen int,
	start int,
	length int) {
	newP := (R52 + R53)/2
	widenHopFields(raw, offset, 0, segLen, start, length, newP)
}

ghost
requires  0 <= start && start <= middle
requires  middle + path.HopLen <= length
requires  length <= len(raw)
preserves acc(sl.Bytes(raw, 0, len(raw)), R54)
preserves acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R54)
ensures   path.BytesToIO_HF(raw, 0, middle, len(raw)) ==
	path.BytesToIO_HF(raw[start:length], 0, middle-start, length-start)
decreases
func widenBytesToIO_HF(raw []byte, middle int, start int, length int) {
	unfold acc(sl.Bytes(raw, 0, len(raw)), R55)
	unfold acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R55)
	hfBytes1 := path.BytesToIO_HF(raw, 0, middle, len(raw))
	hfBytes2 := path.BytesToIO_HF(raw[start:length], 0, middle-start, length-start)
	assert hfBytes1 == hfBytes2
	fold acc(sl.Bytes(raw, 0, len(raw)), R55)
	fold acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R55)
}

ghost
requires  R53 < p
requires  0 <= start && start <= offset
requires  0 <= currHfIdx && currHfIdx <= segLen
requires  offset + path.HopLen * segLen <= length
requires  length <= len(raw)
preserves acc(sl.Bytes(raw, 0, len(raw)), p)
preserves acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), p)
ensures   hopFields(raw, offset, currHfIdx, segLen) ==
	hopFields(raw[start:length], offset-start, currHfIdx, segLen)
decreases segLen - currHfIdx
func widenHopFields(raw []byte, offset int, currHfIdx int, segLen int, start int, length int, p perm) {
	if (currHfIdx != segLen) {
		widenBytesToIO_HF(raw, offset + path.HopLen * currHfIdx, start, length)
		hf1 := path.BytesToIO_HF(raw, 0, offset + path.HopLen * currHfIdx, len(raw))
		hf2 := path.BytesToIO_HF(raw[start:length], 0, offset + path.HopLen * currHfIdx - start, length - start)
		newP := (p + R53)/2
		widenHopFields(raw, offset, currHfIdx + 1, segLen, start, length, newP)
	}
}

ghost
requires  0 <= start && start <= headerOffset
requires  segs.Valid()
requires  0 <= length && length <= len(raw)
requires  PktLen(segs, headerOffset) <= length
requires  1 <= currInfIdx && currInfIdx < 4
preserves acc(sl.Bytes(raw, 0, len(raw)), R51)
preserves acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R51)
ensures   LeftSeg(raw, currInfIdx, segs, headerOffset) ==
	LeftSeg(raw[start:length], currInfIdx, segs, headerOffset-start)
decreases
func WidenLeftSeg(raw []byte,
	currInfIdx int,
	segs io.SegLens,
	headerOffset int,
	start int,
	length int) {
	offset := HopFieldOffset(segs.NumInfoFields(), 0, headerOffset)
	if currInfIdx == 1 && segs.Seg2Len > 0 {
		offsetWithHopfields := offset + path.HopLen * segs.Seg1Len
		WidenCurrSeg(raw, offsetWithHopfields, currInfIdx, 0, segs.Seg2Len, headerOffset, start, length)
	} else if currInfIdx == 2 && segs.Seg2Len > 0 && segs.Seg3Len > 0 {
		offsetWithHopfields := offset + path.HopLen * (segs.Seg1Len + segs.Seg2Len)
		WidenCurrSeg(raw, offsetWithHopfields, currInfIdx, 0, segs.Seg3Len, headerOffset, start, length)
	}
	reveal LeftSeg(raw, currInfIdx, segs, headerOffset)
	reveal LeftSeg(raw[start:length], currInfIdx, segs, headerOffset- start)
}

ghost
requires  0 <= start && start <= headerOffset
requires  segs.Valid()
requires  0 <= length && length <= len(raw)
requires  PktLen(segs, headerOffset) <= length
requires  -1 <= currInfIdx && currInfIdx < 2
preserves acc(sl.Bytes(raw, 0, len(raw)), R51)
preserves acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R51)
ensures   RightSeg(raw, currInfIdx, segs, headerOffset) ==
	RightSeg(raw[start:length], currInfIdx, segs, headerOffset-start)
decreases
func WidenRightSeg(raw []byte,
	currInfIdx int,
	segs io.SegLens,
	headerOffset int,
	start int,
	length int) {
	offset := HopFieldOffset(segs.NumInfoFields(), 0, headerOffset)
	if currInfIdx == 1 && segs.Seg2Len > 0 && segs.Seg3Len > 0 {
		offsetWithHopfields := offset + path.HopLen * segs.Seg1Len
		WidenCurrSeg(raw, offsetWithHopfields, currInfIdx, segs.Seg2Len, segs.Seg2Len, headerOffset, start, length)
	} else if currInfIdx == 0 && segs.Seg2Len > 0 {
		WidenCurrSeg(raw, offset, currInfIdx, segs.Seg1Len, segs.Seg1Len, headerOffset, start, length)
	}
	reveal RightSeg(raw, currInfIdx, segs, headerOffset)
	reveal RightSeg(raw[start:length], currInfIdx, segs, headerOffset - start)
}

ghost
requires  0 <= start && start <= headerOffset
requires  segs.Valid()
requires  2 <= currInfIdx && currInfIdx < 5
requires  0 <= length && length <= len(raw)
requires  PktLen(segs, headerOffset) <= length
preserves acc(sl.Bytes(raw, 0, len(raw)), R51)
preserves acc(sl.Bytes(raw[start:length], 0, len(raw[start:length])), R51)
ensures   MidSeg(raw, currInfIdx, segs, headerOffset) ==
	MidSeg(raw[start:length], currInfIdx, segs, headerOffset - start)
decreases
func WidenMidSeg(raw []byte,
	currInfIdx int,
	segs io.SegLens,
	headerOffset int,
	start int,
	length int) {
	offset := HopFieldOffset(segs.NumInfoFields(), 0, headerOffset)
	if currInfIdx == 4 && segs.Seg2Len > 0 {
		WidenCurrSeg(raw, offset, 0, segs.Seg1Len, segs.Seg1Len, headerOffset, start, length)
	} else if currInfIdx == 2 && segs.Seg2Len > 0 && segs.Seg3Len > 0 {
		offsetWithHopfields := offset + path.HopLen * (segs.Seg1Len + segs.Seg2Len)
		WidenCurrSeg(raw, offsetWithHopfields, currInfIdx, 0, segs.Seg3Len, headerOffset, start, length)
	}
	reveal MidSeg(raw, currInfIdx, segs, headerOffset)
	reveal MidSeg(raw[start:length], currInfIdx, segs, headerOffset - start)
}