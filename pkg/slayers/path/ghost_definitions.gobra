// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package path

// interface IDs
type IF uint16

// MsgTerms consist of terms from our term algebra.
// TODO: is encoding it as a domain the best choice here?
type MsgTerm domain{}

/** Hop-Fields **/

// Abstract representation of an HopField
// We consider 0 to be the ID of the internal network in HopField.
// We consider None to be the ID of the internal network in HF.
type HF domain {
    func InIF2(h HF) option[IF]
    func EgIF2(h HF) option[IF]
    func HVF(h HF) MsgTerm
}

// We ASSUME the existence of a function that computes the MsgTerm of a HopField
ghost
decreases
pure func ComputeMsgTerm(h HopField) MsgTerm

ghost
ensures h.ConsIngress == 0 ==> InIF2(res) == none[IF]
ensures h.ConsIngress != 0 ==> InIF2(res) == some(IF(h.ConsIngress))
ensures h.ConsEgress  == 0 ==> EgIF2(res) == none[IF]
ensures h.ConsEgress  != 0 ==> EgIF2(res) == some(IF(h.ConsIngress))
ensures HVF(res) == ComputeMsgTerm(h)
decreases
pure func ToHF(h HopField) (res HF)

/** End of Hop-Fields **/

/** Segments **/
type Seg2 domain {
    func AInfo(s Seg2) AInfoT
    func UInfo(s Seg2) UInfoT
    func ConsDir(s Seg2) bool
    func Peer(s Seg2) bool
    func Past(s Seg2) seq[HFSchemeAhiT]
    func Future(s Seg2) seq[HFSchemeAhiT]
    func History(s Seg2) seq[AhiSchemeAhiT]
}

// TODO: is encoding these as domains the best choice here?
type AInfoT domain{}
type UInfoT domain{}
type HFSchemeAhiT domain{} // check if interpretation of this type is correct
type AhiSchemeAhiT domain{} // check if interpretation of this type is correct

/** End of Segments **/

/** Packets **/
type Pkt2 domain {
    func CurrSeg(p Pkt2) Seg2
    func LeftSeg(p Pkt2) option[Seg2]
    func MidSeg(p Pkt2) option[Seg2]
    func RightSeg(p Pkt2) option[Seg2]
}
/** End of Packets **/