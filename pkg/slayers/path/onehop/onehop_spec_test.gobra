// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package onehop

import "github.com/scionproto/scion/verification/utils/slices"

/*
func testAllocateNonInitMem() {
	p := &Path{}
	fold p.NonInitMem()
}

func canAllocatePath() {
	p := &Path{}
	fold p.FirstHop.Mem()
	fold p.SecondHop.Mem()
	fold slices.AbsSlice_Bytes(p.underlyingBuf, 0, len(p.underlyingBuf))
	fold p.Mem()
}
*/

/*
// TODO: move para tests
ghost
requires acc(o)
requires slices.AbsSlice_Bytes(o.underlyingBuf, 0, len(o.underlyingBuf))
ensures  o.Mem()
decreases
func FoldPathMem(o *Path) {
	// The following must hold because of the type of ConsIngress and ConsEgress
	assume 0 <= o.FirstHop.ConsIngress && 0 <= o.FirstHop.ConsEgress
	assume 0 <= o.SecondHop.ConsIngress && 0 <= o.SecondHop.ConsEgress
	fold o.FirstHop.Mem()
	fold o.SecondHop.Mem()
	fold o.Mem()
}
*/