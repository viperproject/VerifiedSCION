// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package onehop

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (o *Path) NonInitMem() {
	acc(o)
}

pred (o *Path) Mem(ubuf []byte) {
	acc(&o.Info) &&
	o.FirstHop.Mem() &&
	o.SecondHop.Mem() &&
	PathLen <= len(ubuf)
}

ghost
requires p.Mem(buf)
ensures  p.NonInitMem()
decreases
func (p *Path) DowngradePerm(buf []byte) {
	unfold p.Mem(buf)
	unfold p.FirstHop.Mem()
	unfold p.SecondHop.Mem()
	fold  p.NonInitMem()
}

ghost
requires acc(o.Mem(ub), _)
ensures  b
decreases
pure func (o *Path) InferSizeUb(ghost ub []byte) (b bool) {
	return unfolding acc(o.Mem(ub), _) in o.Len(ub) <= len(ub)
}

(*Path) implements path.Path