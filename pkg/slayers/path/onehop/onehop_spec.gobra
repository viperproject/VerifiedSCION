// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package onehop

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (o *Path) NonInitMem() {
	acc(o)
}

pred (o *Path) Mem() {
	acc(&o.Info)      &&
	o.FirstHop.Mem()  &&
	o.SecondHop.Mem() &&
	acc(&o.ubytes)    &&
	PathLen <= len(o.ubytes)
}

ghost
requires o.Mem()
decreases
pure func (o *Path) UBytes() []byte {
	return unfolding o.Mem() in o.ubytes
}

ghost
requires p.Mem()
ensures  p.NonInitMem()
decreases
func (p *Path) DowngradePerm() {
	unfold p.Mem()
	unfold p.FirstHop.Mem()
	unfold p.SecondHop.Mem()
	fold  p.NonInitMem()
}

ghost
requires o.Mem()
ensures  b
decreases
pure func (o *Path) InferSizeUb() (b bool) {
	return let ub := o.UBytes() in
		unfolding o.Mem()       in
		o.LenSpec() <= len(ub)
}

ghost
decreases
pure func (p *Path) IsValidResultOfDecoding() (res bool) {
	return true
}

ghost
decreases
pure func (p *Path) LenSpec() int {
	return PathLen
}

(*Path) implements path.Path