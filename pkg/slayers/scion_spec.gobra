// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package slayers

import (
	"net"
	"github.com/google/gopacket"

	"github.com/scionproto/scion/pkg/addr"
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/pkg/slayers/path/empty"
	"github.com/scionproto/scion/pkg/slayers/path/epic"
	"github.com/scionproto/scion/pkg/slayers/path/onehop"
	"github.com/scionproto/scion/pkg/slayers/path/scion"

	def "github.com/scionproto/scion/verification/utils/definitions"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred PathPoolMem(pathPool []path.Path, pathPoolRaw path.Path) {
	// non-initialized path pool:
	(pathPool == nil ==> pathPoolRaw == nil) &&
	// initialized path pool:
	(pathPool != nil ==> (
		len(pathPool) == 4 &&
		// empty
		acc(&pathPool[empty.PathType])  &&
		pathPool[empty.PathType] != nil &&
		typeOf(pathPool[empty.PathType]) == type[empty.Path] &&
		// onehop
		acc(&pathPool[onehop.PathType])  &&
		pathPool[onehop.PathType] != nil &&
		typeOf(pathPool[onehop.PathType]) == type[*onehop.Path] &&
		pathPool[onehop.PathType].NonInitMem() &&
		// scion
		acc(&pathPool[scion.PathType])  &&
		pathPool[scion.PathType] != nil &&
		typeOf(pathPool[scion.PathType]) == type[*scion.Raw] &&
		pathPool[scion.PathType].NonInitMem() &&
		// epic
		acc(&pathPool[epic.PathType])  &&
		pathPool[epic.PathType] != nil &&
		typeOf(pathPool[epic.PathType]) == type[*epic.Path] &&
		pathPool[epic.PathType].NonInitMem() &&
		// raw path
		pathPoolRaw != nil &&
		pathPoolRaw.NonInitMem()))
}

// Captures the same obligations as PathPoolMem. Initially, I tried using a magic wand
// but they cause loads of additional problems (e.g., storing in a predicate is not possible)
pred PathPoolMemExceptOne(pathPool []path.Path, pathPoolRaw path.Path, pathType path.Type) {
	pathPool != nil    &&
	len(pathPool) == 4 &&
	// entry per path type
	// empty
	(acc(&pathPool[empty.PathType]) &&
	pathPool[empty.PathType] != nil &&
	typeOf(pathPool[empty.PathType]) == type[empty.Path]) &&
	// (pathType != empty.PathType ==> pathPool[empty.PathType].NonInitMem()) &&
	// onehop
	acc(&pathPool[onehop.PathType])  &&
	pathPool[onehop.PathType] != nil &&
	typeOf(pathPool[onehop.PathType]) == type[*onehop.Path] &&
	(pathType != onehop.PathType ==> pathPool[onehop.PathType].NonInitMem()) &&
	// scion
	acc(&pathPool[scion.PathType])  &&
	pathPool[scion.PathType] != nil &&
	typeOf(pathPool[scion.PathType]) == type[*scion.Raw] &&
	(pathType != scion.PathType ==> pathPool[scion.PathType].NonInitMem()) &&
	// epic
	acc(&pathPool[epic.PathType])  &&
	pathPool[epic.PathType] != nil &&
	typeOf(pathPool[epic.PathType]) == type[*epic.Path] &&
	(pathType != epic.PathType ==> pathPool[epic.PathType].NonInitMem()) &&
	// raw path
	pathPoolRaw != nil &&
	(pathType < len(pathPool) ==> pathPoolRaw.NonInitMem())
}

ghost
requires acc(&s.pathPool, _)
decreases
pure func (s *SCION) pathPoolInitialized() bool {
	return s.pathPool != nil
}

ghost
requires acc(s.NonInitMem(), _)
decreases
pure func (s *SCION) PathPoolInitializedNonInitMem() bool {
	return unfolding acc(s.NonInitMem(), _) in s.pathPool != nil
}

ghost
requires 0 <= pathType && pathType < path.MaxPathType
requires acc(&s.pathPool, _) && acc(&s.pathPoolRaw, _)
requires s.pathPool != nil
requires acc(PathPoolMemExceptOne(s.pathPool, s.pathPoolRaw, pathType), _)
decreases
pure func (s *SCION) getPathPure(pathType path.Type) path.Path {
	return int(pathType) < len(s.pathPool)? (unfolding acc(PathPoolMemExceptOne(s.pathPool, s.pathPoolRaw, pathType), _) in s.pathPool[pathType]) :
		s.pathPoolRaw
}

pred (s *SCION) NonInitMem() {
	acc(&s.Version) &&
	acc(&s.TrafficClass) &&
	acc(&s.FlowID) &&
	acc(&s.NextHdr) &&
	acc(&s.HdrLen) &&
	acc(&s.PayloadLen) &&
	acc(&s.PathType) &&
	acc(&s.DstAddrType) &&
	acc(&s.SrcAddrType) &&
	acc(&s.DstIA) &&
	acc(&s.SrcIA) &&
	acc(&s.RawDstAddr) &&
	acc(&s.RawSrcAddr) &&
	acc(&s.Path) &&
	acc(&s.BaseLayer) &&
	// path pool properties
	acc(&s.pathPool) &&
	acc(&s.pathPoolRaw) &&
	PathPoolMem(s.pathPool, s.pathPoolRaw)
}

pred (s *SCION) Mem(ubuf []byte) {
	acc(&s.Version) &&
	acc(&s.TrafficClass) &&
	acc(&s.FlowID) &&
	acc(&s.NextHdr) &&
	acc(&s.HdrLen) &&
	acc(&s.PayloadLen) &&
	acc(&s.PathType) &&
	acc(&s.DstAddrType, def.ReadL1) && s.DstAddrType.Has3Bits() &&
	acc(&s.SrcAddrType, def.ReadL1) && s.SrcAddrType.Has3Bits() &&
	// len of ubuf:
	0 <= s.HdrLen &&
	0 <= CmnHdrLen + s.AddrHdrLen(nil, true) &&
	s.HdrLen * LineLen <= len(ubuf) &&
	CmnHdrLen + s.AddrHdrLen(nil, true) <= s.HdrLen * LineLen &&
	// end of len of ubuf
	acc(&s.Path) &&
	s.Path != nil &&
	s.Path.Mem(ubuf[CmnHdrLen+s.AddrHdrLen(nil, true) : s.HdrLen*LineLen]) &&
	acc(&s.BaseLayer) &&
	// base layer fields:
	s.Contents === ubuf[:s.HdrLen*LineLen] &&
	s.Payload  === ubuf[s.HdrLen*LineLen:] &&
	// end of base layer fields
	CmnHdrLen <= len(ubuf) &&
	s.HeaderMem(ubuf[CmnHdrLen:]) &&
	// path pool
	0 <= s.PathType && s.PathType < path.MaxPathType &&
	acc(&s.pathPool) &&
	acc(&s.pathPoolRaw) &&
	(!s.pathPoolInitialized() ==> PathPoolMem(s.pathPool, s.pathPoolRaw)) &&
	(s.pathPoolInitialized() ==> (s.pathPool != nil && s.pathPoolRaw != nil &&
		PathPoolMemExceptOne(s.pathPool, s.pathPoolRaw, s.PathType) && s.Path === s.getPathPure(s.PathType)))
}

pred (s *SCION) HeaderMem(ubuf []byte) {
	acc(&s.DstIA) &&
	acc(&s.SrcIA) &&
	acc(&s.DstAddrType, def.ReadL1) && s.DstAddrType.Has3Bits() &&
	acc(&s.SrcAddrType, def.ReadL1) && s.SrcAddrType.Has3Bits() &&
	s.addrHdrLenAbstractionLeak() <= len(ubuf) &&
	// helper facts to deal with incompletnesses when establising the bounds of s.RawDstAddr and s.RawSrcAddr
	s.AddrHdrLen(nil, true) == s.addrHdrLenAbstractionLeak() &&
	s.AddrHdrLen(nil, true) <= len(ubuf) &&
	0 < s.DstAddrType.Length() && 0 < s.SrcAddrType.Length() &&
	0 < 2*addr.IABytes &&
	2*addr.IABytes < 2*addr.IABytes+s.DstAddrType.Length() &&
	2*addr.IABytes+s.DstAddrType.Length() < 2*addr.IABytes+s.DstAddrType.Length()+s.SrcAddrType.Length() &&
	2*addr.IABytes+s.DstAddrType.Length()+s.SrcAddrType.Length() <= len(ubuf) &&
	// end of helper facts to deal with incompletnesses when establising the bounds of s.RawDstAddr and s.RawSrcAddr
	acc(&s.RawDstAddr) && acc(&s.RawSrcAddr) &&
	// RawDstAddr & RawSrcAddr locations. The memory for these is kept
	// outside of HeaderMem, together with access to the entire slice.
	s.RawDstAddr === ubuf[2*addr.IABytes:2*addr.IABytes+s.DstAddrType.Length()] &&
	s.RawSrcAddr === ubuf[2*addr.IABytes+s.DstAddrType.Length():2*addr.IABytes+s.DstAddrType.Length()+s.SrcAddrType.Length()]
}

ghost
requires s.Mem(ub)
ensures  s.NonInitMem()
decreases
func (s *SCION) DowngradePerm(ghost ub []byte) {
	unfold s.Mem(ub)
	unfold s.HeaderMem(ub[CmnHdrLen:])
	s.Path.DowngradePerm(ub[CmnHdrLen+s.AddrHdrLen(nil, true) : s.HdrLen*LineLen])
	s.PathPoolMemExchange(s.PathType, s.Path)
	fold s.NonInitMem()
}

pred (s *SCION) ChecksumMem() {
	acc(&s.RawSrcAddr) && acc(&s.RawDstAddr) &&
	len(s.RawSrcAddr) % 2 == 0 && len(s.RawDstAddr) % 2 == 0 &&
	acc(&s.SrcIA) && acc(&s.DstIA) &&
	slices.AbsSlice_Bytes(s.RawSrcAddr, 0, len(s.RawSrcAddr)) &&
	slices.AbsSlice_Bytes(s.RawDstAddr, 0, len(s.RawDstAddr))
}

pred (b *BaseLayer) Mem(ghost ub []byte, ghost breakPoint int) {
	0 <= breakPoint && breakPoint <= len(ub) &&
	acc(b) &&
	b.Contents === ub[:breakPoint] &&
	b.Payload  === ub[breakPoint:]
}

ghost
pure
decreases
func (a AddrType) Has3Bits() (res bool) {
	return 0 <= a && a <= 7
}

ghost
requires acc(&s.DstAddrType, def.ReadL20) && acc(&s.SrcAddrType, def.ReadL20)
requires s.DstAddrType.Has3Bits() && s.SrcAddrType.Has3Bits()
ensures  0 <= res
decreases
pure
func (s *SCION) addrHdrLenAbstractionLeak() (res int) {
	return 2*addr.IABytes + s.DstAddrType.Length() + s.SrcAddrType.Length()
}

ghost
requires acc(s.Mem(ubuf), _)
ensures  0 <= res
decreases
pure
func (s *SCION) AddrHdrLenNoAbstractionLeak(ubuf []byte) (res int) {
	return unfolding acc(s.Mem(ubuf), _) in (unfolding acc(s.HeaderMem(ubuf[CmnHdrLen:]), _) in (2*addr.IABytes + s.DstAddrType.Length() + s.SrcAddrType.Length()))
}

// Morally ghost
requires acc(p)
ensures  p.NonInitMem()
ensures  r == p
decreases
func FoldOneHopMem(p *onehop.Path) (r *onehop.Path) {
	fold p.NonInitMem()
	return p
}

// Morally ghost
requires acc(p)
ensures  p.NonInitMem()
ensures  r == p
decreases
func FoldRawMem(p *scion.Raw) (r *scion.Raw) {
	fold p.Base.NonInitMem()
	fold p.NonInitMem()
	return p
}

// Morally ghost
requires acc(p)
ensures  p.NonInitMem()
ensures  r == p
decreases
func FoldEpicMem(p *epic.Path) (r *epic.Path) {
	fold p.NonInitMem()
	return p
}

requires def.Uncallable()
func (s *SCION) LayerContents() (res []byte) {
	res = s.Contents
	return res
}

ghost
requires  0 <= pathType && pathType < path.MaxPathType
requires  acc(&s.pathPool, def.ReadL20) && acc(&s.pathPoolRaw, def.ReadL20)
requires  s.pathPoolInitialized() ==> (
	p.NonInitMem() &&
	PathPoolMemExceptOne(s.pathPool, s.pathPoolRaw, pathType) &&
	p === s.getPathPure(pathType))
requires !s.pathPoolInitialized() ==> PathPoolMem(s.pathPool, s.pathPoolRaw)
ensures  acc(&s.pathPool, def.ReadL20) && acc(&s.pathPoolRaw, def.ReadL20)
ensures  PathPoolMem(s.pathPool, s.pathPoolRaw)
decreases
func (s *SCION) PathPoolMemExchange(pathType path.Type, p path.Path) {
	if s.pathPoolInitialized() {
		unfold PathPoolMemExceptOne(s.pathPool, s.pathPoolRaw, pathType)
		fold   PathPoolMem(s.pathPool, s.pathPoolRaw)
	}
}

// gopacket subtyping
*SCION implements gopacket.Layer
*SCION implements gopacket.NetworkLayer
*SCION implements gopacket.SerializableLayer
*SCION implements gopacket.DecodingLayer

ghost
requires typeOf(a) == *net.IPAddr
requires acc(&a.(*net.IPAddr).IP, _)
requires forall i int :: { &a.(*net.IPAddr).IP[i] } 0 <= i && i < len(a.(*net.IPAddr).IP) ==> acc(&a.(*net.IPAddr).IP[i], _)
requires len(a.(*net.IPAddr).IP) == net.IPv6len
pure func isConvertibleToIPv4(a net.Addr) bool {
	return net.isZeros(a.(*net.IPAddr).IP[0:10]) && a.(*net.IPAddr).IP[10] == 255 && a.(*net.IPAddr).IP[11] == 255
}

ghost
requires typeOf(a) == *net.IPAddr
requires acc(&a.(*net.IPAddr).IP, _)
pure func isIPv6(a net.Addr) bool {
	return len(a.(*net.IPAddr).IP) == net.IPv6len
}

ghost
requires typeOf(a) == *net.IPAddr
requires acc(&a.(*net.IPAddr).IP, _)
pure func isIPv4(a net.Addr) bool {
	return len(a.(*net.IPAddr).IP) == net.IPv4len
}

ghost
pure func isIP(a net.Addr) bool {
	return typeOf(a) == *net.IPAddr
}

ghost
pure func isHostSVC(a net.Addr) bool {
	return typeOf(a) == addr.HostSVC
}

// invariant established by initialization
ghost
ensures acc(path.PathPackageMem(), _)
decreases
func EstablishPathPkgMem()