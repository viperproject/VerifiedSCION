// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file provides a specification to the package `serrors`.
// The specification cannot currently be added to the file 'errors.go'
// where the original definition of 'New' is because that file tries to
// import a third-party package for which we do not yet provide
// specification ("go.uber.org/zap/zapcore").

// Note that the original implementation of this package is not proven to satisfy
// the spec, it is only trusted to do so.

// +gobra

package serrors

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"strings"

	"github.com/scionproto/scion/verification/utils/definitions"
)


type stack []uintptr

type errOrMsg struct {
	str string
	err error
}

errOrMsg implements error

pred (e errOrMsg) ErrorMem() {
	e.err != nil ==> e.err.ErrorMem()
}

preserves m.ErrorMem()
decreases _ // Gobra cannot prove termination of this function yet
func (m errOrMsg) Error() string {
	if m.err != nil {
		unfold m.ErrorMem()
		res := m.err.Error()
		fold   m.ErrorMem()
		return res
	}
	return m.str
}

type basicError struct {
	msg    errOrMsg
	fields map[string]interface{}
	cause  error
	stack  *stack
}

basicError implements error

pred (e basicError) ErrorMem() {
	e.msg.ErrorMem() &&
	(e.fields != nil ==> acc(e.fields)) &&
	(e.cause  != nil ==> e.cause.ErrorMem()) &&
	(e.stack  != nil ==> (acc(e.stack) && acc(*(e.stack))))
}

trusted
preserves e.ErrorMem()
decreases _
func (e basicError) Error() string {
	var buf bytes.Buffer
	buf.WriteString(e.msg.Error())
	if len(e.fields) != 0 {
		fmt.Fprint(&buf, " ")
		encodeContext(&buf, e.ctxPairs())
	}
	if e.cause != nil {
		fmt.Fprintf(&buf, ": %s", e.cause)
	}
	return buf.String()
}

requires  isComparable(err)
decreases
func (e basicError) Is(err error) bool {
	switch other := err.(type) {
	case basicError:
		return e.msg == other.msg
	default:
		if e.msg.err != nil {
			return e.msg.err == err
		}
		return false
	}
}

requires  _as != nil
decreases
func (e basicError) As(_as interface{}) bool {
	if e.msg.err != nil {
		return errors.As(e.msg.err, _as)
	}
	return false
}

preserves acc(e.ErrorMem(), 1/16)
ensures   acc(res)
trusted
func (e basicError) ctxPairs() (res []ctxPair) {
	fields := make([]ctxPair, 0, len(e.fields))
	for k, v := range e.fields {
		fields = append(fields, ctxPair{Key: k, Value: v})
	}
	sort.Slice(fields, func(i, j int) bool {
		return fields[i].Key < fields[j].Key
	})
	return fields
}

// WithCtx returns an error that is the same as the given error but contains the
// additional context. The additional context is printed in the Error method.
// The returned error implements Is and Is(err) returns true.
// Deprecated: use WrapStr or New instead.
//
// Elements of errCtx are limited to "primitive types" at the moment.
// This is a safe but strict under-approximation of what can be done
// with this method.
requires  err.ErrorMem()
preserves forall i int :: 0 <= i && i < len(errCtx) ==>
  acc(&errCtx[i], 1/1000) && definitions.IsOfPrimitiveType(errCtx[i])
ensures res != nil && res.ErrorMem()
ensures typeOf(res) == type[basicError]
ensures isComparable(err) ==> res.(basicError).msg.err == err
ensures isComparable(err) ==> ((res.ErrorMem() && res.(basicError).msg.err == err) --* err.ErrorMem())
decreases
func WithCtx(err error, errCtx ...interface{}) (res error) {
	errMsg := errOrMsg{err: err}
	fold errMsg.ErrorMem()
	res = basicError{
		msg:    errMsg,
		fields: errCtxToFields(errCtx),
	}
	fold res.ErrorMem()
	ghost if isComparable(err) {
		package ((res.ErrorMem() && res.(basicError).msg.err == err) --* err.ErrorMem()) {
			unfold res.ErrorMem()
			unfold res.(basicError).msg.ErrorMem()
		}
	}
	return res
}

// Wrap wraps the cause with the msg error and adds context to the resulting
// error. The returned error implements Is and Is(msg) and Is(cause) returns
// true.
// Deprecated: use WrapStr instead.
//
// Elements of errCtx are limited to "primitive types" at the moment.
// This is a safe but strict under-approximation of what can be done
// with this method.
requires msg.ErrorMem() && cause.ErrorMem()
requires forall i int :: 0 <= i && i < len(errCtx) ==> acc(&errCtx[i], 1/1000)
requires forall i int :: 0 <= i && i < len(errCtx) ==> definitions.IsOfPrimitiveType(errCtx[i])
ensures  forall i int :: 0 <= i && i < len(errCtx) ==> acc(&errCtx[i], 1/1000)
ensures  res != nil && res.ErrorMem()
ensures  typeOf(res) == type[basicError]
ensures  isComparable(msg) ==> res.(basicError).msg.err == msg
ensures  isComparable(cause) ==> res.(basicError).cause == cause
ensures  isComparable(cause) && isComparable(msg) ==> (res.ErrorMem() && res.(basicError).msg.err == msg && res.(basicError).cause == cause) --* (msg.ErrorMem() && cause.ErrorMem())
decreases
func Wrap(msg, cause error, errCtx ...interface{}) (res error) {
	errMsg := errOrMsg{err: msg}
	fold errMsg.ErrorMem()
	res = basicError{
		msg:    errMsg,
		cause:  cause,
		fields: errCtxToFields(errCtx),
	}
	fold res.ErrorMem()
	ghost if isComparable(msg) && isComparable(cause) {
		package ((res.ErrorMem() && res.(basicError).msg.err == msg && res.(basicError).cause == cause) --* (msg.ErrorMem() && cause.ErrorMem())) {
			unfold res.ErrorMem()
			unfold res.(basicError).msg.ErrorMem()
		}
	}
	return res
}

// WrapStr wraps the cause with an error that has msg in the error message and
// adds the additional context. The returned error implements Is and Is(cause)
// returns true.
//
// Elements of errCtx are limited to "primitive types" at the moment.
// This is a safe but strict under-approximation of what can be done
// with this method.
trusted
requires  cause.ErrorMem()
preserves forall i int :: 0 <= i && i < len(errCtx) ==>
  acc(&errCtx[i], 1/1000) && definitions.IsOfPrimitiveType(errCtx[i])
ensures res != nil && res.ErrorMem()
ensures typeOf(res) == type[basicError]
ensures isComparable(cause) ==> res.(basicError).cause == cause
ensures isComparable(cause) ==> (res.ErrorMem() && res.(basicError).cause == cause) --* cause.ErrorMem()
decreases
func WrapStr(msg string, cause error, errCtx ...interface{}) (res error) {
	var (
		existingVal basicError
		existingPtr *basicError
		st          *stack
	)

	// We attach a stacktrace if there is no basic error already.
	if !errors.As(cause, &existingVal) && !errors.As(cause, &existingPtr) {
		st = callers()
	}
	return basicError{
		msg:    errOrMsg{str: msg},
		cause:  cause,
		fields: errCtxToFields(errCtx),
		stack:  st,
	}
}

// New creates a new error with the given message and context.
//
// Elements of errCtx are limited to "primitive types" at the moment.
// This is a safe but strict under-approximation of what can be done
// with this method.
trusted
requires forall i int :: 0 <= i && i < len(errCtx) ==> acc(&errCtx[i], 1/1000)
requires forall i int :: 0 <= i && i < len(errCtx) ==> definitions.IsOfPrimitiveType(errCtx[i])
ensures  forall i int :: 0 <= i && i < len(errCtx) ==> acc(&errCtx[i], 1/1000)
ensures  res != nil && res.ErrorMem()
ensures  typeOf(res) == type[basicError]
ensures  isComparable(res) // the result is comparable; it only returns pointers
decreases
func New(msg string, errCtx ...interface{}) (res error) {
	if len(errCtx) == 0 {
		return &basicError{
			msg:   errOrMsg{str: msg},
			stack: callers(),
		}
	}
	return &basicError{
		msg:    errOrMsg{str: msg},
		fields: errCtxToFields(errCtx),
		stack:  callers(),
	}
}

// List is a slice of errors.
type List []error

List implements error

pred (l List) ErrorMem() {
	forall i int :: 0 <= i && i < len(l) ==> (acc(&l[i]) && l[i].ErrorMem())
}

// Error implements the error interface.
trusted
preserves e.ErrorMem()
decreases
func (e List) Error() string {
	s := make([]string, 0, len(e))
	for _, err := range e {
		s = append(s, err.Error())
	}
	return fmt.Sprintf("[ %s ]", strings.Join(s, "; "))
}

// ToError returns the object as error interface implementation.
trusted
requires e.ErrorMem()
ensures  len(e) == 0 ==> err == nil
ensures  err.ErrorMem()
decreases
func (e List) ToError() (err error) {
	if len(e) == 0 {
		return nil
	}
	return e
}

trusted
preserves acc(errCtx, 1/10000)
ensures   len(errCtx) == 0 ==> res == nil
ensures   len(errCtx) > 0  ==> acc(res)
decreases
func errCtxToFields(errCtx []interface{}) (res map[string]interface{}) {
	if len(errCtx) == 0 {
		return nil
	}
	fields := make(map[string]interface{}, len(errCtx)/2)
	for i := 0; i < len(errCtx)-1; i += 2 {
		fields[fmt.Sprint(errCtx[i])] = errCtx[i+1]
	}
	return fields
}

type ctxPair struct {
	Key   string
	Value interface{}
}
