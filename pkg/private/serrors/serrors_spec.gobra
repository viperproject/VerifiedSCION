// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file provides a specification to the package `serrors`.
// The specification cannot currently be added to the file 'errors.go'
// where the original definition of 'New' is because that file tries to
// import a third-party package for which we do not yet provide
// specification ("go.uber.org/zap/zapcore").

// Note that the original implementation of this package is not proven to satisfy
// the spec, it is only trusted to do so.

// +gobra

package serrors

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"strings"

	"github.com/scionproto/scion/verification/utils/definitions"
)

// WithCtx returns an error that is the same as the given error but contains the
// additional context. The additional context is printed in the Error method.
// The returned error implements Is and Is(err) returns true.
// Deprecated: use WrapStr or New instead.
//
// Elements of errCtx are limited to "primitive types" at the moment.
// This is a safe but strict under-approximation of what can be done
// with this method.
requires  err.ErrorMem()
// The following precondition cannot be adequately captured in Gobra.
// requires forall i int :: 0 <= i && i < len(errCtx) ==> definitions.IsOfPrimitiveType(errCtx[i])
preserves forall i int :: { &errCtx[i] } 0 <= i && i < len(errCtx) ==> acc(&errCtx[i], definitions.ReadL15)
ensures res != nil && res.ErrorMem()
ensures res.ErrorMem() --* err.ErrorMem()
decreases
func WithCtx(err error, errCtx ...interface{}) (res error)

// Wrap wraps the cause with the msg error and adds context to the resulting
// error. The returned error implements Is and Is(msg) and Is(cause) returns
// true.
// Deprecated: use WrapStr instead.
//
// Elements of errCtx are limited to "primitive types" at the moment.
// This is a safe but strict under-approximation of what can be done
// with this method.
requires  msg.ErrorMem() && cause.ErrorMem()
preserves forall i int :: { &errCtx[i] } 0 <= i && i < len(errCtx) ==> acc(&errCtx[i], definitions.ReadL15)
// The following precondition cannot be adequately captured in Gobra.
// requires forall i int :: 0 <= i && i < len(errCtx) ==> definitions.IsOfPrimitiveType(errCtx[i])
ensures   res != nil && res.ErrorMem()
ensures   res.ErrorMem() --* (msg.ErrorMem() && cause.ErrorMem())
decreases
func Wrap(msg, cause error, errCtx ...interface{}) (res error)

// WrapStr wraps the cause with an error that has msg in the error message and
// adds the additional context. The returned error implements Is and Is(cause)
// returns true.
//
// Elements of errCtx are limited to "primitive types" at the moment.
// This is a safe but strict under-approximation of what can be done
// with this method.
requires  cause.ErrorMem()
preserves forall i int :: { &errCtx[i] } 0 <= i && i < len(errCtx) ==> acc(&errCtx[i], definitions.ReadL15)
// The following precondition cannot be adequately captured in Gobra.
// requires forall i int :: 0 <= i && i < len(errCtx) ==> definitions.IsOfPrimitiveType(errCtx[i])
ensures res != nil && res.ErrorMem()
ensures res.ErrorMem() --* cause.ErrorMem()
decreases
func WrapStr(msg string, cause error, errCtx ...interface{}) (res error)

// New creates a new error with the given message and context.
//
// Elements of errCtx are limited to "primitive types" at the moment.
// This is a safe but strict under-approximation of what can be done
// with this method.
preserves forall i int :: { &errCtx[i] } 0 <= i && i < len(errCtx) ==> acc(&errCtx[i], definitions.ReadL15)
ensures   res != nil && res.ErrorMem()
ensures   res.IsDuplicableMem()
decreases
func New(msg string, errCtx ...interface{}) (res error)
