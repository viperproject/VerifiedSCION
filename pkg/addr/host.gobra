// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package addr

import (
	"net"
)

pred (h HostNone) Mem() { len(h) == HostLenNone }

HostNone implements HostAddr {

	(h HostNone) Size() (res int) {
		res = h.Size()
	}

	(h HostNone) Type() (res HostAddrType) {
		res = h.Type()
	}

	(h HostNone) Pack() (res []byte) {
		res = h.Pack()
	}

	(h HostNone) IP() (res net.IP) {
		res = h.IP()
	}

	(h HostNone) Copy() (res HostAddr) {
		res = h.Copy()
	}

	(h HostNone) Equal(o HostAddr) (res bool) {
		res = h.Equal(o)
	}

	(h HostNone) String() (res string) {
		res = h.String()
	}
}


pred (h HostIPv4) Mem() {
	len(h) == HostLenIPv4 && acc(h)
}

HostIPv4 implements HostAddr {

	(h HostIPv4) Size() (res int) {
		res = h.Size()
	}

	(h HostIPv4) Type() (res HostAddrType) {
		res = h.Type()
	}

	(h HostIPv4) Pack() (res []byte) {
		assert unfolding acc(h.Mem(), 1/10000) in len(h) == HostLenIPv4
		res = h.Pack()
	}

	(h HostIPv4) IP() (res net.IP) {
		assert unfolding acc(h.Mem(), 1/10000) in len(h) == HostLenIPv4
		res = h.IP()
	}

	(h HostIPv4) Copy() (res HostAddr) {
		res = h.Copy()
	}

	(h HostIPv4) Equal(o HostAddr) (res bool) {
		res = h.Equal(o)
	}

	(h HostIPv4) String() (res string) {
		res = h.String()
	}
}
