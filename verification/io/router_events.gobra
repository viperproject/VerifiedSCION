// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

/**** Definitions used to define our router events ****/

package io

ghost
pure
decreases
func dp2_check_recvif(d bool, asid IO_as, recvif IO_ifs) bool {
	return d?
		(link_type(asid, recvif) == IO_CustProv{} || link_type(asid, recvif) == IO_PeerOrCore{}) :
		(link_type(asid, recvif) == IO_ProvCust{} || link_type(asid, recvif) == IO_PeerOrCore{})
}

/* Abbreviations */
ghost
pure
decreases
func valid_link_types2(hf1 IO_HF, a IO_as) bool {
	return  (egif_prov2(hf1, a) && inif_cust2(hf1, a)) ||
			(egif_core2(hf1, a) && inif_core2(hf1, a)) ||
			(egif_cust2(hf1, a) && inif_prov2(hf1, a))
}

ghost
pure
decreases
func valid_link_types_in2(hf1 IO_HF, a IO_as) bool {
	return  (inif_prov2(hf1, a) && egif_cust2(hf1, a)) ||
			(inif_core2(hf1, a) && egif_core2(hf1, a)) ||
			(inif_cust2(hf1, a) && egif_prov2(hf1, a))
}
/* End of Abbreviations */

ghost
pure
decreases
func dp2_check_interface(d bool, asid IO_as, hf1 IO_HF, recvif IO_ifs) bool {
	return (d && hf1.InIF2 === some(recvif) && valid_link_types_in2(hf1, asid)) ||
		(!d && hf1.EgIF2 === some(recvif) && valid_link_types2(hf1, asid))
}

ghost
pure
decreases
func dp2_exit_interface(d bool, asid IO_as, hf1 IO_HF, outif IO_ifs) bool {
	return (d && hf1.EgIF2 == some(outif)) || (!d && hf1.InIF2 == some(outif))
}