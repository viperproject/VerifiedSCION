// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

/**** Definitions used to define our router events ****/

package io

ghost
decreases
pure func dp2_check_recvif(d bool, asid IO_as, recvif IO_ifs) bool {
	return d?
		(link_type(asid, recvif) == IO_CustProv{} || link_type(asid, recvif) == IO_PeerOrCore{}) :
		(link_type(asid, recvif) == IO_ProvCust{} || link_type(asid, recvif) == IO_PeerOrCore{})
}

/* Abbreviations */
ghost
decreases
pure func valid_link_types2(hf1 IO_HF, a IO_as) bool {
	return  (egif_prov2(hf1, a) && inif_cust2(hf1, a)) ||
			(egif_core2(hf1, a) && inif_core2(hf1, a)) ||
			(egif_cust2(hf1, a) && inif_prov2(hf1, a))
}

ghost
decreases
pure func valid_link_types_in2(hf1 IO_HF, a IO_as) bool {
	return  (inif_prov2(hf1, a) && egif_cust2(hf1, a)) ||
			(inif_core2(hf1, a) && egif_core2(hf1, a)) ||
			(inif_cust2(hf1, a) && egif_prov2(hf1, a))
}
/* End of Abbreviations */

ghost
decreases
pure func dp2_check_interface(d bool, asid IO_as, hf1 IO_HF, recvif IO_ifs) bool {
	return (d && hf1.InIF2 === some(recvif) && valid_link_types_in2(hf1, asid)) ||
		(!d && hf1.EgIF2 === some(recvif) && valid_link_types2(hf1, asid))
}

ghost
decreases
pure func dp2_exit_interface(d bool, asid IO_as, hf1 IO_HF, outif IO_ifs) bool {
	return (d && hf1.EgIF2 == some(outif)) || (!d && hf1.InIF2 == some(outif))
}

// Takes a packet and forwards it externally, incrementing the segment before doing so.
ghost
decreases
pure func dp2_forward_ext_guard(asid IO_as, m IO_pkt2, nextif IO_ifs, currseg, traversedseg IO_seg2, newpkt IO_pkt2, fut seq[IO_HF], hf1 IO_HF) bool {
	return m.CurrSeg == currseg &&
		newpkt == IO_pkt2(IO_Packet2{traversedseg, m.LeftSeg, m.MidSeg, m.RightSeg}) &&
		// The outgoing interface is correct:
		dp2_exit_interface(currseg.ConsDir, asid, hf1, nextif) &&
		// Next validate the current hop field with the *original* UInfo field):
		hf_valid(currseg.ConsDir, currseg.AInfo, currseg.UInfo, hf1) &&
		hf1.extr_asid() == asid &&
		// Segment update: push current hop field into the Past path and History:
		inc_seg2(currseg, traversedseg, hf1, fut) &&
		// If the current segment is an *down*-segment, then we need to update the
		// uinfo field *after* validating the hop field
		update_uinfo(currseg.ConsDir, currseg, traversedseg, hf1) &&
		// Other fields: no update
		same_other2(currseg, traversedseg)
}

ghost
decreases
pure func dp2_forward_ext(s IO_dp2_state, sprime IO_dp2_state, asid IO_as, m IO_pkt2) bool {
	return exists nextif IO_ifs, currseg IO_seg2, traversedseg IO_seg2, newpkt IO_pkt2, fut seq[IO_HF], hf1 IO_HF :: dp2_forward_ext_guard(asid, m, nextif, currseg, traversedseg, newpkt, fut, hf1) &&
		dp2_add_ext(s, sprime, asid, nextif, newpkt)

}

// Non-deterministically forward the packet internally or externally. In the real system, a router
// will forward a packet externally if the interface over which the packet is supposed to leave the
// AS belongs to the router itself. In all other cases, the packet will be forwarded internally.
// In case the packet is forwarded externally, additional processing is required
// (e.g., updating the uinfo field depending on direction, and incrementing the segment).
ghost
decreases
pure func dp2_forward(s IO_dp2_state, sprime IO_dp2_state, asid IO_as, m IO_pkt2) bool {
	return dp2_add_int(s, sprime, asid, m) || dp2_forward_ext(s, sprime, asid, m)
}


// A packet is received from an ext state (i.e., an inter-AS channel) and is forwarded (either internally or externally)
ghost
decreases
pure func dp2_enter_guard(m IO_pkt2, currseg IO_seg2, traversedseg IO_seg2, asid IO_as, hf1 IO_HF, recvif IO_ifs, fut seq[IO_HF]) bool {
	return m.CurrSeg == currseg &&
		currseg.Future == seq[IO_HF]{hf1} ++ fut &&
		dp2_check_interface(currseg.ConsDir, asid, hf1, recvif) &&
		update_uinfo(!currseg.ConsDir, currseg, traversedseg, hf1) &&
		same_segment2(currseg, traversedseg) &&
		same_other2(currseg, traversedseg) &&
		hf_valid(currseg.ConsDir, currseg.AInfo, traversedseg.UInfo, hf1) &&
		hf1.extr_asid() == asid
}

ghost
decreases
pure func dp2_enter(s IO_dp2_state, m IO_pkt2, currseg IO_seg2, traversedseg IO_seg2, asid IO_as, hf1 IO_HF, recvif IO_ifs, fut seq[IO_HF], sprime IO_dp2_state) bool {
	return dp2_in_ext(s, asid, recvif, m) &&
		dp2_enter_guard(m, currseg, traversedseg, asid, hf1, recvif, fut) &&
		// Action: Update internal state to include packet.
		dp2_forward(s, sprime, asid, IO_pkt2(IO_Packet2{traversedseg, m.LeftSeg, m.MidSeg, m.RightSeg}))
}

ghost
decreases
pure func dp2_exit(s IO_dp2_state, m IO_pkt2, asid IO_as, sprime IO_dp2_state) bool {
	// the first conjunct is not in the IO spec document but it is required in Gobra
	// to make this function well formed.
	return asid in domain(s.int2) &&
		(let img := s.int2[asid] in (m in img)) &&
		dp2_forward_ext(s, sprime, asid, m)
}