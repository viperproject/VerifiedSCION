// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

/**** Switching between segments (xover) ****/

package io

// Switching between segments (xover)
// Xover events are similar to the enter event in that a packet is received form an external
// channel and forwarded (internally or externally), but in contrast to the enter event, additional
// processing steps are required to switch from the current segment, which has reached its end, to the
// next segment.

// Guard:
// Check if we are at the end of one segment and that there is a non empty Future segment.
// There are three different segments in this definition: currseg, the 'old segment' with
// exactly one hop field remaining in the Future path, traversedseg, which is currseg after we
// push its remaining hop field into the Past path, and nextseg, which is the new segment that we
// are xovering over to
ghost
requires dp.Valid()
requires asid == dp.Asid()
decreases
pure func (dp DataPlaneSpec) dp2_xover_guard(m IO_pkt2,
	currseg IO_seg2,
	nextseg IO_seg2,
	traversedseg IO_seg2,
	newpkt IO_pkt2,
	hf1 IO_HF,
	hf2 IO_HF,
	nextfut seq[IO_HF],
	asid IO_as,
	recvif IO_ifs) bool {
		return m.CurrSeg == currseg &&
			m.LeftSeg == some(nextseg) &&
			nextseg.History == seq[IO_ahi]{} &&
			newpkt == IO_Packet2{nextseg, m.MidSeg, m.RightSeg, some(traversedseg)} &&
			currseg.Future == seq[IO_HF]{hf1} &&
			nextseg.Future == seq[IO_HF]{hf2} ++ nextfut &&
			dp.dp2_enter_interface(currseg.ConsDir, asid, hf1, recvif) &&
			dp.xover2_link_type_dir(dp.Asid(), currseg.ConsDir, hf1, nextseg.ConsDir, hf2) &&
			update_uinfo(!currseg.ConsDir, currseg, traversedseg, hf1) &&
			inc_seg2(currseg, traversedseg, hf1, seq[IO_HF]{}) &&
			dp.hf_valid(currseg.ConsDir, currseg.AInfo, traversedseg.UInfo, hf1) &&
			dp.hf_valid(nextseg.ConsDir, nextseg.AInfo, nextseg.UInfo, hf2) &&
			hf1.extr_asid() == asid &&
			hf2.extr_asid() == asid &&
			same_other2(currseg, traversedseg)
}

ghost
requires dp.Valid()
requires a == dp.Asid()
decreases
pure func (dp DataPlaneSpec) egif2_type(hf IO_HF, a IO_as, link IO_Link) bool {
	return dp.if_type(a, hf.EgIF2, link)
}

ghost
requires dp.Valid()
requires a == dp.Asid()
decreases
pure func (dp DataPlaneSpec) inif2_type(hf IO_HF, a IO_as, link IO_Link) bool {
	return dp.if_type(a, hf.InIF2, link)
}

ghost
requires dp.Valid()
requires asid == dp.Asid()
decreases
pure func (dp DataPlaneSpec) xover2_link_type(asid IO_as, hf1 IO_HF, hf2 IO_HF) bool {
	return (dp.inif2_type(hf1, asid, IO_ProvCust{}) && dp.egif2_type(hf2, asid, IO_ProvCust{})) ||
		(dp.inif2_type(hf1, asid, IO_ProvCust{}) && dp.egif2_type(hf2, asid, IO_Core{})) ||
		(dp.inif2_type(hf1, asid, IO_Core{}) && dp.egif2_type(hf2, asid, IO_ProvCust{}))
}

ghost
decreases
pure func swap_if_dir2(hf IO_HF, d bool) IO_HF {
	return IO_HF_ {
		InIF2: d ? hf.InIF2 : hf.EgIF2,
		EgIF2: d ? hf.EgIF2 : hf.InIF2,
		HVF: hf.HVF,
	}
}

ghost
requires dp.Valid()
requires asid == dp.Asid()
decreases
pure func (dp DataPlaneSpec) xover2_link_type_dir(asid IO_as, d1 bool, hf1 IO_HF, d2 bool, hf2 IO_HF) bool {
	return dp.xover2_link_type(asid, swap_if_dir2(hf1, d1), swap_if_dir2(hf2, d2))
}


