// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

/**** Symbols that are not explicitly defined in any section of the IO spec document ****/

package io

import "github.com/scionproto/scion/pkg/slayers/path"

// used everywhere where the Isabel spec has a type-parameter
type TypeParameter = interface{}
type TypeParameter1 = interface{}
type TypeParameter2 = interface{}
type TypeParameter3 = interface{}

type Unit adt {
	Unit_{}
}

// interface IDs
type IO_ifs uint16

// type of AS identifiers
type IO_as uint

// router ids
type IO_rid uint

// msgTerms consist of terms from our term algebra.
type IO_msgterm adt {
	MsgTerm_Empty{}

	MsgTerm_AS {
		MsgTerm_AS_ IO_as
	}

	MsgTerm_Num {
		MsgTerm_Num_ int // formallized as nat in Isabelle
	}

	MsgTerm_Key {
		MsgTerm_Key_ IO_key
	}

	MsgTerm_L {
		MsgTerm_L_ seq[IO_msgterm]
	}

	MsgTerm_FS {
		MsgTerm_FS_ seq[IO_msgterm]
	}

	MsgTerm_MPair {
		MsgTerm_MPair_1 IO_msgterm
		MsgTerm_MPair_2 IO_msgterm
	}

	MsgTerm_Hash {
		MsgTerm_Hash_ IO_msgterm
	}

	MsgTerm_Crypt {
		MsgTerm_Crypt_1 IO_key
		MsgTerm_Crypt_2 IO_msgterm
	}
}

type IO_key adt {
	Key_macK {
		Key_macK_ IO_as
	}

	Key_pubK {
		Key_pubK_ IO_as
	}

	Key_priK {
		Key_priK_ IO_as
	}
}

// "authenticated hop information"
type IO_ahi adt {
	IO_ahi_ {
		InIF option[IO_ifs]
		EgIF option[IO_ifs]
		ASID IO_as
	}
}

ghost
decreases
pure func (hf IO_HF) extr_asid() IO_as {
	return hf.HVF.extract_asid()
}



// function 'toab' in Isabelle, originally of type HF_scheme -> aahi_scheme
ghost
pure
decreases
func (h IO_HF) Toab() IO_ahi {
	return IO_ahi_{h.InIF2, h.EgIF2, h.HVF.extract_asid()}
}

// TODO: move ToHF to another package
// TODO: can we get rid of this assumption?
// We ASSUME the existence of a function that computes the msgTerm of a path.HopField
ghost
decreases
pure func ComputeMsgTerm(h path.HopField) IO_msgterm

// TODO: should be easy to give a body to this now
ghost
ensures h.ConsIngress == 0 ==> res.InIF2 == none[IO_ifs]
ensures h.ConsIngress != 0 ==> res.InIF2 == some(IO_ifs(h.ConsIngress))
ensures h.ConsEgress  == 0 ==> res.EgIF2 == none[IO_ifs]
ensures h.ConsEgress  != 0 ==> res.EgIF2 == some(IO_ifs(h.ConsIngress))
ensures res.HVF == ComputeMsgTerm(h)
decreases
pure func ToHF(h path.HopField) (res IO_HF)

/* Link Types */
type IO_Link adt {
	IO_CustProv{}
	IO_ProvCust{}
	IO_PeerOrCore{}
	IO_NoLink{}
}
/* End of Link Types */

/* To clarify, the existence of the following functions seems to be assumed */
// NOTE:
// The following functions are provided as parameters to various locales in the Isabelle formalization.
// However, it is not clear at the moment how these should be translated to Gobra and whether they
// should have proof obligations attached, or can just be assumed to exist.

ghost
decreases
pure func rid_as(p IO_rid) IO_as

ghost
decreases
pure func link_type(p1 IO_as, p2 IO_ifs) IO_Link

ghost
decreases
pure func egif_prov2(hf1 IO_HF, asid IO_as) bool

ghost
decreases
pure func egif_core2(hf1 IO_HF, asid IO_as) bool

ghost
decreases
pure func egif_cust2(hf1 IO_HF, asid IO_as) bool

ghost
decreases
pure func inif_cust2(hf1 IO_HF, asid IO_as) bool

ghost
decreases
pure func inif_core2(hf1 IO_HF, asid IO_as) bool

ghost
decreases
pure func inif_prov2(hf1 IO_HF, asid IO_as) bool

ghost
decreases
pure func if_type(asid IO_as, ifs option[IO_ifs], link IO_Link) bool

type ext2_rec struct {
	op1 IO_as
	op2 IO_ifs
	op3 IO_as
	op4 IO_as
}

type IO_dp2_state adt {
	IO_dp2_state_ {
		// In the Isabelle spec, the following are functions
		// instead of mathematical maps
		ext2 dict[ext2_rec](set[IO_pkt2])
		int2 dict[IO_as](set[IO_pkt2])
	}
}

ghost
decreases
pure func dp2_add_ext(s, sprime IO_dp2_state, asid IO_as, nextif IO_ifs, newpkt IO_pkt2) bool

ghost
decreases
pure func dp2_add_int(s, sprime IO_dp2_state, asid IO_as, newpkt IO_pkt2) bool

ghost
decreases
pure func dp2_in_ext(s IO_dp2_state, asid IO_as, ifs IO_ifs, pkt IO_pkt2) bool

// TODO: how is this defined?
// extract_asid
ghost
decreases
pure func (m IO_msgterm) extract_asid() IO_as

/* End of To clarify */
