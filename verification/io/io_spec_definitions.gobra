// Copyright 2024 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package io

/*** This file contains helpful definitions that do not have a counterpart in the Isabelle formalization. ***/

// Establishes the traversed segment for packets which are not incremented (internal).
ghost
requires len(currseg.Future) > 0
decreases
pure func establishGuardTraversedseg(currseg IO_seg3, direction bool) IO_seg3 {
    return let uinfo := direction ?
        upd_uinfo(currseg.UInfo, currseg.Future[0]) :
        currseg.UInfo in
        IO_seg3_ {
            AInfo: currseg.AInfo,
            UInfo: uinfo,
            ConsDir: currseg.ConsDir,
            Peer: currseg.Peer,
            Past: currseg.Past,
            Future: currseg.Future,
            History: currseg.History,
        }
}

// Establishes the traversed segment for packets that are incremented (external).
ghost
requires len(currseg.Future) > 0
decreases
pure func establishGuardTraversedsegInc(currseg IO_seg3, direction bool) IO_seg3 {
    return let uinfo := direction ?
        upd_uinfo(currseg.UInfo, currseg.Future[0]) :
        currseg.UInfo in
        IO_seg3_ {
            AInfo: currseg.AInfo,
            UInfo: uinfo,
            ConsDir: currseg.ConsDir,
            Peer: currseg.Peer,
            Past: seq[IO_HF]{currseg.Future[0]} ++ currseg.Past,
            Future: currseg.Future[1:],
            History: seq[IO_ahi]{currseg.Future[0].Toab()} ++ currseg.History,
        }
}

ghost
decreases
pure func (seg IO_seg3) UpdateCurrSeg( info AbsInfoField) IO_seg3 {
    return IO_seg3_ {
        info.AInfo,
        info.UInfo,
        info.ConsDir,
        info.Peer,
        seg.Past,
        seg.Future,
        seg.History,
    }
}

ghost
decreases
pure func (pkt IO_pkt2) UpdateInfoField(info AbsInfoField) IO_pkt2 {
    return let newCurrSeg := pkt.CurrSeg.UpdateCurrSeg(info) in
        IO_Packet2{newCurrSeg, pkt.LeftSeg, pkt.MidSeg, pkt.RightSeg}
}

// This type simplifies the infoField, making it easier
// to use than the IO_seg3 from the IO-spec.
type AbsInfoField adt {
    AbsInfoField_ {
        AInfo IO_ainfo
        UInfo set[IO_msgterm]
        ConsDir bool
        Peer bool
    }
}

// The segment lengths of a packet are frequently used together.
// This type combines them into a single structure to simplify
// their specification.
type SegLens adt {
    SegLens_ {
        Seg1Len int
        Seg2Len int
        Seg3Len int
    }
}

ghost
decreases
pure func (s SegLens) Valid() bool {
    return s.Seg1Len > 0 &&
        s.Seg2Len >= 0 &&
        s.Seg3Len >= 0
}

ghost
requires seg1Len > 0
requires seg2Len >= 0
requires seg3Len >= 0
decreases
pure func CombineSegLens(seg1Len int, seg2Len int, seg3Len int) SegLens {
    return SegLens_ {
            seg1Len,
            seg2Len,
            seg3Len,
        }
}

ghost
decreases
pure func (s SegLens) NumInfoFields() int {
    return s.Seg3Len > 0 ? 3 : (s.Seg2Len > 0 ? 2 : (s.Seg1Len > 0 ? 1 : 0))
}