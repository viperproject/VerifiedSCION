// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

/**** Functions/definitions to work with segments ****/

package io

// the following methods are already concretized for IO_seg3 and IO_pkt3,
// instead of being fully generic (i.e., taking params of type IO_seg2/IO_pkt2).

ghost
decreases
pure func inc_seg2(currseg, traversedseg IO_seg2, hf1 IO_HF, fut seq[IO_HF]) bool {
	return currseg.Future === seq[IO_HF]{hf1} ++ fut &&
		traversedseg.Future === fut &&
		traversedseg.Past === seq[IO_HF]{hf1} ++ currseg.Past &&
		traversedseg.History === seq[IO_ahi]{hf1.Toab()} ++ currseg.History
}

ghost
decreases
pure func same_segment2(currseg, traversedseg IO_seg2) bool {
	return traversedseg.Future === currseg.Future &&
		traversedseg.Past    === currseg.Past &&
		traversedseg.History === currseg.History
}

ghost
decreases
pure func update_uinfo2(currseg, traversedseg IO_seg2, hf1 IO_HF) bool {
	return traversedseg.UInfo === upd_uinfo(currseg.UInfo, hf1)
}

ghost
decreases
pure func same_uinfo2(currseg, traversedseg IO_seg2) bool {
	return currseg.UInfo === traversedseg.UInfo
}

ghost
decreases
pure func update_uinfo(condition bool, currseg, traversedseg IO_seg2, hf1 IO_HF) bool {
	return condition? update_uinfo2(currseg, traversedseg, hf1) : same_uinfo2(currseg, traversedseg)
}

ghost
decreases
pure func same_other2(currseg, traversedseg IO_seg3) bool {
	return traversedseg.AInfo === currseg.AInfo &&
		traversedseg.ConsDir === currseg.ConsDir &&
		traversedseg.Peer === currseg.Peer
}