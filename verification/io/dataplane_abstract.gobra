// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package io

type DataPlaneSpec adt {
	DataPlaneSpec_{
		linkTypes		dict[IO_ifs]IO_Link
		neighborIAs		dict[IO_ifs]IO_as
		localIA			IO_as
		topology 		TopologySpec
	}
}

// TopologySpec provides information about the entire network topology.
// coreAS: IDs of the core Autonomous Systems
// links: representation of the network topology as a graph.
//		links[a1][x] == (a2,y) means that AS a1 and AS a2 share an edge via interface x and y, respectively.
type TopologySpec adt {
	TopologySpec_{
		coreAS		set[IO_as]
		links	 	dict[IO_as](dict[IO_ifs]AsIfsPair)
	}
}

type AsIfsPair struct {
	asid	IO_as
	ifs		IO_ifs
}

// TODO: rewrite function when gobra allows accessing two-dimensional arrays
ghost
decreases
pure func (dp DataPlaneSpec) Valid() bool{
	return domain(dp.linkTypes) == domain(dp.neighborIAs) &&
		dp.localIA in domain(dp.topology.links) &&
		domain(dp.neighborIAs) == domain(dictCast(dp.topology.links, dp.localIA)) &&
		(forall core IO_as :: {core in dp.topology.coreAS} core in dp.topology.coreAS ==> 
			core in domain(dp.topology.links)) &&
		(forall ifs IO_ifs :: {ifs in domain(dp.neighborIAs)} ifs in domain(dp.neighborIAs) ==> 
			dp.neighborIAs[ifs] == dictCast(dp.topology.links, dp.localIA)[ifs].asid) &&
		(forall asid IO_as, ifs IO_ifs :: (asid in domain(dp.topology.links) && ifs in domain(dictCast(dp.topology.links, asid))) ==>
					dp.lookup(asid, ifs).asid in domain(dp.topology.links) && 
					dp.lookup(asid, ifs).ifs in domain(dictCast(dp.topology.links, dp.lookup(asid, ifs).asid)) &&
					dp.lookup(dp.lookup(asid, ifs).asid, dp.lookup(asid, ifs).ifs) == AsIfsPair{asid, ifs})
}

ghost
decreases
requires ifs in domain(dp.linkTypes)
pure func (dp DataPlaneSpec) GetLinkType(ifs IO_ifs) IO_Link {
	return dp.linkTypes[ifs]
}

ghost
requires ifs in domain(dp.neighborIAs)
decreases
pure func (dp DataPlaneSpec) GetNeighborIA(ifs IO_ifs) IO_as {
	return dp.neighborIAs[ifs]
}

ghost
decreases
pure func (dp DataPlaneSpec) GetLocalIA() IO_as {
	return dp.localIA
}

ghost
decreases
pure func (dp DataPlaneSpec) GetCoreAS() set[IO_as] {
	return dp.topology.coreAS
}

ghost
requires asid in domain(dp.topology.links)
requires ifs in domain(dictCast(dp.topology.links, asid))
decreases
pure func(dp DataPlaneSpec) lookup(asid IO_as, ifs IO_ifs) AsIfsPair {
	return dictCast(dp.topology.links, asid)[ifs]
}

ghost 
requires idx in domain(m)
decreases
pure func dictCast(m dict[IO_as](dict[IO_ifs]AsIfsPair), idx IO_as) dict[IO_ifs]AsIfsPair{
	return m[idx]
}