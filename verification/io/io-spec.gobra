// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	 http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

/**** IO-Specification ****/

package io

// called BogusTrigger instead of Unit here because the name Unit is already in use.
type BogusTrigger struct{}

// Unlike the original IO-spec from Isabelle, we need additional information about the network topology.
// To ensure the well-formedness of all map accesses we require an additional conjunction
// for all the events (dp.Valid())

// This is the main IO Specification.
pred (dp DataPlaneSpec) dp3s_iospec_ordered(s Dp3sStateLocal, t Place) {
	dp.dp3s_iospec_bio3s_enter(s, t) &&
	dp.dp3s_iospec_bio3s_xover(s, t) &&
	dp.dp3s_iospec_bio3s_exit(s, t) &&
	dp.dp3s_iospec_bio3s_send(s, t) &&
	dp.dp3s_iospec_bio3s_recv(s, t) &&
	dp.dp3s_iospec_skip(s, t) &&
	dp.dp3s_iospec_stop(s, t)
}

type Place int

pred token(t Place)

ghost
decreases
pure func undefined() Dp3sStateLocal

pred CBio_IN_bio3s_enter(t Place, v Val)

ghost
requires CBio_IN_bio3s_enter(t, v)
decreases
<<<<<<< HEAD
pure func CBio_IN_bio3s_enter_T(t Place, v IO_val) Place
=======
pure func CBio_IN_bio3s_enter_T(t Place, v Val) Place
>>>>>>> master

// This corresponds to the condition of the if statement in the io-spec case for enter
ghost
requires v.isValInternal1
requires dp.Valid()
decreases
pure func (dp DataPlaneSpec) dp3s_iospec_bio3s_enter_guard(s Dp3sStateLocal, t Place, v Val) bool {
	return some(v.ValInternal1_2) in domain(s.ibuf) &&
		(let ibuf_set := s.ibuf[some(v.ValInternal1_2)] in (v.ValInternal1_1 in ibuf_set)) &&
		len(v.ValInternal1_1.CurrSeg.Future) > 0 &&
		let currseg := v.ValInternal1_1.CurrSeg in
		let hf1, fut := currseg.Future[0], currseg.Future[1:] in
		let traversedseg := establishGuardTraversedseg(currseg, !currseg.ConsDir) in
		dp.dp2_enter_guard(
			v.ValInternal1_1,
			currseg,
			traversedseg,
			dp.Asid(),
			hf1,
			v.ValInternal1_2,
			fut) &&
			dp.dp3s_forward(
<<<<<<< HEAD
				IO_Packet2 {
					traversedseg,
					v.IO_Internal_val1_1.LeftSeg,
					v.IO_Internal_val1_1.MidSeg,
					v.IO_Internal_val1_1.RightSeg,
				},
				v.IO_Internal_val1_3,
				v.IO_Internal_val1_4)
}

pred (dp DataPlaneSpec) dp3s_iospec_bio3s_enter(s IO_dp3s_state_local, t Place) {
	forall v IO_val :: { TriggerBodyIoEnter(v) } (
		match v {
			case IO_Internal_val1{_, _, ?newpkt, ?nextif}:
=======
				Pkt {
					traversedseg,
					v.ValInternal1_1.LeftSeg,
					v.ValInternal1_1.MidSeg,
					v.ValInternal1_1.RightSeg,
				},
				v.ValInternal1_3,
				v.ValInternal1_4)
}

pred (dp DataPlaneSpec) dp3s_iospec_bio3s_enter(s Dp3sStateLocal, t Place) {
	forall v Val :: { TriggerBodyIoEnter(v) } (
		match v {
			case ValInternal1{_, _, ?newpkt, ?nextif}:
>>>>>>> master
				// Gobra requires the triggering term to occur inside the qtfier body,
				// otherwise we get an error in the call to CBio_IN_bio3s_enter_T.
				// We named the variable `_ignored` because using `_` here leads to a strange
				// type error.
				let _ignored := TriggerBodyIoEnter(v) in
				(dp.Valid() && dp.dp3s_iospec_bio3s_enter_guard(s, t, v) ==>
					(CBio_IN_bio3s_enter(t, v) &&
					dp.dp3s_iospec_ordered(
						dp3s_add_obuf(s, nextif, newpkt),
						CBio_IN_bio3s_enter_T(t, v))))
			default:
				true
		})
}

<<<<<<< HEAD
ghost
decreases
pure func TriggerBodyIoEnter(v IO_val) BogusTrigger { return BogusTrigger{} }

pred CBio_IN_bio3s_xover(t Place, v IO_val)

ghost
requires CBio_IN_bio3s_xover(t, v)
decreases
pure func dp3s_iospec_bio3s_xover_T(t Place, v IO_val) Place

// This corresponds to the condition of the if statement in the io-spec case for xover
=======
ghost
decreases
pure func TriggerBodyIoEnter(v Val) BogusTrigger { return BogusTrigger{} }

pred CBio_IN_bio3s_xover(t Place, v Val)

>>>>>>> master
ghost
requires CBio_IN_bio3s_xover(t, v)
decreases
pure func dp3s_iospec_bio3s_xover_T(t Place, v Val) Place

// This corresponds to the condition of the if statement in the io-spec case for xover
ghost
requires v.isValInternal1
requires dp.Valid()
decreases
<<<<<<< HEAD
pure func (dp DataPlaneSpec) dp3s_iospec_bio3s_xover_guard(s IO_dp3s_state_local, t Place, v IO_val) bool {
	return let currseg := v.IO_Internal_val1_1.CurrSeg in
		match v.IO_Internal_val1_1.LeftSeg{
			case none[IO_seg2]:
				false
			default:
				let nextseg := get(v.IO_Internal_val1_1.LeftSeg) in
=======
pure func (dp DataPlaneSpec) dp3s_iospec_bio3s_xover_guard(s Dp3sStateLocal, t Place, v Val) bool {
	return let currseg := v.ValInternal1_1.CurrSeg in
		match v.ValInternal1_1.LeftSeg{
			case none[Seg]:
				false
			default:
				let nextseg := get(v.ValInternal1_1.LeftSeg) in
>>>>>>> master
				(len(nextseg.Future) > 0 &&
				len(currseg.Future) > 0 &&
				let hf1, hf2 := currseg.Future[0], nextseg.Future[0] in
				let traversedseg := establishGuardTraversedsegInc(currseg, !currseg.ConsDir) in
				let nextfut := nextseg.Future[1:] in
				dp.dp3s_xover_guard(
					s,
<<<<<<< HEAD
					v.IO_Internal_val1_1,
					currseg,
					nextseg,
					traversedseg,
					IO_Packet2 { nextseg, v.IO_Internal_val1_1.MidSeg, v.IO_Internal_val1_1.RightSeg, some(traversedseg) },
					hf1,
					hf2,
					nextfut,
					v.IO_Internal_val1_2,
					v.IO_Internal_val1_3,
					v.IO_Internal_val1_4,))
		}
}

pred (dp DataPlaneSpec) dp3s_iospec_bio3s_xover(s IO_dp3s_state_local, t Place) {
	forall v IO_val :: { TriggerBodyIoXover(v) } (
		match v {
			case IO_Internal_val1{_, _, ?newpkt, ?nextif}:
=======
					v.ValInternal1_1,
					currseg,
					nextseg,
					traversedseg,
					Pkt { nextseg, v.ValInternal1_1.MidSeg, v.ValInternal1_1.RightSeg, some(traversedseg) },
					hf1,
					hf2,
					nextfut,
					v.ValInternal1_2,
					v.ValInternal1_3,
					v.ValInternal1_4,))
		}
}

pred (dp DataPlaneSpec) dp3s_iospec_bio3s_xover(s Dp3sStateLocal, t Place) {
	forall v Val :: { TriggerBodyIoXover(v) } (
		match v {
			case ValInternal1{_, _, ?newpkt, ?nextif}:
>>>>>>> master
				// Gobra requires the triggering term to occur inside the qtfier body,
				// otherwise we get an error in the call to dp3s_iospec_bio3s_xover_T.
				// We named the variable `_ignored` because using `_` here leads to a strange
				// type error.
				let _ignored := TriggerBodyIoXover(v) in
				(dp.Valid() && dp.dp3s_iospec_bio3s_xover_guard(s, t, v) ==>
					(CBio_IN_bio3s_xover(t, v) &&
					dp.dp3s_iospec_ordered(
						dp3s_add_obuf(s, nextif, newpkt),
						dp3s_iospec_bio3s_xover_T(t, v))))
			default:
				true
		})
}

ghost
decreases
<<<<<<< HEAD
pure func TriggerBodyIoXover(v IO_val) BogusTrigger { return BogusTrigger{} }

pred CBio_IN_bio3s_exit(t Place, v IO_val)
=======
pure func TriggerBodyIoXover(v Val) BogusTrigger { return BogusTrigger{} }

pred CBio_IN_bio3s_exit(t Place, v Val)
>>>>>>> master

ghost
requires CBio_IN_bio3s_exit(t, v)
decreases
pure func dp3s_iospec_bio3s_exit_T(t Place, v Val) Place

// This corresponds to the condition of the if statement in the io-spec case for exit
ghost
requires v.isValInternal2
requires dp.Valid()
decreases
pure func (dp DataPlaneSpec) dp3s_iospec_bio3s_exit_guard(s Dp3sStateLocal, t Place, v Val) bool {
	return none[Ifs] in domain(s.ibuf) &&
		(let ibuf_set := s.ibuf[none[Ifs]] in (v.ValInternal2_1 in ibuf_set)) &&
		len(v.ValInternal2_1.CurrSeg.Future) > 0 &&
		dp.dp3s_forward_ext(v.ValInternal2_1, v.ValInternal2_2, v.ValInternal2_3)
}

<<<<<<< HEAD
pred (dp DataPlaneSpec) dp3s_iospec_bio3s_exit(s IO_dp3s_state_local, t Place) {
	forall v IO_val :: { TriggerBodyIoExit(v) } (
		match v {
			case IO_Internal_val2{_, ?newpkt, ?nextif}:
=======
pred (dp DataPlaneSpec) dp3s_iospec_bio3s_exit(s Dp3sStateLocal, t Place) {
	forall v Val :: { TriggerBodyIoExit(v) } (
		match v {
			case ValInternal2{_, ?newpkt, ?nextif}:
>>>>>>> master
				// Gobra requires the triggering term to occur inside the qtfier body,
				// otherwise we get an error in the call to dp3s_iospec_bio3s_exit_T.
				// We named the variable `_ignored` because using `_` here leads to a strange
				// type error.
				let _ignored := TriggerBodyIoExit(v) in
				(dp.Valid() && dp.dp3s_iospec_bio3s_exit_guard(s, t, v) ==>
					(CBio_IN_bio3s_exit(t, v) &&
					dp.dp3s_iospec_ordered(
						dp3s_add_obuf(s, some(nextif), newpkt),
						dp3s_iospec_bio3s_exit_T(t, v))))
			default:
				true
		})
}

ghost
decreases
<<<<<<< HEAD
pure func TriggerBodyIoExit(v IO_val) BogusTrigger { return BogusTrigger{} }
=======
pure func TriggerBodyIoExit(v Val) BogusTrigger { return BogusTrigger{} }
>>>>>>> master

pred CBioIO_bio3s_send(t Place, v Val)

ghost
requires CBioIO_bio3s_send(t, v)
decreases
pure func dp3s_iospec_bio3s_send_T(t Place, v Val) Place

// This corresponds to the condition of the if statement in the io-spec case for send
ghost
requires v.isValPkt
requires dp.Valid()
decreases
pure func (dp DataPlaneSpec) dp3s_iospec_bio3s_send_guard(s Dp3sStateLocal, t Place, v Val) bool {
	return v.ValPkt_1 in domain(s.obuf) &&
		(let obuf_set := s.obuf[v.ValPkt_1] in (v.ValPkt_2 in obuf_set))
}

<<<<<<< HEAD
pred (dp DataPlaneSpec) dp3s_iospec_bio3s_send(s IO_dp3s_state_local, t Place) {
	forall v IO_val :: { TriggerBodyIoSend(v) } (
		match v {
			case IO_val_Pkt2{_, _}:
=======
pred (dp DataPlaneSpec) dp3s_iospec_bio3s_send(s Dp3sStateLocal, t Place) {
	forall v Val :: { TriggerBodyIoSend(v) } (
		match v {
			case ValPkt{_, _}:
>>>>>>> master
				// Gobra requires the triggering term to occur inside the qtfier body,
				// otherwise we get an error in the call to dp3s_iospec_bio3s_send_T.
				// We named the variable `_ignored` because using `_` here leads to a strange
				// type error.
				let _ignored := TriggerBodyIoSend(v) in
				(dp.Valid() && dp.dp3s_iospec_bio3s_send_guard(s, t, v) ==>
					CBioIO_bio3s_send(t, v) &&
					dp.dp3s_iospec_ordered(s, dp3s_iospec_bio3s_send_T(t, v)))
<<<<<<< HEAD
			case IO_val_Unsupported{_, _}:
=======
			case ValUnsupported{_, _}:
>>>>>>> master
				// Gobra requires the triggering term to occur inside the qtfier body,
				// otherwise we get an error in the call to dp3s_iospec_bio3s_send_T.
				// We named the variable `_ignored` because using `_` here leads to a strange
				// type error.
				let _ignored := TriggerBodyIoSend(v) in
				(CBioIO_bio3s_send(t, v) &&
				dp.dp3s_iospec_ordered(s, dp3s_iospec_bio3s_send_T(t, v)))
			default:
				true
		})
}

ghost
decreases
<<<<<<< HEAD
pure func TriggerBodyIoSend(v IO_val) BogusTrigger { return BogusTrigger{} }
=======
pure func TriggerBodyIoSend(v Val) BogusTrigger { return BogusTrigger{} }
>>>>>>> master

pred CBioIO_bio3s_recv(t Place)

ghost
requires CBioIO_bio3s_recv(t)
decreases
pure func dp3s_iospec_bio3s_recv_T(t Place) Place

// We can safely make this assumption as Isabelle's IO-spec never
// receives the other IO values (Unit and Internal).
ghost
requires CBioIO_bio3s_recv(t)
ensures val.isValPkt || val.isValUnsupported
decreases
pure func dp3s_iospec_bio3s_recv_R(t Place) (val Val)

pred (dp DataPlaneSpec) dp3s_iospec_bio3s_recv(s Dp3sStateLocal, t Place) {
	CBioIO_bio3s_recv(t) &&
		(match dp3s_iospec_bio3s_recv_R(t) {
<<<<<<< HEAD
			case IO_val_Pkt2{?recvif, ?pkt}:
				dp.dp3s_iospec_ordered(
					dp3s_add_ibuf(s, recvif, pkt), dp3s_iospec_bio3s_recv_T(t))
			case IO_val_Unsupported{_, _}:
=======
			case ValPkt{?recvif, ?pkt}:
				dp.dp3s_iospec_ordered(
					dp3s_add_ibuf(s, recvif, pkt), dp3s_iospec_bio3s_recv_T(t))
			case ValUnsupported{_, _}:
>>>>>>> master
				dp.dp3s_iospec_ordered(s, dp3s_iospec_bio3s_recv_T(t))
			default:
				dp.dp3s_iospec_ordered(undefined(), dp3s_iospec_bio3s_recv_T(t))
		})
}

pred CBio_Skip(t Place)

ghost
requires CBio_Skip(t)
decreases
pure func dp3s_iospec_skip_T(t Place) Place

pred (dp DataPlaneSpec) dp3s_iospec_skip(s Dp3sStateLocal, t Place) {
	CBio_Skip(t) && dp.dp3s_iospec_ordered(s, dp3s_iospec_skip_T(t))
}

pred (dp DataPlaneSpec) dp3s_iospec_stop(s Dp3sStateLocal, t Place) {
	true
}

/** BIO operations **/
ghost
decreases
requires token(t) && CBio_IN_bio3s_enter(t, v)
ensures  token(old(CBio_IN_bio3s_enter_T(t, v)))
<<<<<<< HEAD
func Enter(ghost t Place, ghost v IO_val)
=======
func Enter(ghost t Place, ghost v Val)
>>>>>>> master

ghost
decreases
requires token(t) && CBio_IN_bio3s_xover(t, v)
ensures  token(old(dp3s_iospec_bio3s_xover_T(t, v)))
<<<<<<< HEAD
func Xover(ghost t Place, ghost v IO_val)
=======
func Xover(ghost t Place, ghost v Val)
>>>>>>> master

ghost
decreases
requires token(t) && CBio_IN_bio3s_exit(t, v)
ensures  token(old(dp3s_iospec_bio3s_exit_T(t, v)))
<<<<<<< HEAD
func Exit(ghost t Place, ghost v IO_val)
=======
func Exit(ghost t Place, ghost v Val)
>>>>>>> master

/** End of helper functions to perfrom BIO operations **/
