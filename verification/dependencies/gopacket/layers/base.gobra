// Copyright 2012 Google, Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

// +gobra

package layers

// BaseLayer is a convenience struct which implements the LayerData and
// LayerPayload functions of the Layer interface.
type BaseLayer struct {
	// Contents is the set of bytes that make up this layer.  IE: for an
	// Ethernet packet, this would be the set of bytes making up the
	// Ethernet frame.
	Contents []byte
	// Payload is the set of bytes contained by (but not part of) this
	// Layer.  Again, to take Ethernet as an example, this would be the
	// set of bytes encapsulated by the Ethernet protocol.
	Payload []byte
}

// LayerContents returns the bytes of the packet layer.
requires acc(&b.Contents, 1/10000)
requires acc(b.Contents, 1/10000)
requires forall i int :: { b.Contents[i] } 0 <= i && i < len(b.Contents) ==> acc(&b.Contents[i])
ensures acc(&b.Contents, 1/10000)
ensures acc(b.Contents, 1/10000)
ensures acc(res, 1/10000)
ensures forall i int :: 0 <= i && i < cap(b.Contents) ==> &res[i] == &(b.Contents[i])
func (b *BaseLayer) LayerContents() (res []byte) { return b.Contents }

// LayerPayload returns the bytes contained within the packet layer.
requires acc(&b.Payload, 1/10000)
requires acc(b.Payload, 1/10000)
requires forall i int :: { b.Payload[i] } 0 <= i && i < len(b.Payload) ==> acc(&b.Payload[i])
ensures acc(&b.Payload, 1/10000)
ensures acc(b.Payload, 1/10000)
ensures acc(res, 1/10000)
ensures forall i int :: 0 <= i && i < cap(b.Payload) ==> &res[i] == &(b.Payload[i])
func (b *BaseLayer) LayerPayload() (res []byte) { return b.Payload }
