// Copyright 2012 Google, Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

// +gobra

package gopacket

import (
	"errors"
)

// DecodeFeedback is used by DecodingLayer layers to provide decoding metadata.
type DecodeFeedback interface {
	pred Mem()
	// SetTruncated should be called if during decoding you notice that a packet
	// is shorter than internal layer variables (HeaderLength, or the like) say it
	// should be.  It sets packet.Metadata().Truncated.
	preserves Mem()
	decreases
	SetTruncated()
}

type nilDecodeFeedback struct{}

decreases
func (nilDecodeFeedback) SetTruncated() {}

pred (n nilDecodeFeedback) Mem() { true }

nilDecodeFeedback implements DecodeFeedback

type PacketBuilder interface {
	pred Mem()
	
	preserves Mem()
	decreases
	SetTruncated()
	// AddLayer should be called by a decoder immediately upon successful
	// decoding of a layer.
	requires l.Mem()
	preserves Mem()
	decreases
	AddLayer(l Layer)
	// The following functions set the various specific layers in the final
	// packet.  Note that if many layers call SetX, the first call is kept and all
	// other calls are ignored.

	preserves Mem()
	requires l.Mem()
	decreases
	SetLinkLayer(l LinkLayer)

	preserves Mem()
	requires l.Mem()
	decreases
	SetNetworkLayer(l NetworkLayer)

	preserves Mem()
	requires l.Mem()
	decreases
	SetTransportLayer(l TransportLayer)

	preserves Mem()
	requires l.Mem()
	decreases
	SetApplicationLayer(l ApplicationLayer)

	preserves Mem()
	requires l.Mem()
	decreases
	SetErrorLayer(l ErrorLayer)
	// NextDecoder should be called by a decoder when they're done decoding a
	// packet layer but not done with decoding the entire packet.  The next
	// decoder will be called to decode the last AddLayer's LayerPayload.
	// Because of this, NextDecoder must only be called once all other
	// PacketBuilder calls have been made.  Set*Layer and AddLayer calls after
	// NextDecoder calls will behave incorrectly.
	requires Mem()
	requires next.Mem()
	ensures Mem()
	NextDecoder(next Decoder) error
	// DumpPacketData is used solely for decoding.  If you come across an error
	// you need to diagnose while processing a packet, call this and your packet's
	// data will be dumped to stderr so you can create a test.  This should never
	// be called from a production decoder.
	preserves Mem()
	decreases
	DumpPacketData()
	// DecodeOptions returns the decode options
	preserves Mem()
	decreases
	DecodeOptions() *DecodeOptions
}

// Decoder is an interface for logic to decode a packet layer.  Users may
// implement a Decoder to handle their own strange packet types, or may use one
// of the many decoders available in the 'layers' subpackage to decode things
// for them.
type Decoder interface {
	pred Mem()
	// Decode decodes the bytes of a packet, sending decoded values and other
	// information to PacketBuilder, and returning an error if unsuccessful.  See
	// the PacketBuilder documentation for more details.
	preserves Mem()
	preserves p.Mem()
	requires acc(b)
	decreases
	Decode(b []byte, p PacketBuilder) error
}

// LayerTypePayload is the layer type for a payload that we don't try to decode
// but treat as a success, IE: an application-level payload.
decreases
pure func LayerTypePayload() LayerType

// LayerTypeFragment is the layer type for a fragment of a layer transported
// by an underlying layer that supports fragmentation.
decreases
pure func LayerTypeFragment() LayerType
