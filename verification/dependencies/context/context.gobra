// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package context defines the Context type, which carries deadlines,
// cancellation signals, and other request-scoped values across API boundaries
// and between processes.
//
// Incoming requests to a server should create a Context, and outgoing
// calls to servers should accept a Context. The chain of function
// calls between them must propagate the Context, optionally replacing
// it with a derived Context created using WithCancel, WithDeadline,
// WithTimeout, or WithValue. When a Context is canceled, all
// Contexts derived from it are also canceled.
//
// The WithCancel, WithDeadline, and WithTimeout functions take a
// Context (the parent) and return a derived Context (the child) and a
// CancelFunc. Calling the CancelFunc cancels the child and its
// children, removes the parent's reference to the child, and stops
// any associated timers. Failing to call the CancelFunc leaks the
// child and its children until the parent is canceled or the timer
// fires. The go vet tool checks that CancelFuncs are used on all
// control-flow paths.
//
// Programs that use Contexts should follow these rules to keep interfaces
// consistent across packages and enable static analysis tools to check context
// propagation:
//
// Do not store Contexts inside a struct type; instead, pass a Context
// explicitly to each function that needs it. The Context should be the first
// parameter, typically named ctx:
//
// 	func DoSomething(ctx context.Context, arg Arg) error {
// 		// ... use ctx ...
// 	}
//
// Do not pass a nil Context, even if a function permits it. Pass context.TODO
// if you are unsure about which Context to use.
//
// Use context Values only for request-scoped data that transits processes and
// APIs, not for passing optional parameters to functions.
//
// The same Context may be passed to functions running in different goroutines;
// Contexts are safe for simultaneous use by multiple goroutines.
//
// See https://blog.golang.org/context for example code for a server that uses
// Contexts.

// +gobra

package context

import (
	"time"
	"github.com/scionproto/scion/verification/utils/definitions"
)

// A Context carries a deadline, a cancellation signal, and other values across
// API boundaries.
//
// Context's methods may be called by multiple goroutines simultaneously.
type Context interface {

	pred Mem()

	preserves acc(Mem(), definitions.ReadL20)
	Deadline() (deadline time.Time, ok bool)

	preserves acc(Mem(), definitions.ReadL20)
	ensures isClosed ==> c.Closed()
	ensures !isClosed && c != nil ==>
		acc(c.RecvChannel(), definitions.ReadL20)
	Done() (c <-chan struct{}, ghost isClosed bool)

	preserves acc(Mem(), definitions.ReadL20)
	ensures isClosed ==> e != nil && e.ErrorMem()
	Err() (e error, ghost isClosed bool)

	preserves acc(Mem(), definitions.ReadL20)
	requires acc(key.Mem(), _)
	ensures acc(key.Mem(), _)
	ensures acc(val.Mem(), _)
	Value(key interface{ pred Mem() }) (val interface{ pred Mem() })
}

preserves acc(parent.Mem(), definitions.ReadL20)
preserves acc(key.Mem(), definitions.ReadL20)
requires acc(val.Mem(), _)
ensures acc(val.Mem(), _) // `child` keeps partial permissions.
func WithValue(parent Context, key, val interface{ pred Mem() }) (child Context)

/* TODO ignoring closure dependent code for now.

type CancelFunc func()

requires acc(parent.Mem(), definitions.ReadL20)
ensures acc(parent.Mem(), definitions.ReadL20)
ensures acc(child.Mem(), definitions.ReadL20)
func WithCancel(parent Context) (child Context, cancel CancelFunc)

requires acc(parent.Mem(), definitions.ReadL20)
ensures acc(parent.Mem(), definitions.ReadL20)
ensures acc(child.Mem(), definitions.ReadL20)
func WithDeadline(parent Context, d time.Time) (child Context, cancel CancelFunc)

requires acc(parent.Mem(), definitions.ReadL20)
ensures acc(parent.Mem(), definitions.ReadL20)
ensures acc(child.Mem(), definitions.ReadL20)
func WithTimeout(parent Context, timeout time.Duration) (child Context, cancel CancelFunc)

*/
