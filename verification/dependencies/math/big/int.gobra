// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Signatures for the public declarations in file
// https://go.dev/src/math/big/int.go

// +gobra

package big

import "github.com/scionproto/scion/verification/utils/definitions"

// An Int represents a signed multi-precision integer.
// The zero value for an Int represents the value 0.
//
// Operations always take pointer arguments (*Int) rather
// than Int values, and each unique Int value requires
// its own unique *Int pointer. To "copy" an Int value,
// an existing (or newly allocated) Int must be set to
// a new value using the Int.Set method; shallow copies
// of Ints are not supported and may lead to errors.
type Int struct {
	neg bool // sign
	abs nat  // absolute value of the integer
}

pred (i *Int) Mem() {
	acc(i) && i.abs.Mem()
}

// NewInt allocates and returns a new Int set to x.
ensures n.Mem()
ensures n.toInt() == int(x)
decreases
func NewInt(x int64) (n *Int)

// Uint64 returns the uint64 representation of x.
// If x cannot be represented in a uint64, the result is undefined.
preserves acc(x.Mem(), definitions.ReadL13)
ensures unfolding acc(x.Mem(), definitions.ReadL13) in len(x.abs) * _W <= 64 ==> toInt(res) == x.abs.toInt()
decreases
func (x *Int) Uint64() (res uint64)

// TODO: This returns int when it should return a mathematical Integer
ghost
requires acc(i.Mem(), definitions.ReadL13)
decreases
pure func (i *Int) toInt() int {
	return (unfolding acc(i.Mem(), definitions.ReadL13) in i.neg) ? -((unfolding acc(i.Mem(), definitions.ReadL13) in i.abs.toInt())) : (unfolding acc(i.Mem(), definitions.ReadL13) in i.abs.toInt())
}

// TODO: This returns int when it should return a mathematical Integer
ghost
decreases
pure func toInt(n uint64) int
