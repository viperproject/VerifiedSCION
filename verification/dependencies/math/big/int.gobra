// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file implements signed multi-precision integers.

// +gobra

package big

// An Int represents a signed multi-precision integer.
// The zero value for an Int represents the value 0.
//
// Operations always take pointer arguments (*Int) rather
// than Int values, and each unique Int value requires
// its own unique *Int pointer. To "copy" an Int value,
// an existing (or newly allocated) Int must be set to
// a new value using the Int.Set method; shallow copies
// of Ints are not supported and may lead to errors.
type Int struct {
	neg bool // sign
	abs nat  // absolute value of the integer
}

pred (i *Int) Mem() {
	acc(i) && (i.abs).Mem()
}

// NewInt allocates and returns a new Int set to x.
ensures n.Mem()
ensures n.toInt() == x
decreases
func NewInt(x int64) (n *Int)


ghost
requires acc(i.Mem(), 1/10000)
pure func (i *Int) toInt() int64 {
	return (unfolding acc(i.Mem(), 1/10000) in i.neg) ? -((unfolding acc(i.Mem(), 1/10000) in i.abs.toInt())) : (unfolding acc(i.Mem(), 1/10000) in i.abs.toInt())
}
