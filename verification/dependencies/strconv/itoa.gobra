// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in https://golang.org/LICENSE

// Signatures for the public declarations in file
// https://github.com/golang/go/blob/master/src/strconv/itoa.gobra

// +gobra

package strconv

// import "math/bits"

const fastSmalls = true // enable fast path for small integers

// FormatUint returns the string representation of i in the given base,
// for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z'
// for digit values >= 10.
requires i >= 0
requires 2 <= base && base <= 36
decreases
func FormatUint(i uint64, base int) string

// FormatInt returns the string representation of i in the given base,
// for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z'
// for digit values >= 10.
requires 2 <= base && base <= 36
decreases
func FormatInt(i int64, base int) string

// Itoa is equivalent to FormatInt(int64(i), 10).
decreases
func Itoa(i int) string

// AppendInt appends the string form of the integer i,
// as generated by FormatInt, to dst and returns the extended buffer.
requires 2 <= base && base <= 36
requires forall i int :: { &dst[i] } 0 <= i && i < len(dst) ==> acc(&dst[i])
ensures  forall i int :: { &res[i] } 0 <= i && i < len(res) ==> acc(&res[i])
decreases
func AppendInt(dst []byte, i int64, base int) (res []byte)

// AppendUint appends the string form of the unsigned integer i,
// as generated by FormatUint, to dst and returns the extended buffer.
requires 2 <= base && base <= 36
requires forall i int :: { &dst[i] } 0 <= i && i < len(dst) ==> acc(&dst[i])
ensures  forall i int :: { &res[i] } 0 <= i && i < len(res) ==> acc(&res[i])
decreases
func AppendUint(dst []byte, i uint64, base int) (res []byte)
