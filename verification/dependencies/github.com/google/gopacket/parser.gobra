// Copyright 2012 Google, Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

// +gobra

package gopacket

import (
	"github.com/scionproto/scion/verification/utils/slices"
	def "github.com/scionproto/scion/verification/utils/definitions"
)

// TODO: Uncomment when https://github.com/viperproject/gobra/issues/503 is fixed
//type DecodingLayerFunc func([]byte, *[]LayerType) (LayerType, error)

// DecodingLayerFunc decodes given packet and stores decoded LayerType
// values into specified slice. Returns either first encountered
// unsupported LayerType value or decoding error. In case of success,
// returns (LayerTypeZero, nil).
preserves acc(slices.AbsSlice_Bytes(b, 0, len(b)), def.ReadL13)
preserves acc(ltypes, def.ReadL13) && acc(*ltypes, def.ReadL13)
ensures err != nil ==> err.ErrorMem()
func decodingLayerFunc_spec(b []byte, ltypes *[]LayerType) (l LayerType, err error)

type DecodingLayer interface {
	pred NonInitMem()
	pred Mem(ubuf []byte)

	requires  NonInitMem()
	requires  df != nil
	preserves slices.AbsSlice_Bytes(data, 0, len(data))
	preserves df.Mem()
	ensures   res == nil ==> Mem(data)
	ensures   res != nil ==> (NonInitMem() && res.ErrorMem())
	decreases
	DecodeFromBytes(data []byte, df DecodeFeedback) (res error)

	ensures res != nil
	ensures typeOf(res) == LayerType
	decreases
	CanDecode() (res LayerClass)

	preserves acc(Mem(ubuf), def.ReadL20)
	decreases
	NextLayerType(ghost ubuf []byte) LayerType

	preserves Mem(ubuf)
	ensures   0 <= start && start <= end && end <= len(ubuf)
	ensures   len(res) == end - start
	ensures   len(res) != 0 ==> res === ubuf[start:end]
	ensures   len(res) == 0 ==> (res == nil || res === ubuf[start:end])
	decreases
	LayerPayload(ghost ubuf []byte) (res []byte, ghost start int, ghost end int)

	ghost
	requires Mem(ub)
	ensures  NonInitMem()
	decreases
	DowngradePerm(ghost ub []byte)
}
