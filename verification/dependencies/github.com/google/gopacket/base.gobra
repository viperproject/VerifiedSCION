// Copyright 2012 Google, Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

// +gobra

package gopacket

import def "github.com/scionproto/scion/verification/utils/definitions"
import "github.com/scionproto/scion/verification/utils/slices"

type Layer interface {
	pred Mem(ub []byte)

	pure
	decreases
	LayerType() LayerType

	// (VerifiedSCION) not used in the dataplane
	requires def.Uncallable()
	LayerContents() (res []byte)

	requires Mem(ub)
	ensures  slices.AbsSlice_Bytes(res, 0, len(res))
	ensures  slices.AbsSlice_Bytes(res, 0, len(res)) --* Mem(ub)
	decreases
	LayerPayload(ghost ub []byte) (res []byte)
}

type Payload []byte

pred (p Payload) Mem(ub []byte) { acc(p) }

decreases
pure func (p Payload) LayerType() LayerType {
	return LayerTypePayload
}

requires def.Uncallable()
func (p Payload) LayerContents() (res []byte) {
	res = []byte(p)
}

requires p.Mem(ub)
ensures  res == nil
ensures  slices.AbsSlice_Bytes(res, 0, len(res))
ensures  slices.AbsSlice_Bytes(res, 0, len(res)) --* p.Mem(ub)
decreases
func (p Payload) LayerPayload(ghost ub []byte) (res []byte) {
	unfold p.Mem(ub)
	res = nil
	fold slices.AbsSlice_Bytes(res, 0, len(res))
	package slices.AbsSlice_Bytes(res, 0, len(res)) --* p.Mem(ub) {
		unfold slices.AbsSlice_Bytes(res, 0, len(res))
		fold p.Mem(ub)
	}
}

requires p.Mem(ub)
ensures  slices.AbsSlice_Bytes(res, 0, len(res))
ensures  slices.AbsSlice_Bytes(res, 0, len(res)) --* p.Mem(ub)
ensures  res === []byte(p)
decreases
func (p Payload) Payload(ghost ub []byte) (res []byte) {
	unfold p.Mem(ub)
	res = []byte(p)
	assert forall i int :: 0 <= i && i < len(p) ==> acc(&p[i])
	fold slices.AbsSlice_Bytes(res, 0, len(res))
	package slices.AbsSlice_Bytes(res, 0, len(res)) --* p.Mem(ub) {
		unfold slices.AbsSlice_Bytes(res, 0, len(res))
		fold p.Mem(ub)
	}
}

Payload implements Layer
Payload implements ApplicationLayer

type LinkLayer interface {
	Layer

	requires false
	decreases
	LinkFlow() Flow
}

type NetworkLayer interface {
	Layer

	requires false
	decreases
	NetworkFlow() Flow
}

type TransportLayer interface {
	Layer

	preserves acc(Mem(ub), def.ReadL15)
	decreases
	TransportFlow(ghost ub []byte) Flow
}

type ApplicationLayer interface {
	Layer

	requires Mem(ub)
	ensures  slices.AbsSlice_Bytes(res, 0, len(res))
	ensures  slices.AbsSlice_Bytes(res, 0, len(res)) --* Mem(ub)
	decreases
	Payload(ghost ub []byte) (res []byte)
}

type ErrorLayer interface {
	Layer

	preserves Mem(ub)
	decreases
	Error(ghost ub []byte) error
}
