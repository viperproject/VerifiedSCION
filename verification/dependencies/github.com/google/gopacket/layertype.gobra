// Copyright 2012 Google, Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

// +gobra

package gopacket

import ms "github.com/scionproto/scion/verification/utils/monoset"
import sl "github.com/scionproto/scion/verification/utils/slices"

/** Types **/
type LayerType int64

type layerTypeMetadata struct {
	inUse bool
	LayerTypeMetadata
}

type LayerTypeMetadata struct {
	Name string
	Decoder Decoder
}

/** End of Types **/

/** Constants **/
const maxLayerType = 2000

ghost const MaxLayerType = maxLayerType
// Arbitrary bounds for valid LayerTypes.
// It is unlikely that this imposes any restriciton in practice.
ghost const AbsMinLayerType int64 = -1000
ghost const AbsMaxLayerType int64 = 5000
ghost var RegisteredTypes = ms.Alloc(AbsMinLayerType, AbsMaxLayerType)

/** End of Constants **/

/** Predicates and ghost helper members **/
pred PkgMem() {
	acc(&ltMeta)                               &&
	acc(&ltMetaMap)                            &&
	acc(ltMetaMap)                             &&
	acc(&DecodersByLayerName, _)               &&
	acc(DecodersByLayerName)                   &&
	RegisteredTypes.Inv()                      &&
	AbsMinLayerType <= 0                       &&
	int64(maxLayerType) <= AbsMaxLayerType     &&
	RegisteredTypes.Start == AbsMinLayerType   &&
	RegisteredTypes.End == AbsMaxLayerType     &&
	(forall t LayerType :: { &ltMeta[t].inUse } 0 <= t && t < maxLayerType ==>
		ltMeta[t].inUse == RegisteredTypes.FContains(int64(t))) &&
	(forall t LayerType :: { ltMetaMap[t].inUse } ((AbsMinLayerType <= t && t < 0) || (maxLayerType <= t && t <= AbsMaxLayerType)) ==>
		ltMetaMap[t].inUse == RegisteredTypes.FContains(int64(t)))
}

ghost
requires PkgMem()
decreases
pure func Registered(t LayerType) (res bool) {
	return unfolding acc(PkgMem(), _) in
		0 <= t && t < MaxLayerType?
			ltMeta[t].inUse :
			(t in domain(ltMetaMap) && ltMetaMap[t].inUse)
}

ghost
requires acc(&ltMeta)         &&
	acc(&ltMetaMap)           &&
	acc(ltMetaMap)            &&
	acc(&DecodersByLayerName) &&
	acc(DecodersByLayerName)
decreases
pure func registeredDuringInit(t LayerType) (res bool) {
	return (0 <= t && t < MaxLayerType? ltMeta[t].inUse : (t in domain(ltMetaMap) && ltMetaMap[t].inUse))
}

// cannot be made ghost, even though it is morally so
mayInit
requires acc(&ltMeta) &&
	acc(&ltMetaMap)   &&
	acc(ltMetaMap)    &&
	acc(&DecodersByLayerName, _) &&
	acc(DecodersByLayerName)
requires forall t LayerType :: { registeredDuringInit(t) } !registeredDuringInit(t)
requires RegisteredTypes.Inv()
requires RegisteredTypes.Start == AbsMinLayerType
requires RegisteredTypes.End == AbsMaxLayerType
requires forall t LayerType :: { &ltMeta[t].inUse } 0 <= t && t < maxLayerType ==>
	ltMeta[t].inUse == RegisteredTypes.FContains(int64(t))
requires forall t LayerType :: { ltMetaMap[t].inUse } (AbsMinLayerType <= t && t < 0) || (maxLayerType <= t && t <= AbsMaxLayerType) ==>
	ltMetaMap[t].inUse == RegisteredTypes.FContains(int64(t))
ensures  PkgMem()
ensures  forall t LayerType :: { Registered(t) } !Registered(t)
decreases
func satisfyGlobalVarInitPre() int {
	fold PkgMem()
	assert forall t LayerType :: { Registered(t) } old(!registeredDuringInit(t)) ==> !Registered(t)
	assert unfolding PkgMem() in forall t LayerType :: { registeredDuringInit(t) } !registeredDuringInit(t)
	assert forall t LayerType :: { Registered(t) } !Registered(t)
	return 1
}
/** End of predicates and ghost helper members **/

trusted
mayInit
ensures d.Mem() && d.Mem() // d.Mem() must be duplicable!
decreases _
func generateDecodeUnknown() (d Decoder)

trusted
mayInit
ensures d.Mem()
decreases _
func generateDecodePayload() (d Decoder)

trusted
mayInit
ensures d.Mem()
decreases _
func generateDecodeFragment() (d Decoder)

/** Globals **/

var ltMeta@ [maxLayerType]layerTypeMetadata
var ltMetaMap@ = map[LayerType]layerTypeMetadata{}
// DecodersByLayerName maps layer names to decoders for those layers.
// This allows users to specify decoders by name to a program and have that
// program pick the correct decoder accordingly.
var DecodersByLayerName@ = map[string]Decoder{}

/** Globals not originally declared in this file **/
/** Vars defined in decode.go that are required to establish preconditions of RegisterLayer. **/
// TODO: specify and verify the creation of these decoders
var DecodeUnknown = generateDecodeUnknown()
var DecodePayload = generateDecodePayload()
var DecodeFragment = generateDecodeFragment()

// This call allows us to satisfy the preconditions of RegisterLayerType.
var _ = satisfyGlobalVarInitPre()

var LayerTypeZero = RegisterLayerType(0, LayerTypeMetadata{Name: "Unknown", Decoder: DecodeUnknown})
var LayerTypeDecodeFailure = RegisterLayerType(1, LayerTypeMetadata{Name: "DecodeFailure", Decoder: DecodeUnknown})
var LayerTypePayload = RegisterLayerType(2, LayerTypeMetadata{Name: "Payload", Decoder: DecodePayload})
var LayerTypeFragment = RegisterLayerType(3, LayerTypeMetadata{Name: "Fragment", Decoder: DecodeFragment})

/** End of globals not originally declared in this file **/
/** End of Globals **/

/** Ghost init operations **/
func init() {
	assume false
}
/** End of ghost init operations **/

/** Actual Methods **/
mayInit
requires AbsMinLayerType <= num && num <= AbsMaxLayerType
requires PkgMem()
requires RegisteredTypes.DoesNotContain(int64(num))
requires meta.Decoder != nil ==> meta.Decoder.Mem()
ensures  PkgMem()
ensures  RegisteredTypes.Contains(int64(num))
ensures  Registered(LayerType(num))
ensures  res == LayerType(num)
decreases
func RegisterLayerType(num int, meta LayerTypeMetadata) (res LayerType) {
	unfold PkgMem()
	RegisteredTypes.DoesNotContainImpliesNotFContains(int64(num))
	if 0 <= num && num < maxLayerType {
		if ltMeta[num].inUse {
			panic("Layer type already exists")
		}
	} else {
		if ltMetaMap[LayerType(num)].inUse {
			panic("Layer type already exists")
		}
	}
	fold PkgMem()
	return OverrideLayerType(num, meta)
}

mayInit
requires PkgMem()
requires RegisteredTypes.DoesNotContain(int64(num))
requires meta.Decoder != nil ==> meta.Decoder.Mem()
ensures  PkgMem()
ensures  RegisteredTypes.Contains(int64(num))
ensures  Registered(LayerType(num))
ensures  res == LayerType(num)
decreases
func OverrideLayerType(num int, meta LayerTypeMetadata) (res LayerType) {
	unfold PkgMem()
	RegisteredTypes.Add(int64(num))
	RegisteredTypes.ContainsImpliesFContains(int64(num))
	defer fold PkgMem()
	if 0 <= num && num < maxLayerType {
		ltMeta[num] = layerTypeMetadata{
			inUse:             true,
			LayerTypeMetadata: meta,
		}
	} else {
		ltMetaMap[LayerType(num)] = layerTypeMetadata{
			inUse:             true,
			LayerTypeMetadata: meta,
		}
	}
	DecodersByLayerName[meta.Name] = meta.Decoder
	return LayerType(num)
}

trusted
preserves c.Mem()
preserves sl.Bytes(data, 0, len(data))
ensures   err != nil ==> err.ErrorMem()
decreases
func (t LayerType) Decode(data []byte, c PacketBuilder) (err error)
