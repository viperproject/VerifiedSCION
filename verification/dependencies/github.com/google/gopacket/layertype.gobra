// Copyright 2012 Google, Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

// +gobra

initEnsures LayerTypesMem()
initEnsures LayerTypeZero == 0
initEnsures LayerTypeDecodeFailure == 1
initEnsures LayerTypePayload == 2
initEnsures LayerTypeFragment == 3
initEnsures Registered(LayerTypeZero)
initEnsures Registered(LayerTypeDecodeFailure)
initEnsures Registered(LayerTypePayload)
initEnsures Registered(LayerTypeFragment)
initEnsures forall t LayerType :: t < 0 ==> !Registered(t)
initEnsures forall t LayerType :: 3 < t ==> !Registered(t)
package gopacket

import "github.com/scionproto/scion/verification/utils/slices"

/** Types **/
type LayerType int64

type layerTypeMetadata struct {
	inUse bool
	LayerTypeMetadata
}

type LayerTypeMetadata struct {
	Name string
	Decoder Decoder
}

/** End of Types **/

/** Constants **/
const maxLayerType = 2000
ghost const MaxLayerType = maxLayerType // can be used for spec purposes

/** End of Constants **/

/** Predicates and ghost helper members **/
pred LayerTypesMem() {
	acc(&ltMeta) && acc(&ltMetaMap) && acc(ltMetaMap) && acc(&DecodersByLayerName, _) && acc(DecodersByLayerName)
}

ghost
requires acc(LayerTypesMem(), _)
ensures  res == unfolding acc(LayerTypesMem(), _) in (0 <= t && t < MaxLayerType? ltMeta[t].inUse : (t in domain(ltMetaMap) && ltMetaMap[t].inUse))
decreases
pure func Registered(t LayerType) (res bool) {
	return unfolding acc(LayerTypesMem(), _) in
		(0 <= t && t < MaxLayerType? ltMeta[t].inUse : (t in domain(ltMetaMap) && ltMetaMap[t].inUse))
}

ghost
requires acc(&ltMeta, _) && acc(&ltMetaMap, _) && acc(ltMetaMap, _) && acc(&DecodersByLayerName, _) && acc(DecodersByLayerName, _)
ensures  res == (0 <= t && t < MaxLayerType? ltMeta[t].inUse : (t in domain(ltMetaMap) && ltMetaMap[t].inUse))
decreases
pure func registeredDuringInit(t LayerType) (res bool) {
	return (0 <= t && t < MaxLayerType? ltMeta[t].inUse : (t in domain(ltMetaMap) && ltMetaMap[t].inUse))
}

// cannot be made ghost, even though it is morally so
requires acc(&ltMeta) && acc(&ltMetaMap) && acc(ltMetaMap) && acc(&DecodersByLayerName, _) && acc(DecodersByLayerName)
requires forall t LayerType :: !registeredDuringInit(t)
ensures  LayerTypesMem()
ensures  forall t LayerType :: !Registered(t)
decreases
func satisfyGlobalVarInitPre() int {
	fold LayerTypesMem()
	assert forall t LayerType :: old(!registeredDuringInit(t)) ==> !Registered(t)
	assert unfolding LayerTypesMem() in (forall t LayerType :: !registeredDuringInit(t))
	assert forall t LayerType :: !Registered(t)
	return 1
}
/** End of predicates and ghost helper members **/

/** Globals **/
var ltMeta@ [maxLayerType]layerTypeMetadata
var ltMetaMap@ = map[LayerType]layerTypeMetadata{}
// DecodersByLayerName maps layer names to decoders for those layers.
// This allows users to specify decoders by name to a program and have that
// program pick the correct decoder accordingly.
var DecodersByLayerName@ = map[string]Decoder{}

/** Globals not originally declared in this file **/
/** Vars defined in decode.go that are required to establish preconditions of RegisterLayer. **/
// TODO: specify and verify the creation of these decoders
ensures d.Mem() && d.Mem() // d.Mem() must be duplicable!
decreases _
func generateDecodeUnknown() (d Decoder)
var DecodeUnknown = generateDecodeUnknown()

ensures d.Mem()
decreases _
func generateDecodePayload() (d Decoder)
var DecodePayload = generateDecodePayload()

ensures d.Mem()
decreases _
func generateDecodeFragment() (d Decoder)
var DecodeFragment = generateDecodeFragment()
/** End of Vars defined in decode.go that are required to establish preconditions of RegisterLayer. **/

// This call allows us to satisfy the preconditions of RegisterLayerType.
var _ = satisfyGlobalVarInitPre()
// LayerTypeZero is an invalid layer type, but can be used to determine whether
// layer type has actually been set correctly.
var LayerTypeZero = RegisterLayerType(0, LayerTypeMetadata{Name: "Unknown", Decoder: DecodeUnknown})

// LayerTypeDecodeFailure is the layer type for the default error layer.
var LayerTypeDecodeFailure = RegisterLayerType(1, LayerTypeMetadata{Name: "DecodeFailure", Decoder: DecodeUnknown})

// LayerTypePayload is the layer type for a payload that we don't try to decode
// but treat as a success, IE: an application-level payload.
var LayerTypePayload = RegisterLayerType(2, LayerTypeMetadata{Name: "Payload", Decoder: DecodePayload})

// LayerTypeFragment is the layer type for a fragment of a layer transported
// by an underlying layer that supports fragmentation.
var LayerTypeFragment = RegisterLayerType(3, LayerTypeMetadata{Name: "Fragment", Decoder: DecodeFragment})

/** End of globals not originally declared in this file **/
/** End of Globals **/

/** Ghost init operations **/
func init() {
	assert forall t LayerType :: (t != 0 && t != 1 && t != 2 && t != 3) ==> !Registered(t)
	assert forall t LayerType :: t < 0 ==> !Registered(t)
	assert forall t LayerType :: 3 < t ==> !Registered(t)
}
/** End of ghost init operations **/

/** Actual Methods **/
requires LayerTypesMem()
requires !Registered(LayerType(num))
requires meta.Decoder != nil ==> meta.Decoder.Mem()
ensures  LayerTypesMem()
ensures  forall t LayerType :: t != LayerType(num) ==> old(Registered(t)) == Registered(t)
ensures  Registered(LayerType(num))
ensures  res == LayerType(num)
decreases
func RegisterLayerType(num int, meta LayerTypeMetadata) (res LayerType) {
	unfold LayerTypesMem()
	if 0 <= num && num < maxLayerType {
		if ltMeta[num].inUse {
			panic("Layer type already exists")
		}
	} else {
		if ltMetaMap[LayerType(num)].inUse {
			panic("Layer type already exists")
		}
	}
	fold LayerTypesMem()
	return OverrideLayerType(num, meta)
}

requires LayerTypesMem()
requires meta.Decoder != nil ==> meta.Decoder.Mem()
ensures  LayerTypesMem()
ensures  forall t LayerType :: t != LayerType(num) ==> old(Registered(t)) == Registered(t)
ensures  Registered(LayerType(num))
ensures  res == LayerType(num)
decreases
func OverrideLayerType(num int, meta LayerTypeMetadata) (res LayerType) {
	unfold LayerTypesMem()
	defer fold LayerTypesMem()
	if 0 <= num && num < maxLayerType {
		ltMeta[num] = layerTypeMetadata{
			inUse:             true,
			LayerTypeMetadata: meta,
		}
	} else {
		ltMetaMap[LayerType(num)] = layerTypeMetadata{
			inUse:             true,
			LayerTypeMetadata: meta,
		}
	}
	DecodersByLayerName[meta.Name] = meta.Decoder
	return LayerType(num)
}

preserves c.Mem()
preserves slices.AbsSlice_Bytes(data, 0, len(data))
ensures err != nil ==> err.ErrorMem()
decreases
func (t LayerType) Decode(data []byte, c PacketBuilder) (err error)

pred (t LayerType) Mem() { true }
