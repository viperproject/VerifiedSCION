// Copyright 2018 The Prometheus Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Adapted from https://github.com/prometheus/client_golang/blob/master/prometheus/promauto/auto.go

// +gobra

package promauto

import "github.com/prometheus/client_golang/prometheus"

// NewCounter works like the function of the same name in the prometheus package
// but it automatically registers the Counter with the
// prometheus.DefaultRegisterer. If the registration fails, NewCounter panics.
requires opts.ConstLabels != nil ==> acc(opts.ConstLabels)
ensures  c.Mem()
decreases _
func NewCounter(opts prometheus.CounterOpts) (c prometheus.Counter)

// NewCounterVec works like the function of the same name in the prometheus
// package but it automatically registers the CounterVec with the
// prometheus.DefaultRegisterer. If the registration fails, NewCounterVec
// panics.
requires opts.ConstLabels != nil ==> acc(opts.ConstLabels)
requires forall i int :: 0 <= i && i < len(labelNames) ==> acc(&labelNames[i])
ensures  c.Mem()
decreases _
func NewCounterVec(opts prometheus.CounterOpts, labelNames []string) (c *prometheus.CounterVec)

// NewGauge works like the function of the same name in the prometheus package
// but it automatically registers the Gauge with the
// prometheus.DefaultRegisterer. If the registration fails, NewGauge panics.
requires opts.ConstLabels != nil ==> acc(opts.ConstLabels)
ensures  g.Mem()
decreases _
func NewGauge(opts prometheus.GaugeOpts) (g prometheus.Gauge)

// NewGaugeVec works like the function of the same name in the prometheus
// package but it automatically registers the GaugeVec with the
// prometheus.DefaultRegisterer. If the registration fails, NewGaugeVec panics.
requires opts.ConstLabels != nil ==> acc(opts.ConstLabels)
requires forall i int :: 0 <= i && i < len(labelNames) ==> acc(&labelNames[i])
ensures  g.Mem()
decreases _
func NewGaugeVec(opts prometheus.GaugeOpts, labelNames []string) (g *prometheus.GaugeVec)