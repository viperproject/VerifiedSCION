// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Cipher block chaining (CBC) mode.

// CBC provides confidentiality by xoring (chaining) each plaintext block
// with the previous ciphertext block before applying the block cipher.

// See NIST SP 800-38A, pp 10-11

// Originally taken from https://cs.opensource.google/go/go/+/refs/tags/go1.19:src/crypto/cipher/cbc.go

// +gobra

package cipher

import "github.com/scionproto/scion/verification/utils/slices"

// NewCBCEncrypter returns a BlockMode which encrypts in cipher block chaining
// mode, using the given Block. The length of iv must be the same as the
// Block's block size.
trusted
requires b != nil && b.Mem()
requires len(iv) == b.BlockSize()
requires slices.AbsSlice_Bytes(iv, 0, len(iv))
ensures  result.Mem()
decreases _
func NewCBCEncrypter(b Block, iv []byte) (result BlockMode) {
	if len(iv) != b.BlockSize() {
		panic("cipher.NewCBCEncrypter: IV length must equal block size")
	}
	if cbc, ok := b.(cbcEncAble); ok {
		return cbc.NewCBCEncrypter(iv)
	}
	return (*cbcEncrypter)(newCBC(b, iv))
}