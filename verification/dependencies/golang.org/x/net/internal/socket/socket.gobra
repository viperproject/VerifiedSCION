// Specification for package "golang.org/x/net/internal/socket"
// Based on file https://github.com/golang/net/blob/master/internal/socket/socket.go

// This file is specialized for the case where all instances m of message
// satisfy the property len(m.Buffers) == 1, which is the case in the router.
// The old file (socket.gobra.old) contains more general definitions,
// but this is unnecessary for the SCION router and requires us proving
// many additional lemmas, e.g., that the following is injective:
// 	forall i int :: { &m.Buffers[i] } 0 <= i && i < len(m.Buffers) ==> acc(&m.Buffers[i])

// +gobra

package socket

import (
	"net"

	sl "github.com/scionproto/scion/verification/utils/slices"
)


// A Message represents an IO message.
type Message struct {
	// When writing, the Buffers field must contain at least one
	// byte to write.
	// When reading, the Buffers field will always contain a byte
	// to read.
	Buffers [][]byte

	// OOB contains protocol-specific control or miscellaneous
	// ancillary data known as out-of-band data.
	OOB []byte

	// Addr specifies a destination address when writing.
	// It can be nil when the underlying protocol of the raw
	// connection uses connection-oriented communication.
	// After a successful read, it may contain the source address
	// on the received packet.
	Addr net.Addr

	N     int // # of bytes read or written from/to Buffers
	NN    int // # of bytes read or written from/to OOB
	Flags int // protocol-specific information on the received message

	// (VerifiedSCION) the following are, morally, ghost fields:
	// is it still ok to read the buffers and Addr of the Message?
	IsActive bool
	// do we have a fixed amount of perms to the Addr a wildcard amount?
	WildcardPerm bool
}

pred (m *Message) Mem() {
	acc(m) &&
	len(m.Buffers) == 1 &&
	acc(&m.Buffers[0]) &&
	(m.IsActive ==> sl.AbsSlice_Bytes(m.Buffers[0], 0, len(m.Buffers[0]))) &&
	sl.AbsSlice_Bytes(m.OOB, 0, len(m.OOB)) &&
	// typeOf(m.Addr) == type[*net.UDPAddr] &&
	((m.Addr != nil && m.IsActive && !m.WildcardPerm) ==> m.Addr.Mem()) &&
	((m.Addr != nil && m.IsActive && m.WildcardPerm) ==> acc(m.Addr.Mem(), _)) &&
	0 <= m.N
}

pred (m *Message) MemWithoutHalf() {
	acc(m, 1/2) &&
	len(m.Buffers) == 1 &&
	acc(&m.Buffers[0]) &&
	(m.IsActive ==> sl.AbsSlice_Bytes(m.Buffers[0], 0, len(m.Buffers[0]))) &&
	sl.AbsSlice_Bytes(m.OOB, 0, len(m.OOB)) &&
	// typeOf(m.Addr) == type[*net.UDPAddr] &&
	((m.Addr != nil && m.IsActive && !m.WildcardPerm) ==> m.Addr.Mem()) &&
	((m.Addr != nil && m.IsActive && m.WildcardPerm) ==> acc(m.Addr.Mem(), _)) &&
	0 <= m.N
}

ghost
requires acc(m.Mem(), _)
decreases
pure func (m *Message) HasWildcardPermAddr() bool {
	return unfolding acc(m.Mem(), _) in m.WildcardPerm
}

ghost
requires acc(m.Mem(), _)
decreases
pure func (m *Message) HasActiveBuffers() bool {
	return unfolding acc(m.Mem(), _) in m.IsActive
}

ghost
requires acc(m.Mem(), _)
decreases
pure func (m *Message) GetAddr() net.Addr {
	return unfolding acc(m.Mem(), _) in m.Addr
}

ghost
requires acc(m.Mem(), _)
decreases
pure func (m *Message) GetMessage() Message {
	return unfolding acc(m.Mem(), _) in *m
}

ghost
requires acc(m.MemWithoutHalf(), _)
decreases
pure func (m *Message) GetAddrWithoutHalf() net.Addr {
	return unfolding acc(m.MemWithoutHalf(), _) in m.Addr
}

ghost
requires acc(m.Mem(), _)
decreases
pure func (m *Message) GetBuffer() []byte {
	return unfolding acc(m.Mem(), _) in m.Buffers[0]
}

// TODO: drop
// Only defined for the case where lenBuffers == 1
ghost
requires acc(m.Mem(), _)
decreases
pure func (m *Message) GetFstBuffer() []byte {
	return unfolding acc(m.Mem(), _) in m.Buffers[0]
}

// TODO: drop
// Only defined for the case where lenBuffers == 1
ghost
requires acc(m.Mem(), _)
decreases
pure func (m *Message) GetN() int {
	return unfolding acc(m.Mem(), _) in m.N
}

ghost
requires m.Mem()
ensures  acc(m, 1/2) && m.MemWithoutHalf()
ensures  old(m.GetAddr()) === m.GetAddrWithoutHalf()
ensures  m.N == old(unfolding m.Mem() in m.N)
ensures  m.Buffers === old(unfolding m.Mem() in m.Buffers)
ensures  old(m.GetFstBuffer()) === unfolding m.MemWithoutHalf() in m.Buffers[0]
ensures  old(m.GetN()) == m.N
ensures  old(m.HasWildcardPermAddr()) == m.WildcardPerm
ensures  old(m.HasActiveBuffers()) == m.IsActive
ensures  old(m.GetMessage()) === *m
decreases
func (m *Message) SplitPerm() {
	unfold m.Mem()
	fold m.MemWithoutHalf()
}

ghost
requires acc(m, 1/2) && m.MemWithoutHalf()
ensures  m.Mem()
ensures  m.GetAddr() === old(m.GetAddrWithoutHalf())
ensures  old(m.N) == unfolding m.Mem() in m.N
ensures  m.GetFstBuffer() === old(unfolding m.MemWithoutHalf() in m.Buffers[0])
ensures  unfolding m.Mem() in m.Buffers === old(m.Buffers)
ensures  m.GetN() == old(m.N)
ensures  m.HasWildcardPermAddr() == old(m.WildcardPerm)
ensures  m.HasActiveBuffers() == old(m.IsActive)
ensures  m.GetMessage() === old(*m)
decreases
func (m *Message) CombinePerm() {
	unfold m.MemWithoutHalf()
	fold m.Mem()
}

ghost
requires forall j int :: { &msgs[j] } 0 <= j && j < len(msgs) ==> msgs[j].Mem()
ensures  forall j int :: { &msgs[j] } 0 <= j && j < len(msgs) ==> acc(&msgs[j], 1/2) && msgs[j].MemWithoutHalf()
ensures  forall j int :: { &msgs[j] } 0 <= j && j < len(msgs) ==> old(msgs[j].GetMessage()) === msgs[j]
ensures  forall j int :: { &msgs[j] } 0 <= j && j < len(msgs) ==> msgs[j].WildcardPerm == old(msgs[j].HasWildcardPermAddr())
ensures  forall j int :: { &msgs[j] } 0 <= j && j < len(msgs) ==> msgs[j].IsActive == old(msgs[j].HasActiveBuffers())
decreases
func SplitPermMsgs(msgs []Message) {
	invariant 0 <= i && i <= len(msgs)
	invariant forall j int :: { &msgs[j] } i <= j && j < len(msgs) ==> msgs[j].Mem()
	invariant forall j int :: { &msgs[j] } 0 <= j && j < i ==> acc(&msgs[j], 1/2) && msgs[j].MemWithoutHalf()
	invariant forall j int :: { &msgs[j] } 0 <= j && j < i ==> msgs[j].WildcardPerm == old(msgs[j].HasWildcardPermAddr())
	invariant forall j int :: { &msgs[j] } 0 <= j && j < i ==> msgs[j].IsActive == old(msgs[j].HasActiveBuffers())
	invariant forall j int :: { &msgs[j] } 0 <= j && j < i ==> msgs[j] === old(msgs[j].GetMessage())
	invariant forall j int :: { &msgs[j] } i <= j && j < len(msgs) ==> msgs[j].GetMessage() === old(msgs[j].GetMessage())
	decreases len(msgs) - i
	for i := 0; i < len(msgs); i++ {
		assert forall j int :: { &msgs[j] }{ &msgs[j].WildcardPerm } 0 <= j && j < i ==> msgs[j].WildcardPerm == old(msgs[j].HasWildcardPermAddr())
		msgs[i].SplitPerm()
		assert forall j int :: { &msgs[j] } 0 <= j && j < i ==> msgs[j].WildcardPerm == old(msgs[j].HasWildcardPermAddr())
		assert msgs[i].WildcardPerm == old(msgs[i].HasWildcardPermAddr())
	}
}
