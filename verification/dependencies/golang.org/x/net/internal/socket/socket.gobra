// Specification for package "golang.org/x/net/internal/socket"
// Based on file https://github.com/golang/net/blob/master/internal/socket/socket.go

// +gobra

package socket

import (
	"net"

	"github.com/scionproto/scion/verification/utils/slices"
)


// A Message represents an IO message.
type Message struct {
	// When writing, the Buffers field must contain at least one
	// byte to write.
	// When reading, the Buffers field will always contain a byte
	// to read.
	Buffers [][]byte

	// OOB contains protocol-specific control or miscellaneous
	// ancillary data known as out-of-band data.
	OOB []byte

	// Addr specifies a destination address when writing.
	// It can be nil when the underlying protocol of the raw
	// connection uses connection-oriented communication.
	// After a successful read, it may contain the source address
	// on the received packet.
	Addr net.Addr

	N     int // # of bytes read or written from/to Buffers
	NN    int // # of bytes read or written from/to OOB
	Flags int // protocol-specific information on the received message
}

pred (m *Message) Mem(lenBuffers int) {
	acc(m) &&
	len(m.Buffers) == lenBuffers &&
	(forall i int :: { &m.Buffers[i] } 0 <= i && i < len(m.Buffers) ==> (acc(&m.Buffers[i]) && slices.AbsSlice_Bytes(m.Buffers[i], 0, len(m.Buffers[i])))) &&
	slices.AbsSlice_Bytes(m.OOB, 0, len(m.OOB)) &&
	(m.Addr != nil ==> acc(m.Addr.Mem(), _))
}

pred (m *Message) MemWithoutHalf(lenBuffers int) {
	acc(m, 1/2) &&
	len(m.Buffers) == lenBuffers &&
	(forall i int :: { &m.Buffers[i] } 0 <= i && i < len(m.Buffers) ==> (acc(&m.Buffers[i]) && slices.AbsSlice_Bytes(m.Buffers[i], 0, len(m.Buffers[i])))) &&
	slices.AbsSlice_Bytes(m.OOB, 0, len(m.OOB)) &&
	(m.Addr != nil ==> acc(m.Addr.Mem(), _))
}

ghost
requires acc(m.Mem(lenBuffers), _)
requires 0 <= i && i < lenBuffers
decreases
pure func (m *Message) GetBuffer(lenBuffers int, i int) []byte {
	return unfolding acc(m.Mem(lenBuffers), _) in m.Buffers[i]
}

// Only defined for the case where lenBuffers == 1
ghost
requires acc(m.Mem(1), _)
decreases
pure func (m *Message) GetFstBuffer() []byte {
	return unfolding acc(m.Mem(1), _) in m.Buffers[0]
}

ghost
requires m.Mem(1)
ensures  acc(m, 1/2) && m.MemWithoutHalf(1)
decreases
func (m *Message) SplitPerm() {
	unfold m.Mem(1)
	fold m.MemWithoutHalf(1)
}

ghost
requires forall j int :: { &msgs[j] } 0 <= j && j < len(msgs) ==> msgs[j].Mem(1)
ensures  forall j int :: { &msgs[j] } 0 <= j && j < len(msgs) ==> acc(&msgs[j], 1/2) && msgs[j].MemWithoutHalf(1)
decreases
func SplitPermMsgs(msgs []Message) {
	invariant 0 <= i && i <= len(msgs)
	invariant forall j int :: { &msgs[j] } i <= j && j < len(msgs) ==> msgs[j].Mem(1)
	invariant forall j int :: { &msgs[j] } 0 <= j && j < i ==> acc(&msgs[j], 1/2) && msgs[j].MemWithoutHalf(1)
	decreases len(msgs) - i
	for i := 0; i < len(msgs); i++ {
		msgs[i].SplitPerm()
	}
}