// Copyright 2023 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package slices

// This file contains predicates for describing the contents of slices and
// functions that manipulate the knowledge in those predicates. 

// How to extend this file:
// - if we need to support slices of non-supported types, we must repeat all definitions
//   for that type. For this, we should be careful to avoid introducing cylical dependencies.
//   The suffix of the predicate/function should be the type of the elems of the slices.
// - For each type, there might be two different types of operations: those that keep track
//   of contents (the name of the operation ends in "C"), and those who do not.

import "github.com/scionproto/scion/verification/utils/seqs"

pred AbsSliceC_Bytes(s []byte, start int, end int, ghost contents seq[byte]) {
	// start inclusive
	0 <= start &&
	start <= end &&
	// end exclusive
	end <= cap(s) &&
	len(contents) == end - start &&
	// Maybe, it is worth having different versions with
	// different triggers, or using a different trigger
	// than the one that is inferred.
	forall i int :: start <= i && i < end ==> (acc(&s[i]) && s[i] == contents[i - start])
}

ghost
requires 0 < p
requires 0 <= start && start <= end && end <= len(s)
requires acc(AbsSlice_Bytes(s, start, end), p)
ensures  acc(AbsSliceC_Bytes(s, start, end, contents), p)
decreases
func GetAbsSliceC_Bytes(s []byte, start int, end int, p perm) (contents seq[byte]) {
	contents = seqs.NewSeqByte(end - start)
	unfold acc(AbsSlice_Bytes(s, start, end), p)
	invariant forall k int :: { &s[k] } start <= k && k < end ==> acc(&s[k], p)
	invariant start <= i && i <= end
	invariant len(contents) == end - start
	invariant forall k int :: { contents[k] } start <= k && k < i ==> contents[k - start] == s[k]
	decreases end - i
	for i := start; i < end; i += 1 {
		contents[i - start] = s[i]
	}
	fold acc(AbsSliceC_Bytes(s, start, end, contents), p)
	return contents
}

ghost
requires 0 <= p
requires AbsSliceC_Bytes(s, start, end, contents)
requires start < idx && idx < end
ensures  AbsSliceC_Bytes(s, start, idx, contents[:idx-start]) && AbsSliceC_Bytes(s, idx, end, contents[idx-start:])
decreases
func SplitByIndexC_Bytes(s []byte, start int, end int, idx int, contents seq[byte], p perm) {
	unfold AbsSliceC_Bytes(s, start, end, contents)
	assert len(contents) == end - start
	fold   AbsSliceC_Bytes(s, start, idx, contents[:idx-start])
	fold   AbsSliceC_Bytes(s, idx, end, contents[idx-start:])
}

ghost
requires 0 < p
requires acc(AbsSliceC_Bytes(s, start, idx, contents1), p)
requires acc(AbsSliceC_Bytes(s, idx,   end, contents2), p)
ensures  acc(AbsSliceC_Bytes(s, start, end, contents1 ++ contents2), p)
decreases
func CombineAtIndexC_Bytes(s []byte, start int, end int, idx int, contents1 seq[byte], contents2 seq[byte], p perm) {
	unfold acc(AbsSliceC_Bytes(s, start, idx, contents1), p)
	unfold acc(AbsSliceC_Bytes(s, idx,   end, contents2), p)
	fold   acc(AbsSliceC_Bytes(s, start, end, contents1 ++ contents2), p)
}

ghost
requires AbsSliceC_Bytes(s, start, end, contents)
// the following precondition convinces Gobra that
// the slice operation is well-formed
requires unfolding AbsSliceC_Bytes(s, start, end, contents) in true
ensures  AbsSliceC_Bytes(s[start:end], 0, len(s[start:end]), contents)
decreases
func ResliceC_Bytes(s []byte, start int, end int, contents seq[byte]) {
	unfold AbsSliceC_Bytes(s, start, end, contents)
	assert forall i int :: 0 <= i && i < (end-start) ==> &s[start:end][i] == &s[start + i]
	fold  AbsSliceC_Bytes(s[start:end], 0, len(s[start:end]), contents)
}

/** Slices of Any with Contents **/

// The elements in contents are required to be comparable
pred AbsSliceC_Any(s []any, start int, end int, ghost contents seq[any]) {
	// start inclusive
	0 <= start &&
	start < end &&
	// end exclusive
	end <= cap(s) &&
	len(contents) == end - start &&
	// Maybe, it is worth having different versions with
	// different triggers, or using a different trigger
	// than the one that is inferred.
	forall i int :: { &s[i] } start <= i && i < end ==> (acc(&s[i]) && s[i] === contents[i - start])
}

ghost
requires AbsSliceC_Any(s, start, end, contents)
requires start < idx && idx < end
ensures  AbsSliceC_Any(s, start, idx, contents[:idx-start]) && AbsSliceC_Any(s, idx, end, contents[idx-start:])
decreases
func SplitByIndexC_Any(s []any, start int, end int, idx int, contents seq[any]) {
	unfold AbsSliceC_Any(s, start, end, contents)
	assert len(contents) == end - start
	fold   AbsSliceC_Any(s, start, idx, contents[:idx-start])
	fold   AbsSliceC_Any(s, idx, end, contents[idx-start:])
}

/** End of slices of Any with Contents **/
